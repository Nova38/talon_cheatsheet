{
    "user_registry": [
        {
            "name": "user.letter",
            "pretty_name": "letter",
            "registry": "user",
            "commands": [
                {
                    "name": "alfa",
                    "command": "a"
                },
                {
                    "name": "bat",
                    "command": "b"
                },
                {
                    "name": "cap",
                    "command": "c"
                },
                {
                    "name": "drum",
                    "command": "d"
                },
                {
                    "name": "each",
                    "command": "e"
                },
                {
                    "name": "fine",
                    "command": "f"
                },
                {
                    "name": "gust",
                    "command": "g"
                },
                {
                    "name": "hotel",
                    "command": "h"
                },
                {
                    "name": "sit",
                    "command": "i"
                },
                {
                    "name": "jury",
                    "command": "j"
                },
                {
                    "name": "crunch",
                    "command": "k"
                },
                {
                    "name": "look",
                    "command": "l"
                },
                {
                    "name": "made",
                    "command": "m"
                },
                {
                    "name": "near",
                    "command": "n"
                },
                {
                    "name": "odd",
                    "command": "o"
                },
                {
                    "name": "pit",
                    "command": "p"
                },
                {
                    "name": "quench",
                    "command": "q"
                },
                {
                    "name": "red",
                    "command": "r"
                },
                {
                    "name": "sun",
                    "command": "s"
                },
                {
                    "name": "trap",
                    "command": "t"
                },
                {
                    "name": "urge",
                    "command": "u"
                },
                {
                    "name": "vest",
                    "command": "v"
                },
                {
                    "name": "whale",
                    "command": "w"
                },
                {
                    "name": "plex",
                    "command": "x"
                },
                {
                    "name": "yank",
                    "command": "y"
                },
                {
                    "name": "zulu",
                    "command": "z"
                }
            ]
        },
        {
            "name": "user.number_key",
            "pretty_name": "number_key",
            "registry": "user",
            "commands": [
                {
                    "name": "zero",
                    "command": "0"
                },
                {
                    "name": "one",
                    "command": "1"
                },
                {
                    "name": "two",
                    "command": "2"
                },
                {
                    "name": "three",
                    "command": "3"
                },
                {
                    "name": "four",
                    "command": "4"
                },
                {
                    "name": "five",
                    "command": "5"
                },
                {
                    "name": "six",
                    "command": "6"
                },
                {
                    "name": "seven",
                    "command": "7"
                },
                {
                    "name": "eight",
                    "command": "8"
                },
                {
                    "name": "nine",
                    "command": "9"
                }
            ]
        },
        {
            "name": "user.modifier_key",
            "pretty_name": "modifier_key",
            "registry": "user",
            "commands": [
                {
                    "name": "alt",
                    "command": "alt"
                },
                {
                    "name": "control",
                    "command": "ctrl"
                },
                {
                    "name": "shift",
                    "command": "shift"
                },
                {
                    "name": "super",
                    "command": "super"
                }
            ]
        },
        {
            "name": "user.special_key",
            "pretty_name": "special_key",
            "registry": "user",
            "commands": [
                {
                    "name": "end",
                    "command": "end"
                },
                {
                    "name": "enter",
                    "command": "enter"
                },
                {
                    "name": "escape",
                    "command": "escape"
                },
                {
                    "name": "home",
                    "command": "home"
                },
                {
                    "name": "insert",
                    "command": "insert"
                },
                {
                    "name": "pagedown",
                    "command": "pagedown"
                },
                {
                    "name": "pageup",
                    "command": "pageup"
                },
                {
                    "name": "space",
                    "command": "space"
                },
                {
                    "name": "tab",
                    "command": "tab"
                },
                {
                    "name": "delete",
                    "command": "backspace"
                },
                {
                    "name": "forward delete",
                    "command": "delete"
                },
                {
                    "name": "page up",
                    "command": "pageup"
                },
                {
                    "name": "page down",
                    "command": "pagedown"
                },
                {
                    "name": "menu key",
                    "command": "menu"
                },
                {
                    "name": "print screen",
                    "command": "printscr"
                }
            ]
        },
        {
            "name": "user.symbol_key",
            "pretty_name": "symbol_key",
            "registry": "user",
            "commands": [
                {
                    "name": "dot",
                    "command": "."
                },
                {
                    "name": "point",
                    "command": "."
                },
                {
                    "name": "quote",
                    "command": "'"
                },
                {
                    "name": "apostrophe",
                    "command": "'"
                },
                {
                    "name": "L square",
                    "command": "["
                },
                {
                    "name": "left square",
                    "command": "["
                },
                {
                    "name": "square",
                    "command": "["
                },
                {
                    "name": "R square",
                    "command": "]"
                },
                {
                    "name": "right square",
                    "command": "]"
                },
                {
                    "name": "slash",
                    "command": "/"
                },
                {
                    "name": "backslash",
                    "command": "\\"
                },
                {
                    "name": "minus",
                    "command": "-"
                },
                {
                    "name": "dash",
                    "command": "-"
                },
                {
                    "name": "equals",
                    "command": "="
                },
                {
                    "name": "plus",
                    "command": "+"
                },
                {
                    "name": "tilde",
                    "command": "~"
                },
                {
                    "name": "bang",
                    "command": "!"
                },
                {
                    "name": "down score",
                    "command": "_"
                },
                {
                    "name": "under score",
                    "command": "_"
                },
                {
                    "name": "paren",
                    "command": "("
                },
                {
                    "name": "L paren",
                    "command": "("
                },
                {
                    "name": "left paren",
                    "command": "("
                },
                {
                    "name": "R paren",
                    "command": ")"
                },
                {
                    "name": "right paren",
                    "command": ")"
                },
                {
                    "name": "brace",
                    "command": "{"
                },
                {
                    "name": "left brace",
                    "command": "{"
                },
                {
                    "name": "R brace",
                    "command": "}"
                },
                {
                    "name": "right brace",
                    "command": "}"
                },
                {
                    "name": "angle",
                    "command": "<"
                },
                {
                    "name": "left angle",
                    "command": "<"
                },
                {
                    "name": "less than",
                    "command": "<"
                },
                {
                    "name": "rangle",
                    "command": ">"
                },
                {
                    "name": "R angle",
                    "command": ">"
                },
                {
                    "name": "right angle",
                    "command": ">"
                },
                {
                    "name": "greater than",
                    "command": ">"
                },
                {
                    "name": "star",
                    "command": "*"
                },
                {
                    "name": "hash",
                    "command": "#"
                },
                {
                    "name": "percent",
                    "command": "%"
                },
                {
                    "name": "caret",
                    "command": "^"
                },
                {
                    "name": "amper",
                    "command": "&"
                },
                {
                    "name": "pipe",
                    "command": "|"
                },
                {
                    "name": "dubquote",
                    "command": "\""
                },
                {
                    "name": "double quote",
                    "command": "\""
                },
                {
                    "name": "dollar",
                    "command": "$"
                },
                {
                    "name": "pound",
                    "command": "\u00a3"
                },
                {
                    "name": "`",
                    "command": "`"
                },
                {
                    "name": ",",
                    "command": ","
                },
                {
                    "name": "back tick",
                    "command": "`"
                },
                {
                    "name": "grave",
                    "command": "`"
                },
                {
                    "name": "comma",
                    "command": ","
                },
                {
                    "name": "period",
                    "command": "."
                },
                {
                    "name": "full stop",
                    "command": "."
                },
                {
                    "name": "semicolon",
                    "command": ";"
                },
                {
                    "name": "colon",
                    "command": ":"
                },
                {
                    "name": "forward slash",
                    "command": "/"
                },
                {
                    "name": "question mark",
                    "command": "?"
                },
                {
                    "name": "exclamation mark",
                    "command": "!"
                },
                {
                    "name": "exclamation point",
                    "command": "!"
                },
                {
                    "name": "asterisk",
                    "command": "*"
                },
                {
                    "name": "hash sign",
                    "command": "#"
                },
                {
                    "name": "number sign",
                    "command": "#"
                },
                {
                    "name": "percent sign",
                    "command": "%"
                },
                {
                    "name": "at sign",
                    "command": "@"
                },
                {
                    "name": "and sign",
                    "command": "&"
                },
                {
                    "name": "ampersand",
                    "command": "&"
                },
                {
                    "name": "dollar sign",
                    "command": "$"
                },
                {
                    "name": "pound sign",
                    "command": "\u00a3"
                }
            ]
        },
        {
            "name": "user.arrow_key",
            "pretty_name": "arrow_key",
            "registry": "user",
            "commands": [
                {
                    "name": "down",
                    "command": "down"
                },
                {
                    "name": "left",
                    "command": "left"
                },
                {
                    "name": "right",
                    "command": "right"
                },
                {
                    "name": "up",
                    "command": "up"
                }
            ]
        },
        {
            "name": "user.punctuation",
            "pretty_name": "punctuation",
            "registry": "user",
            "commands": [
                {
                    "name": "`",
                    "command": "`"
                },
                {
                    "name": ",",
                    "command": ","
                },
                {
                    "name": "back tick",
                    "command": "`"
                },
                {
                    "name": "grave",
                    "command": "`"
                },
                {
                    "name": "comma",
                    "command": ","
                },
                {
                    "name": "period",
                    "command": "."
                },
                {
                    "name": "full stop",
                    "command": "."
                },
                {
                    "name": "semicolon",
                    "command": ";"
                },
                {
                    "name": "colon",
                    "command": ":"
                },
                {
                    "name": "forward slash",
                    "command": "/"
                },
                {
                    "name": "question mark",
                    "command": "?"
                },
                {
                    "name": "exclamation mark",
                    "command": "!"
                },
                {
                    "name": "exclamation point",
                    "command": "!"
                },
                {
                    "name": "asterisk",
                    "command": "*"
                },
                {
                    "name": "hash sign",
                    "command": "#"
                },
                {
                    "name": "number sign",
                    "command": "#"
                },
                {
                    "name": "percent sign",
                    "command": "%"
                },
                {
                    "name": "at sign",
                    "command": "@"
                },
                {
                    "name": "and sign",
                    "command": "&"
                },
                {
                    "name": "ampersand",
                    "command": "&"
                },
                {
                    "name": "dollar sign",
                    "command": "$"
                },
                {
                    "name": "pound sign",
                    "command": "\u00a3"
                }
            ]
        },
        {
            "name": "user.function_key",
            "pretty_name": "function_key",
            "registry": "user",
            "commands": [
                {
                    "name": "F one",
                    "command": "f1"
                },
                {
                    "name": "F two",
                    "command": "f2"
                },
                {
                    "name": "F three",
                    "command": "f3"
                },
                {
                    "name": "F four",
                    "command": "f4"
                },
                {
                    "name": "F five",
                    "command": "f5"
                },
                {
                    "name": "F six",
                    "command": "f6"
                },
                {
                    "name": "F seven",
                    "command": "f7"
                },
                {
                    "name": "F eight",
                    "command": "f8"
                },
                {
                    "name": "F nine",
                    "command": "f9"
                },
                {
                    "name": "F ten",
                    "command": "f10"
                },
                {
                    "name": "F eleven",
                    "command": "f11"
                },
                {
                    "name": "F twelve",
                    "command": "f12"
                }
            ]
        }
    ],
    "contexts": [
        {
            "name": "talon_plugins.main",
            "pretty_name": "main",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "talon_plugins.record",
            "pretty_name": "record",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "talon_plugins.speech",
            "pretty_name": "speech",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.cheatsheet.cheatsheet.talon",
            "pretty_name": "cheatsheet",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "print cheatsheet",
                    "command": "user.cheatsheet()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.cursorless-talon.src.csv_overrides",
            "pretty_name": "csv overrides",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.cursorless-talon.src.actions.wrap",
            "pretty_name": "wrap",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.cursorless-talon.src.cheat_sheet.talon",
            "pretty_name": "cheat sheet",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "cursorless help",
                    "command": "user.cursorless_cheat_sheet_toggle()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.cursorless-talon.src.cursorless.talon",
            "pretty_name": "cursorless",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "{user.cursorless_simple_action} <user.cursorless_target>",
                    "command": "user.cursorless_simple_action(cursorless_simple_action, cursorless_target)\n",
                    "os": ""
                },
                {
                    "name": "{user.cursorless_swap_action} <user.cursorless_swap_targets>",
                    "command": "user.cursorless_multiple_target_command(cursorless_swap_action, cursorless_swap_targets)\n",
                    "os": ""
                },
                {
                    "name": "{user.cursorless_move_bring_action} <user.cursorless_move_bring_targets>",
                    "command": "user.cursorless_multiple_target_command(cursorless_move_bring_action, cursorless_move_bring_targets)\n",
                    "os": ""
                },
                {
                    "name": "{user.cursorless_reformat_action} <user.formatters> at <user.cursorless_target>",
                    "command": "user.cursorless_reformat(cursorless_target, formatters)\n",
                    "os": ""
                },
                {
                    "name": "<user.cursorless_wrapper> <user.cursorless_target>",
                    "command": "user.cursorless_wrap(cursorless_wrapper, cursorless_target)\n",
                    "os": ""
                },
                {
                    "name": "cursorless  cheatsheet",
                    "command": "user.cursorless_cheat_sheet_toggle()",
                    "os": ""
                },
                {
                    "name": "cursorless instructions",
                    "command": "user.cursorless_open_instructions()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.cursorless-talon.src.marks.lines_number",
            "pretty_name": "lines number",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.cursorless-talon.src.marks.mark",
            "pretty_name": "mark",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.cursorless-talon.src.marks.vscode_settings",
            "pretty_name": "vscode settings",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.cursorless-talon.src.marks.vscode_settings.1",
            "pretty_name": "1",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.cursorless-talon.src.marks.vscode_settings.2",
            "pretty_name": "2",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.cursorless-talon.src.modifiers.head_tail",
            "pretty_name": "head tail",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.cursorless-talon.src.modifiers.position",
            "pretty_name": "position",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.1password.1password.talon",
            "pretty_name": "1password",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "password new",
                    "command": "user.password_new()",
                    "os": ""
                },
                {
                    "name": "password dup",
                    "command": "user.password_duplicate()",
                    "os": ""
                },
                {
                    "name": "password edit",
                    "command": "user.password_edit()",
                    "os": ""
                },
                {
                    "name": "password delete",
                    "command": "user.password_delete()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.1password.1password_global.talon",
            "pretty_name": "1password global",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "password fill",
                    "command": "user.password_fill()",
                    "os": ""
                },
                {
                    "name": "password show",
                    "command": "user.password_show()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.1password.mac",
            "pretty_name": "1password",
            "os": "mac",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.1password.win",
            "pretty_name": "1password",
            "os": "win",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.amethyst.amethyst.talon",
            "pretty_name": "amethyst",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "window next",
                    "command": "key(\"alt-shift-j\")",
                    "os": ""
                },
                {
                    "name": "window previous",
                    "command": "key(\"alt-shift-k\")",
                    "os": ""
                },
                {
                    "name": "window full",
                    "command": "key(\"alt-shift-d\")",
                    "os": ""
                },
                {
                    "name": "window tall",
                    "command": "key(\"alt-shift-a\")",
                    "os": ""
                },
                {
                    "name": "window middle",
                    "command": "key(\"alt-shift-`\")",
                    "os": ""
                },
                {
                    "name": "window move main",
                    "command": "key(\"alt-shift-enter\")",
                    "os": ""
                },
                {
                    "name": "window grow",
                    "command": "key(\"alt-shift-l\")",
                    "os": ""
                },
                {
                    "name": "window shrink",
                    "command": "key(\"alt-shift-h\")",
                    "os": ""
                },
                {
                    "name": "window reevaluate",
                    "command": "key(\"alt-shift-z\")",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.anaconda.anaconda",
            "pretty_name": "anaconda",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.anaconda.anaconda.talon",
            "pretty_name": "anaconda",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "anaconda",
                    "command": "\"conda \"",
                    "os": ""
                },
                {
                    "name": "anaconda help",
                    "command": "\"conda --help\\n\"",
                    "os": ""
                },
                {
                    "name": "anaconda version",
                    "command": "\"conda --version\\n\"",
                    "os": ""
                },
                {
                    "name": "anaconda environment list",
                    "command": "\"conda env list\\n\"",
                    "os": ""
                },
                {
                    "name": "anaconda environment create",
                    "command": "\"conda env create -f \"",
                    "os": ""
                },
                {
                    "name": "anaconda environment remove",
                    "command": "\"conda env remove -n \"",
                    "os": ""
                },
                {
                    "name": "anaconda activate",
                    "command": "\"conda activate \"",
                    "os": ""
                },
                {
                    "name": "anaconda clean",
                    "command": "\"conda clean \"",
                    "os": ""
                },
                {
                    "name": "anaconda compare",
                    "command": "\"conda compare \"",
                    "os": ""
                },
                {
                    "name": "anaconda config",
                    "command": "\"conda config \"",
                    "os": ""
                },
                {
                    "name": "anaconda create",
                    "command": "\"conda create \"",
                    "os": ""
                },
                {
                    "name": "anaconda info",
                    "command": "\"conda info \"",
                    "os": ""
                },
                {
                    "name": "anaconda init",
                    "command": "\"conda init \"",
                    "os": ""
                },
                {
                    "name": "anaconda install",
                    "command": "\"conda install \"",
                    "os": ""
                },
                {
                    "name": "anaconda list",
                    "command": "\"conda list \"",
                    "os": ""
                },
                {
                    "name": "anaconda package",
                    "command": "\"conda package \"",
                    "os": ""
                },
                {
                    "name": "anaconda remove",
                    "command": "\"conda remove \"",
                    "os": ""
                },
                {
                    "name": "anaconda uninstall",
                    "command": "\"conda uninstall \"",
                    "os": ""
                },
                {
                    "name": "anaconda run",
                    "command": "\"conda run \"",
                    "os": ""
                },
                {
                    "name": "anaconda search",
                    "command": "\"conda search \"",
                    "os": ""
                },
                {
                    "name": "anaconda update",
                    "command": "\"conda update \"",
                    "os": ""
                },
                {
                    "name": "anaconda upgrade",
                    "command": "\"conda upgrade \"",
                    "os": ""
                },
                {
                    "name": "anaconda build",
                    "command": "\"conda build \"",
                    "os": ""
                },
                {
                    "name": "anaconda convert",
                    "command": "\"conda convert \"",
                    "os": ""
                },
                {
                    "name": "anaconda debug",
                    "command": "\"conda debug \"",
                    "os": ""
                },
                {
                    "name": "anaconda develop",
                    "command": "\"conda develop \"",
                    "os": ""
                },
                {
                    "name": "anaconda environment",
                    "command": "\"conda env \"",
                    "os": ""
                },
                {
                    "name": "anaconda index",
                    "command": "\"conda index \"",
                    "os": ""
                },
                {
                    "name": "anaconda inspect",
                    "command": "\"conda inspect \"",
                    "os": ""
                },
                {
                    "name": "anaconda metapackage",
                    "command": "\"conda metapackage \"",
                    "os": ""
                },
                {
                    "name": "anaconda render",
                    "command": "\"conda render \"",
                    "os": ""
                },
                {
                    "name": "anaconda server",
                    "command": "\"conda server \"",
                    "os": ""
                },
                {
                    "name": "anaconda skeleton",
                    "command": "\"conda skeleton \"",
                    "os": ""
                },
                {
                    "name": "anaconda verify",
                    "command": "\"conda verify \"",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.chrome.chrome",
            "pretty_name": "chrome",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.chrome.mac",
            "pretty_name": "chrome",
            "os": "mac",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.chrome.win",
            "pretty_name": "chrome",
            "os": "win",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.conemu.talon",
            "pretty_name": "conemu",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.discord.discord.talon",
            "pretty_name": "discord",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "[channel] mentions last",
                    "command": "user.discord_mentions_last()",
                    "os": ""
                },
                {
                    "name": "[channel] mentions next",
                    "command": "user.discord_mentions_next()",
                    "os": ""
                },
                {
                    "name": "oldest unread",
                    "command": "user.discord_oldest_unread()",
                    "os": ""
                },
                {
                    "name": "toggle pins",
                    "command": "user.discord_toggle_pins()",
                    "os": ""
                },
                {
                    "name": "toggle inbox",
                    "command": "user.discord_toggle_inbox()",
                    "os": ""
                },
                {
                    "name": "toggle (members | member list)",
                    "command": "user.discord_toggle_members()",
                    "os": ""
                },
                {
                    "name": "pick emoji",
                    "command": "user.discord_emoji_picker()",
                    "os": ""
                },
                {
                    "name": "pick (jif | gif | gift)",
                    "command": "user.discord_gif_picker()",
                    "os": ""
                },
                {
                    "name": "mark inbox channel read",
                    "command": "user.discord_mark_inbox_read()",
                    "os": ""
                },
                {
                    "name": "[toggle] (mute | unmute)",
                    "command": "user.discord_mute()",
                    "os": ""
                },
                {
                    "name": "[toggle] (deafen | undeafen)",
                    "command": "user.discord_deafen()",
                    "os": ""
                },
                {
                    "name": "answer call",
                    "command": "user.discord_answer_call()",
                    "os": ""
                },
                {
                    "name": "decline call",
                    "command": "user.discord_decline_call()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.discord.mac",
            "pretty_name": "discord",
            "os": "mac",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.discord.win",
            "pretty_name": "discord",
            "os": "win",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.eclipse.eclipse.talon",
            "pretty_name": "eclipse",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "please [<user.text>]",
                    "command": "key(ctrl-3)\ninsert(user.text or \"\")\n\n# Sidebar",
                    "os": ""
                },
                {
                    "name": "bar explore",
                    "command": "key(alt-shift-w p)",
                    "os": ""
                },
                {
                    "name": "bar outline",
                    "command": "key(alt-shift-q o)",
                    "os": ""
                },
                {
                    "name": "panel output",
                    "command": "key(alt-shift-q)\nsleep(200ms)\nkey(c)",
                    "os": ""
                },
                {
                    "name": "panel problems",
                    "command": "key(alt-shift-q)\nsleep(200ms)\nkey(x)",
                    "os": ""
                },
                {
                    "name": "panel errors",
                    "command": "key(alt-shift-q)\nsleep(200ms)\nkey(l)",
                    "os": ""
                },
                {
                    "name": "panel breakpoints",
                    "command": "key(alt-shift-q)\nsleep(200ms)\nkey(b)",
                    "os": ""
                },
                {
                    "name": "panel search",
                    "command": "key(alt-shift-q)\nsleep(200ms)\nkey(s)",
                    "os": ""
                },
                {
                    "name": "panel variables",
                    "command": "key(alt-shift-q)\nsleep(200ms)\nkey(v)\n# panel switch:\n# panel terminal:\n\n# Settings",
                    "os": ""
                },
                {
                    "name": "show settings",
                    "command": "key(alt-w p)",
                    "os": ""
                },
                {
                    "name": "show shortcuts",
                    "command": "key(ctrl-shift-l)",
                    "os": ""
                },
                {
                    "name": "file hunt [<user.text>]",
                    "command": "key(ctrl-shift-r)\nsleep(50ms)\ninsert(text or \"\")\n# file copy path:\n# file create sibling:",
                    "os": ""
                },
                {
                    "name": "file create",
                    "command": "key(ctrl-n)",
                    "os": ""
                },
                {
                    "name": "file open folder",
                    "command": "key(alt-shift-w x)",
                    "os": ""
                },
                {
                    "name": "file rename",
                    "command": "key(alt-shift-w p enter f2)",
                    "os": ""
                },
                {
                    "name": "file reveal",
                    "command": "key(alt-shift-w p enter)",
                    "os": ""
                },
                {
                    "name": "imports fix",
                    "command": "key(ctrl-shift-o)",
                    "os": ""
                },
                {
                    "name": "refactor rename",
                    "command": "key(alt-shift-r)",
                    "os": ""
                },
                {
                    "name": "refactor this",
                    "command": "key(alt-shift-i)",
                    "os": ""
                },
                {
                    "name": "(go declaration | follow)",
                    "command": "key(f3)",
                    "os": ""
                },
                {
                    "name": "go back",
                    "command": "key(alt-left)",
                    "os": ""
                },
                {
                    "name": "go forward",
                    "command": "key(alt-right)",
                    "os": ""
                },
                {
                    "name": "go marks",
                    "command": "key(alt-end)",
                    "os": ""
                },
                {
                    "name": "toggle mark",
                    "command": "key(ctrl-alt-b down enter)",
                    "os": ""
                },
                {
                    "name": "go next mark",
                    "command": "key(alt-pagedown)",
                    "os": ""
                },
                {
                    "name": "go last mark",
                    "command": "key(alt-pageup)",
                    "os": ""
                },
                {
                    "name": "break point",
                    "command": "key(ctrl-shift-b)",
                    "os": ""
                },
                {
                    "name": "step over",
                    "command": "key(f6)",
                    "os": ""
                },
                {
                    "name": "debug step into",
                    "command": "key(f5)",
                    "os": ""
                },
                {
                    "name": "debug step out [of]",
                    "command": "key(f7)",
                    "os": ""
                },
                {
                    "name": "debug continue",
                    "command": "key(f8)",
                    "os": ""
                },
                {
                    "name": "copy line down",
                    "command": "key(ctrl-alt-down)",
                    "os": ""
                },
                {
                    "name": "copy line up",
                    "command": "key(ctrl-alt-up)",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.eclipse.win",
            "pretty_name": "eclipse",
            "os": "win",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.edge.edge",
            "pretty_name": "edge",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.edge.mac",
            "pretty_name": "edge",
            "os": "mac",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.edge.win",
            "pretty_name": "edge",
            "os": "win",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.evernote.mac.talon",
            "pretty_name": "evernote",
            "os": "mac",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.file_manager.talon",
            "pretty_name": "file manager",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "title force",
                    "command": "user.file_manager_refresh_title()",
                    "os": ""
                },
                {
                    "name": "manager show",
                    "command": "user.file_manager_toggle_pickers()",
                    "os": ""
                },
                {
                    "name": "manager refresh",
                    "command": "user.file_manager_update_lists()",
                    "os": ""
                },
                {
                    "name": "go desk",
                    "command": "user.file_manager_open_user_directory(\"Desktop\")",
                    "os": ""
                },
                {
                    "name": "go docks",
                    "command": "user.file_manager_open_user_directory(\"Documents\")",
                    "os": ""
                },
                {
                    "name": "go downloads",
                    "command": "user.file_manager_open_user_directory(\"Downloads\")",
                    "os": ""
                },
                {
                    "name": "go pictures",
                    "command": "user.file_manager_open_user_directory(\"Pictures\")",
                    "os": ""
                },
                {
                    "name": "go profile",
                    "command": "user.file_manager_open_user_directory(\"\")",
                    "os": ""
                },
                {
                    "name": "go talon home",
                    "command": "user.file_manager_open_directory(path.talon_home())",
                    "os": ""
                },
                {
                    "name": "go talon user",
                    "command": "user.file_manager_open_directory(path.talon_user())",
                    "os": ""
                },
                {
                    "name": "go user",
                    "command": "user.file_manager_open_directory(path.user_home())",
                    "os": ""
                },
                {
                    "name": "go back",
                    "command": "user.file_manager_go_back()",
                    "os": ""
                },
                {
                    "name": "go forward",
                    "command": "user.file_manager_go_forward()",
                    "os": ""
                },
                {
                    "name": "(go parent | daddy)",
                    "command": "user.file_manager_open_parent()",
                    "os": ""
                },
                {
                    "name": "follow numb <number_small>",
                    "command": "directory = user.file_manager_get_directory_by_index(number_small - 1)\nuser.file_manager_open_directory(directory)",
                    "os": ""
                },
                {
                    "name": "follow {user.file_manager_directories}",
                    "command": "user.file_manager_open_directory(file_manager_directories)",
                    "os": ""
                },
                {
                    "name": "(select|cell) folder {user.file_manager_directories}",
                    "command": "user.file_manager_select_directory(file_manager_directories)",
                    "os": ""
                },
                {
                    "name": "open <number_small>",
                    "command": "file = user.file_manager_get_file_by_index(number_small - 1)\nuser.file_manager_open_file(file)",
                    "os": ""
                },
                {
                    "name": "folder numb <number_small>",
                    "command": "directory = user.file_manager_get_directory_by_index(number_small - 1)\nuser.file_manager_select_directory(directory)",
                    "os": ""
                },
                {
                    "name": "file numb <number_small>",
                    "command": "file = user.file_manager_get_file_by_index(number_small - 1)\nuser.file_manager_select_file(file)",
                    "os": ""
                },
                {
                    "name": "file {user.file_manager_files}",
                    "command": "user.file_manager_select_file(file_manager_files)",
                    "os": ""
                },
                {
                    "name": "(select|cell) file {user.file_manager_files}",
                    "command": "user.file_manager_select_file(file_manager_files)",
                    "os": ""
                },
                {
                    "name": "folder new <user.text>",
                    "command": "user.file_manager_new_folder(text)\n\n#show properties",
                    "os": ""
                },
                {
                    "name": "properties show",
                    "command": "user.file_manager_show_properties()",
                    "os": ""
                },
                {
                    "name": "terminal here",
                    "command": "user.file_manager_terminal_here()",
                    "os": ""
                },
                {
                    "name": "folder next",
                    "command": "user.file_manager_next_folder_page()",
                    "os": ""
                },
                {
                    "name": "folder last",
                    "command": "user.file_manager_previous_folder_page()",
                    "os": ""
                },
                {
                    "name": "file next",
                    "command": "user.file_manager_next_file_page()",
                    "os": ""
                },
                {
                    "name": "file last",
                    "command": "user.file_manager_previous_file_page()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.firefox.firefox",
            "pretty_name": "firefox",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.firefox.firefox.talon",
            "pretty_name": "firefox",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "tab search",
                    "command": "browser.focus_address()\ninsert(\"% \")",
                    "os": ""
                },
                {
                    "name": "tab search <user.text>",
                    "command": "browser.focus_address()\ninsert(\"% {text}\")\nkey(down)\n",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.firefox.linux",
            "pretty_name": "firefox",
            "os": "linux",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.firefox.mac",
            "pretty_name": "firefox",
            "os": "mac",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.firefox.win",
            "pretty_name": "firefox",
            "os": "win",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.gdb.gdb",
            "pretty_name": "gdb",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.gdb.gdb.talon",
            "pretty_name": "gdb",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "until <number>",
                    "command": "\"until {number}\"",
                    "os": ""
                },
                {
                    "name": "force clear all break points",
                    "command": "insert(\"d br\\n\")\ninsert(\"y\\n\")",
                    "os": ""
                },
                {
                    "name": "break [on] clipboard",
                    "command": "insert(\"break \")\nkey(ctrl-shift-v)\nkey(enter)\n\n# information",
                    "os": ""
                },
                {
                    "name": "list [source]",
                    "command": "\"list\\n\"",
                    "os": ""
                },
                {
                    "name": "info source",
                    "command": "\"info source\\n\"",
                    "os": ""
                },
                {
                    "name": "print",
                    "command": "\"p \"",
                    "os": ""
                },
                {
                    "name": "print [variable] <user.text>",
                    "command": "\"p {text}\"",
                    "os": ""
                },
                {
                    "name": "print hex",
                    "command": "\"p/x \"",
                    "os": ""
                },
                {
                    "name": "print hex [variable] <user.text>",
                    "command": "\"p/x {text}\"",
                    "os": ""
                },
                {
                    "name": "print string",
                    "command": "\"p/s \"",
                    "os": ""
                },
                {
                    "name": "hex dump <number> bytes",
                    "command": "\"x/{number}bx \"",
                    "os": ""
                },
                {
                    "name": "hex dump <number> (half|short) words",
                    "command": "\"x/{number}hx \"",
                    "os": ""
                },
                {
                    "name": "hex dump <number> (d|long) words",
                    "command": "\"x/{number}dx \"",
                    "os": ""
                },
                {
                    "name": "hex dump <number> quad words",
                    "command": "\"x/{number}gx \"",
                    "os": ""
                },
                {
                    "name": "hex dump",
                    "command": "\"x/100gx \"",
                    "os": ""
                },
                {
                    "name": "hex dump highlighted",
                    "command": "insert(\"x/100gx \")\nedit.copy()\nedit.paste()\nkey(enter)",
                    "os": ""
                },
                {
                    "name": "hex dump clipboard",
                    "command": "insert(\"x/100gx \")\nedit.paste()\nkey(enter)\n\n\n# execution",
                    "os": ""
                },
                {
                    "name": "source",
                    "command": "\"source \\t\\t\"",
                    "os": ""
                },
                {
                    "name": "(list|show|info) display",
                    "command": "\"info display\\n\"",
                    "os": ""
                },
                {
                    "name": "display assembly line",
                    "command": "\"display /i $pc\\n\"",
                    "os": ""
                },
                {
                    "name": "display source",
                    "command": "\"display \"",
                    "os": ""
                },
                {
                    "name": "enable display <number_small>",
                    "command": "\"enable display {number_small}\\n\"",
                    "os": ""
                },
                {
                    "name": "disable display <number_small>",
                    "command": "\"disable display {number_small}\\n\"",
                    "os": ""
                },
                {
                    "name": "undisplay",
                    "command": "\"undisplay\\n\"",
                    "os": ""
                },
                {
                    "name": "(list|show|info) local",
                    "command": "\"info local \"",
                    "os": ""
                },
                {
                    "name": "(list|show|info) local typed",
                    "command": "\"info local -t \"",
                    "os": ""
                },
                {
                    "name": "(list|show|info) variable",
                    "command": "\"info variable \"",
                    "os": ""
                },
                {
                    "name": "(list|show|info) variable typed",
                    "command": "\"info variable -t \"",
                    "os": ""
                },
                {
                    "name": "(list|show|info) locals",
                    "command": "\"info local\\n\"",
                    "os": ""
                },
                {
                    "name": "(list|show|info) variables",
                    "command": "\"info variables\\n\"",
                    "os": ""
                },
                {
                    "name": "info threads",
                    "command": "\"info threads\\n\"",
                    "os": ""
                },
                {
                    "name": "restart [program]",
                    "command": "\"r\\n\"",
                    "os": ""
                },
                {
                    "name": "continue",
                    "command": "\"c\\n\"",
                    "os": ""
                },
                {
                    "name": "back trace",
                    "command": "\"bt\\n\"",
                    "os": ""
                },
                {
                    "name": "debug quit",
                    "command": "\"quit\\n\"",
                    "os": ""
                },
                {
                    "name": "debug force quit",
                    "command": "\"quit\\ny\\n\"",
                    "os": ""
                },
                {
                    "name": "(show|info) (inf|inferiors)",
                    "command": "\"info inferiors\\n\"",
                    "os": ""
                },
                {
                    "name": "inferior <number_small>",
                    "command": "\"inferior {number_small}\\n\"",
                    "os": ""
                },
                {
                    "name": "inferior",
                    "command": "\"inferior \"",
                    "os": ""
                },
                {
                    "name": "resume main (inf|inferior)",
                    "command": "insert(\"inferior 1\\n\")\ninsert(\"c\\n\")",
                    "os": ""
                },
                {
                    "name": "resume [from] (inf|inferior) <number_small>",
                    "command": "insert(\"inferior {number_small}\\n\")\ninsert(\"c\\n\")\n\n# arguments",
                    "os": ""
                },
                {
                    "name": "set args",
                    "command": "\"set args \"",
                    "os": ""
                },
                {
                    "name": "show follow (fork|forks) [mode]",
                    "command": "\"show follow-fork-mode\\n\"",
                    "os": ""
                },
                {
                    "name": "[set] follow (fork|forks) [mode] child",
                    "command": "\"set follow-fork-mode child\\n\"",
                    "os": ""
                },
                {
                    "name": "[set] follow (fork|forks) [mode] parent",
                    "command": "\"set follow-fork-mode parent\\n\"",
                    "os": ""
                },
                {
                    "name": "show detach on fork",
                    "command": "\"show detach-on-fork\\n\"",
                    "os": ""
                },
                {
                    "name": "set detach on fork",
                    "command": "\"set detach-on-fork on\\n\"",
                    "os": ""
                },
                {
                    "name": "unset detach on fork",
                    "command": "\"set detach-on-fork off\\n\"",
                    "os": ""
                },
                {
                    "name": "show list size",
                    "command": "\"show listsize\\n\"",
                    "os": ""
                },
                {
                    "name": "set list size <number_small>",
                    "command": "\"set listsize {number_small}\\n\"",
                    "os": ""
                },
                {
                    "name": "clear screen",
                    "command": "\"shell clear\\n\"",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.generic_browser.talon",
            "pretty_name": "generic browser",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "(address bar | go address | go url)",
                    "command": "browser.focus_address()",
                    "os": ""
                },
                {
                    "name": "(address copy | url copy | copy address | copy url)",
                    "command": "browser.focus_address()\nsleep(50ms)\nedit.copy()",
                    "os": ""
                },
                {
                    "name": "go home",
                    "command": "browser.go_home()",
                    "os": ""
                },
                {
                    "name": "[go] forward",
                    "command": "browser.go_forward()",
                    "os": ""
                },
                {
                    "name": "go (back | backward)",
                    "command": "browser.go_back()",
                    "os": ""
                },
                {
                    "name": "go to {user.website}",
                    "command": "browser.go(website)",
                    "os": ""
                },
                {
                    "name": "go private",
                    "command": "browser.open_private_window()",
                    "os": ""
                },
                {
                    "name": "bookmark it",
                    "command": "browser.bookmark()",
                    "os": ""
                },
                {
                    "name": "bookmark tabs",
                    "command": "browser.bookmark_tabs()",
                    "os": ""
                },
                {
                    "name": "(refresh | reload) it",
                    "command": "browser.reload()",
                    "os": ""
                },
                {
                    "name": "(refresh | reload) it hard",
                    "command": "browser.reload_hard()",
                    "os": ""
                },
                {
                    "name": "bookmark show",
                    "command": "browser.bookmarks()",
                    "os": ""
                },
                {
                    "name": "bookmark bar [show]",
                    "command": "browser.bookmarks_bar()",
                    "os": ""
                },
                {
                    "name": "downloads show",
                    "command": "browser.show_downloads()",
                    "os": ""
                },
                {
                    "name": "extensions show",
                    "command": "browser.show_extensions()",
                    "os": ""
                },
                {
                    "name": "history show",
                    "command": "browser.show_history()",
                    "os": ""
                },
                {
                    "name": "cache show",
                    "command": "browser.show_clear_cache()",
                    "os": ""
                },
                {
                    "name": "dev tools [show]",
                    "command": "browser.toggle_dev_tools()",
                    "os": ""
                },
                {
                    "name": "show downloads",
                    "command": "browser.show_downloads()",
                    "os": ""
                },
                {
                    "name": "show extensions",
                    "command": "browser.show_extensions()",
                    "os": ""
                },
                {
                    "name": "show history",
                    "command": "browser.show_history()",
                    "os": ""
                },
                {
                    "name": "show cache",
                    "command": "browser.show_clear_cache()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.generic_debugger.talon",
            "pretty_name": "generic debugger",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "step into",
                    "command": "user.debugger_step_into()",
                    "os": ""
                },
                {
                    "name": "step over",
                    "command": "user.debugger_step_over()",
                    "os": ""
                },
                {
                    "name": "step line",
                    "command": "user.debugger_step_line()",
                    "os": ""
                },
                {
                    "name": "step over line",
                    "command": "user.debugger_step_over_line()",
                    "os": ""
                },
                {
                    "name": "step out",
                    "command": "user.debugger_step_out()",
                    "os": ""
                },
                {
                    "name": "continue",
                    "command": "user.debugger_continue()",
                    "os": ""
                },
                {
                    "name": "debug start",
                    "command": "user.debugger_start()",
                    "os": ""
                },
                {
                    "name": "debug stop",
                    "command": "user.debugger_stop()",
                    "os": ""
                },
                {
                    "name": "debug exit",
                    "command": "user.debugger_exit()",
                    "os": ""
                },
                {
                    "name": "debug detach",
                    "command": "user.debugger_detach()",
                    "os": ""
                },
                {
                    "name": "debug restart",
                    "command": "user.debugger_restart()",
                    "os": ""
                },
                {
                    "name": "show registers",
                    "command": "user.debugger_show_registers()",
                    "os": ""
                },
                {
                    "name": "get register",
                    "command": "user.debugger_get_register()",
                    "os": ""
                },
                {
                    "name": "set register",
                    "command": "user.debugger_set_register()",
                    "os": ""
                },
                {
                    "name": "break now",
                    "command": "user.debugger_break_now()",
                    "os": ""
                },
                {
                    "name": "break here",
                    "command": "user.debugger_break_here()",
                    "os": ""
                },
                {
                    "name": "(list|show) (breaks|break points)",
                    "command": "user.debugger_show_breakpoints()",
                    "os": ""
                },
                {
                    "name": "(set|add) (break|break point)",
                    "command": "user.debugger_add_sw_breakpoint()",
                    "os": ""
                },
                {
                    "name": "(set|add) hardware (break|break point)",
                    "command": "user.debugger_add_hw_breakpoint()",
                    "os": ""
                },
                {
                    "name": "clear all (breaks|break points)",
                    "command": "user.debugger_clear_all_breakpoints()",
                    "os": ""
                },
                {
                    "name": "clear (break|break point)",
                    "command": "user.debugger_clear_breakpoint()",
                    "os": ""
                },
                {
                    "name": "clear (break|break point) <number_small>",
                    "command": "user.debugger_clear_breakpoint_id(number_small)",
                    "os": ""
                },
                {
                    "name": "disable all (breaks|break points)",
                    "command": "user.debugger_disable_all_breakpoints()",
                    "os": ""
                },
                {
                    "name": "disable (break|break point)",
                    "command": "user.debugger_disable_breakpoint()",
                    "os": ""
                },
                {
                    "name": "disable (break|break point) <number_small>",
                    "command": "user.debugger_disable_breakpoint_id(number_small)",
                    "os": ""
                },
                {
                    "name": "enable all (breaks|break points)",
                    "command": "user.debugger_enable_all_breakpoints()",
                    "os": ""
                },
                {
                    "name": "enable (break|break point)",
                    "command": "user.debugger_enable_breakpoint()",
                    "os": ""
                },
                {
                    "name": "enable (break|break point) <number_small>",
                    "command": "user.debugger_enable_breakpoint_id(number_small)\n\n# Navigation\n\n\n# Memory Inspection",
                    "os": ""
                },
                {
                    "name": "(stack|back) trace",
                    "command": "user.debugger_backtrace()",
                    "os": ""
                },
                {
                    "name": "disassemble",
                    "command": "user.debugger_disassemble()",
                    "os": ""
                },
                {
                    "name": "disassemble here",
                    "command": "user.debugger_disassemble_here()",
                    "os": ""
                },
                {
                    "name": "disassemble clipboard",
                    "command": "user.debugger_disassemble_clipboard()",
                    "os": ""
                },
                {
                    "name": "jump to address",
                    "command": "user.debugger_goto_address()",
                    "os": ""
                },
                {
                    "name": "jump to clipboard",
                    "command": "user.debugger_goto_clipboard()",
                    "os": ""
                },
                {
                    "name": "jump to highlighted",
                    "command": "user.debugger_goto_highlighted()",
                    "os": ""
                },
                {
                    "name": "dump string",
                    "command": "user.debugger_dump_ascii_string()",
                    "os": ""
                },
                {
                    "name": "dump unicode [string]",
                    "command": "user.debugger_dump_unicode_string()",
                    "os": ""
                },
                {
                    "name": "dump pointers",
                    "command": "user.debugger_dump_pointers()",
                    "os": ""
                },
                {
                    "name": "list modules",
                    "command": "user.debugger_list_modules()",
                    "os": ""
                },
                {
                    "name": "inspect type",
                    "command": "user.debugger_inspect_type()",
                    "os": ""
                },
                {
                    "name": "clear line",
                    "command": "user.debugger_clear_line()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.generic_snippets.generic_snippets.talon",
            "pretty_name": "generic snippets",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "snip {user.snippets}",
                    "command": "user.snippet_insert(user.snippets)",
                    "os": ""
                },
                {
                    "name": "snip hunt <user.text>",
                    "command": "user.snippet_search(user.text)",
                    "os": ""
                },
                {
                    "name": "snip hunt",
                    "command": "user.snippet_search(\"\")",
                    "os": ""
                },
                {
                    "name": "snip create",
                    "command": "user.snippet_create()",
                    "os": ""
                },
                {
                    "name": "snip show",
                    "command": "user.snippet_toggle()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.generic_terminal.generic_terminal.talon",
            "pretty_name": "generic terminal",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "lisa",
                    "command": "user.terminal_list_directories()",
                    "os": ""
                },
                {
                    "name": "lisa all",
                    "command": "user.terminal_list_all_directories()",
                    "os": ""
                },
                {
                    "name": "katie [<user.text>]",
                    "command": "user.terminal_change_directory(text or \"\")",
                    "os": ""
                },
                {
                    "name": "katie root",
                    "command": "user.terminal_change_directory_root()",
                    "os": ""
                },
                {
                    "name": "clear screen",
                    "command": "user.terminal_clear_screen()",
                    "os": ""
                },
                {
                    "name": "run last",
                    "command": "user.terminal_run_last()",
                    "os": ""
                },
                {
                    "name": "rerun [<user.text>]",
                    "command": "user.terminal_rerun_search(text or \"\")",
                    "os": ""
                },
                {
                    "name": "rerun search",
                    "command": "user.terminal_rerun_search(\"\")",
                    "os": ""
                },
                {
                    "name": "kill all",
                    "command": "user.terminal_kill_all()",
                    "os": ""
                },
                {
                    "name": "copy paste",
                    "command": "edit.copy()\nsleep(50ms)\nedit.paste()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.generic_terminal.generic_unix_shell",
            "pretty_name": "generic unix shell",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.generic_terminal.generic_windows_shell",
            "pretty_name": "generic windows shell",
            "os": "win",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.i3wm.i3wm.talon",
            "pretty_name": "i3wm",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "port <number_small>",
                    "command": "user.system_command(\"i3-msg workspace {number_small}\")",
                    "os": ""
                },
                {
                    "name": "port ten",
                    "command": "user.system_command(\"i3-msg workspace 10\")",
                    "os": ""
                },
                {
                    "name": "(port flip|flipper)",
                    "command": "user.system_command(\"i3-msg workspace back_and_forth\")",
                    "os": ""
                },
                {
                    "name": "port right",
                    "command": "user.system_command(\"i3-msg workspace next\")",
                    "os": ""
                },
                {
                    "name": "port left",
                    "command": "user.system_command(\"i3-msg workspace prev\")",
                    "os": ""
                },
                {
                    "name": "(win|window) left",
                    "command": "user.system_command(\"i3-msg focus left\")",
                    "os": ""
                },
                {
                    "name": "(win|window) right",
                    "command": "user.system_command(\"i3-msg focus right\")",
                    "os": ""
                },
                {
                    "name": "(win|window) up",
                    "command": "user.system_command(\"i3-msg focus up\")",
                    "os": ""
                },
                {
                    "name": "(win|window) down",
                    "command": "user.system_command(\"i3-msg focus down\")",
                    "os": ""
                },
                {
                    "name": "((win|window) kill|murder)",
                    "command": "user.system_command(\"i3-msg kill\")",
                    "os": ""
                },
                {
                    "name": "(win|window) stacking",
                    "command": "user.system_command(\"i3-msg layout stacking\")",
                    "os": ""
                },
                {
                    "name": "(win|window) default",
                    "command": "user.system_command(\"i3-msg layout toggle split\")",
                    "os": ""
                },
                {
                    "name": "(win|window) tabbed",
                    "command": "user.system_command(\"i3-msg layout tabbed\")",
                    "os": ""
                },
                {
                    "name": "reload i three config",
                    "command": "user.system_command(\"i3-msg reload\")",
                    "os": ""
                },
                {
                    "name": "restart i three",
                    "command": "user.system_command(\"i3-msg restart\")",
                    "os": ""
                },
                {
                    "name": "(full screen|scuba)",
                    "command": "user.system_command(\"i3-msg fullscreen\")",
                    "os": ""
                },
                {
                    "name": "toggle floating",
                    "command": "user.system_command(\"i3-msg floating toggle\")",
                    "os": ""
                },
                {
                    "name": "focus floating",
                    "command": "user.system_command(\"i3-msg focus mode_toggle\")",
                    "os": ""
                },
                {
                    "name": "center window",
                    "command": "user.system_command(\"i3-msg move position center\")",
                    "os": ""
                },
                {
                    "name": "resize mode",
                    "command": "user.system_command('i3-msg mode \"resize\"')",
                    "os": ""
                },
                {
                    "name": "focus parent",
                    "command": "user.system_command(\"i3-msg focus parent\")",
                    "os": ""
                },
                {
                    "name": "focus child",
                    "command": "user.system_command(\"i3-msg focus child\")",
                    "os": ""
                },
                {
                    "name": "grow window",
                    "command": "user.system_command('i3-msg mode \"resize\"')\nkey(right:10)\nkey(down:10)\n# escape resize mode\nkey(escape)\n# center window\nsleep(200ms)\nuser.system_command(\"i3-msg move position center\")\n\n\n# resize helpers",
                    "os": ""
                },
                {
                    "name": "shrink window",
                    "command": "user.system_command('i3-msg mode \"resize\"')\nkey(left:10)\nkey(up:10)\n# escape resize mode\nkey(escape)\n# center window\nsleep(200ms)\nuser.system_command(\"i3-msg move position center\")\n",
                    "os": ""
                },
                {
                    "name": "horizontal (shell|terminal)",
                    "command": "user.system_command(\"i3-msg split h\")\nuser.i3wm_shell()\n",
                    "os": ""
                },
                {
                    "name": "vertical (shell|terminal)",
                    "command": "user.system_command(\"i3-msg split v\")\nuser.i3wm_shell()\n\n# XXX - just replace with shuffle eventually?\n# XXX - like also need to match the generic talon commands",
                    "os": ""
                },
                {
                    "name": "(shuffle|move (win|window) [to] port) <number_small>",
                    "command": "user.system_command(\"i3-msg move container to workspace {number_small}\")",
                    "os": ""
                },
                {
                    "name": "(shuffle|move (win|window) [to] port ten)",
                    "command": "user.system_command(\"i3-msg move container to workspace 10\")",
                    "os": ""
                },
                {
                    "name": "(shuffle|move (win|window) [to] last port)",
                    "command": "user.system_command(\"i3-msg move container to workspace back_and_forth\")",
                    "os": ""
                },
                {
                    "name": "(shuffle|move (win|window) left)",
                    "command": "user.system_command(\"i3-msg move left\")",
                    "os": ""
                },
                {
                    "name": "(shuffle|move (win|window) right)",
                    "command": "user.system_command(\"i3-msg move right\")",
                    "os": ""
                },
                {
                    "name": "(shuffle|move (win|window) up)",
                    "command": "user.system_command(\"i3-msg move up\")",
                    "os": ""
                },
                {
                    "name": "(shuffle|move (win|window) down)",
                    "command": "user.system_command(\"i3-msg move down\")",
                    "os": ""
                },
                {
                    "name": "(win|window) horizontal",
                    "command": "user.system_command(\"i3-msg split h\")",
                    "os": ""
                },
                {
                    "name": "(win|window) vertical",
                    "command": "user.system_command(\"i3-msg split v\")",
                    "os": ""
                },
                {
                    "name": "make scratch",
                    "command": "user.system_command(\"i3-msg move scratchpad\")",
                    "os": ""
                },
                {
                    "name": "[(show|hide)] scratch",
                    "command": "user.system_command(\"i3-msg scratchpad show\")",
                    "os": ""
                },
                {
                    "name": "next scratch",
                    "command": "user.system_command(\"i3-msg scratchpad show\")\nuser.system_command(\"i3-msg scratchpad show\")\n\n# these rely on the user settings for the mod key. see i3wm.py Actions class",
                    "os": ""
                },
                {
                    "name": "launch",
                    "command": "user.i3wm_launch()",
                    "os": ""
                },
                {
                    "name": "launch <user.text>",
                    "command": "user.i3wm_launch()\nsleep(100ms)\ninsert(\"{text}\")",
                    "os": ""
                },
                {
                    "name": "lock screen",
                    "command": "user.i3wm_launch()",
                    "os": ""
                },
                {
                    "name": "(launch shell|koopa)",
                    "command": "user.i3wm_shell()",
                    "os": ""
                },
                {
                    "name": "new scratch (shell|window)",
                    "command": "user.i3wm_shell()\nsleep(200ms)\nuser.system_command(\"i3-msg move scratchpad\")\nuser.system_command(\"i3-msg scratchpad show\")",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.jetbrains.jetbrains",
            "pretty_name": "jetbrains",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.jetbrains.jetbrains.talon",
            "pretty_name": "jetbrains",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "complete",
                    "command": "user.idea(\"action CodeCompletion\")",
                    "os": ""
                },
                {
                    "name": "perfect",
                    "command": "user.idea(\"action CodeCompletion,action CodeCompletion\")",
                    "os": ""
                },
                {
                    "name": "smart",
                    "command": "user.idea(\"action SmartTypeCompletion\")",
                    "os": ""
                },
                {
                    "name": "(done | finish)",
                    "command": "user.idea(\"action EditorCompleteStatement\")",
                    "os": ""
                },
                {
                    "name": "grab <number>",
                    "command": "user.idea_grab(number)",
                    "os": ""
                },
                {
                    "name": "(action | please)",
                    "command": "user.idea(\"action GotoAction\")",
                    "os": ""
                },
                {
                    "name": "(action | please) <user.text>",
                    "command": "user.idea(\"action GotoAction\")\ninsert(text)\n# Refactoring",
                    "os": ""
                },
                {
                    "name": "refactor",
                    "command": "user.idea(\"action Refactorings.QuickListPopupAction\")",
                    "os": ""
                },
                {
                    "name": "refactor <user.text>",
                    "command": "user.idea(\"action Refactorings.QuickListPopupAction\")\ninsert(text)",
                    "os": ""
                },
                {
                    "name": "extract variable",
                    "command": "user.idea(\"action IntroduceVariable\")",
                    "os": ""
                },
                {
                    "name": "extract field",
                    "command": "user.idea(\"action IntroduceField\")",
                    "os": ""
                },
                {
                    "name": "extract constant",
                    "command": "user.idea(\"action IntroduceConstant\")",
                    "os": ""
                },
                {
                    "name": "extract parameter",
                    "command": "user.idea(\"action IntroduceParameter\")",
                    "os": ""
                },
                {
                    "name": "extract interface",
                    "command": "user.idea(\"action ExtractInterface\")",
                    "os": ""
                },
                {
                    "name": "extract method",
                    "command": "user.idea(\"action ExtractMethod\")",
                    "os": ""
                },
                {
                    "name": "refactor in line",
                    "command": "user.idea(\"action Inline\")",
                    "os": ""
                },
                {
                    "name": "refactor move",
                    "command": "user.idea(\"action Move\")",
                    "os": ""
                },
                {
                    "name": "refactor rename",
                    "command": "user.idea(\"action RenameElement\")",
                    "os": ""
                },
                {
                    "name": "rename file",
                    "command": "user.idea(\"action RenameFile\")",
                    "os": ""
                },
                {
                    "name": "fix (format | formatting)",
                    "command": "user.idea(\"action ReformatCode\")",
                    "os": ""
                },
                {
                    "name": "fix imports",
                    "command": "user.idea(\"action OptimizeImports\")",
                    "os": ""
                },
                {
                    "name": "(go declaration | follow)",
                    "command": "user.idea(\"action GotoDeclaration\")",
                    "os": ""
                },
                {
                    "name": "go implementation",
                    "command": "user.idea(\"action GotoImplementation\")",
                    "os": ""
                },
                {
                    "name": "go usage",
                    "command": "user.idea(\"action FindUsages\")",
                    "os": ""
                },
                {
                    "name": "go type",
                    "command": "user.idea(\"action GotoTypeDeclaration\")",
                    "os": ""
                },
                {
                    "name": "go test",
                    "command": "user.idea(\"action GotoTest\")",
                    "os": ""
                },
                {
                    "name": "go back",
                    "command": "user.idea(\"action Back\")",
                    "os": ""
                },
                {
                    "name": "go forward",
                    "command": "user.idea(\"action Forward\")",
                    "os": ""
                },
                {
                    "name": "find (everywhere | all)",
                    "command": "user.idea(\"action SearchEverywhere\")",
                    "os": ""
                },
                {
                    "name": "find (everywhere | all) <user.text> [over]",
                    "command": "user.idea(\"action SearchEverywhere\")\nsleep(500ms)\ninsert(text)",
                    "os": ""
                },
                {
                    "name": "(search | find) class",
                    "command": "user.idea(\"action GotoClass\")",
                    "os": ""
                },
                {
                    "name": "(search | find) file",
                    "command": "user.idea(\"action GotoFile\")",
                    "os": ""
                },
                {
                    "name": "(search | find) path",
                    "command": "user.idea(\"action FindInPath\")",
                    "os": ""
                },
                {
                    "name": "(search | find) symbol",
                    "command": "user.idea(\"action GotoSymbol\")",
                    "os": ""
                },
                {
                    "name": "(search | find) symbol <user.text>",
                    "command": "user.idea(\"action GotoSymbol\")\ninsert(text)\nkey(\"enter\")",
                    "os": ""
                },
                {
                    "name": "recent",
                    "command": "user.idea(\"action RecentFiles\")",
                    "os": ""
                },
                {
                    "name": "surround [this] with <user.text> [over]",
                    "command": "idea(\"action SurroundWith\")\nsleep(500ms)\ninsert(text)\n# Making these longer to reduce collisions with real code dictation.",
                    "os": ""
                },
                {
                    "name": "insert generated <user.text> [over]",
                    "command": "user.idea(\"action Generate\")\nsleep(500ms)\ninsert(text)",
                    "os": ""
                },
                {
                    "name": "insert template <user.text> [over]",
                    "command": "idea(\"action InsertLiveTemplate\")\nsleep(500ms)\ninsert(text)",
                    "os": ""
                },
                {
                    "name": "create (template|snippet)",
                    "command": "user.idea(\"action SaveAsTemplate\")",
                    "os": ""
                },
                {
                    "name": "toggle recording",
                    "command": "user.idea(\"action StartStopMacroRecording\")",
                    "os": ""
                },
                {
                    "name": "change (recording | recordings)",
                    "command": "user.idea(\"action EditMacros\")",
                    "os": ""
                },
                {
                    "name": "play recording",
                    "command": "user.idea(\"action PlaybackLastMacro\")",
                    "os": ""
                },
                {
                    "name": "play recording <user.text> [over]",
                    "command": "idea(\"action PlaySavedMacrosAction\")\ninsert(text)\nsleep(500ms)\nKey(\"enter\")\n# Marks",
                    "os": ""
                },
                {
                    "name": "go mark",
                    "command": "user.idea(\"action ShowBookmarks\")",
                    "os": ""
                },
                {
                    "name": "toggle mark",
                    "command": "user.idea(\"action ToggleBookmark\")",
                    "os": ""
                },
                {
                    "name": "go next mark",
                    "command": "user.idea(\"action GotoNextBookmark\")",
                    "os": ""
                },
                {
                    "name": "go last mark",
                    "command": "user.idea(\"action GotoPreviousBookmark\")",
                    "os": ""
                },
                {
                    "name": "toggle mark <number>",
                    "command": "user.idea(\"action ToggleBookmark{number}\")",
                    "os": ""
                },
                {
                    "name": "go mark <number>",
                    "command": "user.idea(\"action GotoBookmark{number}\")",
                    "os": ""
                },
                {
                    "name": "expand deep",
                    "command": "user.idea(\"action ExpandRegionRecursively\")",
                    "os": ""
                },
                {
                    "name": "expand all",
                    "command": "user.idea(\"action ExpandAllRegions\")",
                    "os": ""
                },
                {
                    "name": "collapse deep",
                    "command": "user.idea(\"action CollapseRegionRecursively\")",
                    "os": ""
                },
                {
                    "name": "collapse all",
                    "command": "user.idea(\"action CollapseAllRegions\")",
                    "os": ""
                },
                {
                    "name": "go next (method | function)",
                    "command": "user.idea(\"action MethodDown\")",
                    "os": ""
                },
                {
                    "name": "go last (method | function)",
                    "command": "user.idea(\"action MethodUp\")",
                    "os": ""
                },
                {
                    "name": "clippings",
                    "command": "user.idea(\"action PasteMultiple\")",
                    "os": ""
                },
                {
                    "name": "copy path",
                    "command": "user.idea(\"action CopyPaths\")",
                    "os": ""
                },
                {
                    "name": "copy reference",
                    "command": "user.idea(\"action CopyReference\")",
                    "os": ""
                },
                {
                    "name": "copy pretty",
                    "command": "user.idea(\"action CopyAsRichText\")",
                    "os": ""
                },
                {
                    "name": "create sibling",
                    "command": "user.idea(\"action NewElementSamePlace\")",
                    "os": ""
                },
                {
                    "name": "create sibling <user.text> [over]",
                    "command": "user.idea(\"action NewElementSamePlace\")\nsleep(500ms)\ninsert(text)",
                    "os": ""
                },
                {
                    "name": "create file",
                    "command": "user.idea(\"action NewElement\")",
                    "os": ""
                },
                {
                    "name": "create file <user.text> [over]",
                    "command": "user.idea(\"action NewElement\")\nsleep(500ms)\ninsert(text)\n# Task Management",
                    "os": ""
                },
                {
                    "name": "go task",
                    "command": "user.idea(\"action tasks.goto\")",
                    "os": ""
                },
                {
                    "name": "go browser task",
                    "command": "user.idea(\"action tasks.open.in.browser\")",
                    "os": ""
                },
                {
                    "name": "switch task",
                    "command": "user.idea(\"action tasks.switch\")",
                    "os": ""
                },
                {
                    "name": "clear task",
                    "command": "user.idea(\"action tasks.close\")",
                    "os": ""
                },
                {
                    "name": "configure servers",
                    "command": "user.idea(\"action tasks.configure.servers\")",
                    "os": ""
                },
                {
                    "name": "git pull",
                    "command": "user.idea(\"action Vcs.UpdateProject\")",
                    "os": ""
                },
                {
                    "name": "git commit",
                    "command": "user.idea(\"action CheckinProject\")",
                    "os": ""
                },
                {
                    "name": "git push",
                    "command": "user.idea(\"action CheckinProject\")",
                    "os": ""
                },
                {
                    "name": "git log",
                    "command": "user.idea(\"action Vcs.ShowTabbedFileHistory\")",
                    "os": ""
                },
                {
                    "name": "git browse",
                    "command": "user.idea(\"action Github.Open.In.Browser\")",
                    "os": ""
                },
                {
                    "name": "git (gets | gist)",
                    "command": "user.idea(\"action Github.Create.Gist\")",
                    "os": ""
                },
                {
                    "name": "git (pull request | request)",
                    "command": "user.idea(\"action Github.Create.Pull.Request\")",
                    "os": ""
                },
                {
                    "name": "git (view | show | list) (requests | request)",
                    "command": "user.idea(\"action Github.View.Pull.Request\")",
                    "os": ""
                },
                {
                    "name": "git (annotate | blame)",
                    "command": "user.idea(\"action Annotate\")",
                    "os": ""
                },
                {
                    "name": "git menu",
                    "command": "user.idea(\"action Vcs.QuickListPopupAction\")",
                    "os": ""
                },
                {
                    "name": "toggle project",
                    "command": "user.idea(\"action ActivateProjectToolWindow\")",
                    "os": ""
                },
                {
                    "name": "toggle find",
                    "command": "user.idea(\"action ActivateFindToolWindow\")",
                    "os": ""
                },
                {
                    "name": "toggle run",
                    "command": "user.idea(\"action ActivateRunToolWindow\")",
                    "os": ""
                },
                {
                    "name": "toggle debug",
                    "command": "user.idea(\"action ActivateDebugToolWindow\")",
                    "os": ""
                },
                {
                    "name": "toggle events",
                    "command": "user.idea(\"action ActivateEventLogToolWindow\")",
                    "os": ""
                },
                {
                    "name": "toggle terminal",
                    "command": "user.idea(\"action ActivateTerminalToolWindow\")",
                    "os": ""
                },
                {
                    "name": "toggle git",
                    "command": "user.idea(\"action ActivateVersionControlToolWindow\")",
                    "os": ""
                },
                {
                    "name": "toggle structure",
                    "command": "user.idea(\"action ActivateStructureToolWindow\")",
                    "os": ""
                },
                {
                    "name": "toggle database",
                    "command": "user.idea(\"action ActivateDatabaseToolWindow\")",
                    "os": ""
                },
                {
                    "name": "toggle database changes",
                    "command": "user.idea(\"action ActivateDatabaseChangesToolWindow\")",
                    "os": ""
                },
                {
                    "name": "toggle make",
                    "command": "user.idea(\"action ActivatemakeToolWindow\")",
                    "os": ""
                },
                {
                    "name": "toggle to do",
                    "command": "user.idea(\"action ActivateTODOToolWindow\")",
                    "os": ""
                },
                {
                    "name": "toggle docker",
                    "command": "user.idea(\"action ActivateDockerToolWindow\")",
                    "os": ""
                },
                {
                    "name": "toggle favorites",
                    "command": "user.idea(\"action ActivateFavoritesToolWindow\")",
                    "os": ""
                },
                {
                    "name": "toggle last",
                    "command": "user.idea(\"action JumpToLastWindow\")",
                    "os": ""
                },
                {
                    "name": "toggle pinned",
                    "command": "user.idea(\"action TogglePinnedMode\")",
                    "os": ""
                },
                {
                    "name": "toggle docked",
                    "command": "user.idea(\"action ToggleDockMode\")",
                    "os": ""
                },
                {
                    "name": "toggle floating",
                    "command": "user.idea(\"action ToggleFloatingMode\")",
                    "os": ""
                },
                {
                    "name": "toggle windowed",
                    "command": "user.idea(\"action ToggleWindowedMode\")",
                    "os": ""
                },
                {
                    "name": "toggle split",
                    "command": "user.idea(\"action ToggleSideMode\")",
                    "os": ""
                },
                {
                    "name": "toggle tool buttons",
                    "command": "user.idea(\"action ViewToolButtons\")",
                    "os": ""
                },
                {
                    "name": "toggle toolbar",
                    "command": "user.idea(\"action ViewToolBar\")",
                    "os": ""
                },
                {
                    "name": "toggle status [bar]",
                    "command": "user.idea(\"action ViewStatusBar\")",
                    "os": ""
                },
                {
                    "name": "toggle navigation [bar]",
                    "command": "user.idea(\"action ViewNavigationBar\")",
                    "os": ""
                },
                {
                    "name": "toggle power save",
                    "command": "user.idea(\"action TogglePowerSave\")",
                    "os": ""
                },
                {
                    "name": "toggle whitespace",
                    "command": "user.idea(\"action EditorToggleShowWhitespaces\")",
                    "os": ""
                },
                {
                    "name": "toggle indents",
                    "command": "user.idea(\"action EditorToggleShowIndentLines\")",
                    "os": ""
                },
                {
                    "name": "toggle line numbers",
                    "command": "user.idea(\"action EditorToggleShowLineNumbers\")",
                    "os": ""
                },
                {
                    "name": "toggle (bread crumbs | breadcrumbs)",
                    "command": "user.idea(\"action EditorToggleShowBreadcrumbs\")",
                    "os": ""
                },
                {
                    "name": "toggle gutter icons",
                    "command": "user.idea(\"action EditorToggleShowGutterIcons\")",
                    "os": ""
                },
                {
                    "name": "toggle wrap",
                    "command": "user.idea(\"action EditorToggleUseSoftWraps\")",
                    "os": ""
                },
                {
                    "name": "toggle parameters",
                    "command": "user.idea(\"action ToggleInlineHintsAction\")",
                    "os": ""
                },
                {
                    "name": "toggle fullscreen",
                    "command": "user.idea(\"action ToggleFullScreen\")",
                    "os": ""
                },
                {
                    "name": "toggle distraction [free mode]",
                    "command": "user.idea(\"action ToggleDistractionFreeMode\")",
                    "os": ""
                },
                {
                    "name": "toggle presentation [mode]",
                    "command": "user.idea(\"action TogglePresentationMode\")",
                    "os": ""
                },
                {
                    "name": "toggle comment",
                    "command": "code.toggle_comment()",
                    "os": ""
                },
                {
                    "name": "change scheme",
                    "command": "user.idea(\"action QuickChangeScheme\")",
                    "os": ""
                },
                {
                    "name": "(toggle | pop) (doc | documentation)",
                    "command": "user.idea(\"action QuickJavaDoc\")",
                    "os": ""
                },
                {
                    "name": "(pop deaf | toggle definition)",
                    "command": "user.idea(\"action QuickImplementations\")",
                    "os": ""
                },
                {
                    "name": "pop type",
                    "command": "user.idea(\"action ExpressionTypeInfo\")",
                    "os": ""
                },
                {
                    "name": "pop parameters",
                    "command": "user.idea(\"action ParameterInfo\")",
                    "os": ""
                },
                {
                    "name": "go breakpoints",
                    "command": "user.idea(\"action ViewBreakpoints\")",
                    "os": ""
                },
                {
                    "name": "toggle [line] breakpoint",
                    "command": "user.idea(\"action ToggleLineBreakpoint\")",
                    "os": ""
                },
                {
                    "name": "toggle method breakpoint",
                    "command": "user.idea(\"action ToggleMethodBreakpoint\")",
                    "os": ""
                },
                {
                    "name": "run menu",
                    "command": "user.idea(\"action ChooseRunConfiguration\")",
                    "os": ""
                },
                {
                    "name": "run test",
                    "command": "user.idea(\"action RunClass\")",
                    "os": ""
                },
                {
                    "name": "run test again",
                    "command": "user.idea(\"action Rerun\")",
                    "os": ""
                },
                {
                    "name": "debug test",
                    "command": "user.idea(\"action DebugClass\")",
                    "os": ""
                },
                {
                    "name": "step over",
                    "command": "user.idea(\"action StepOver\")",
                    "os": ""
                },
                {
                    "name": "step into",
                    "command": "user.idea(\"action StepInto\")",
                    "os": ""
                },
                {
                    "name": "step smart",
                    "command": "user.idea(\"action SmartStepInto\")",
                    "os": ""
                },
                {
                    "name": "step to line",
                    "command": "user.idea(\"action RunToCursor\")",
                    "os": ""
                },
                {
                    "name": "continue",
                    "command": "user.idea(\"action Resume\")",
                    "os": ""
                },
                {
                    "name": "(grow | shrink) window right",
                    "command": "user.idea(\"action ResizeToolWindowRight\")",
                    "os": ""
                },
                {
                    "name": "(grow | shrink) window left",
                    "command": "user.idea(\"action ResizeToolWindowLeft\")",
                    "os": ""
                },
                {
                    "name": "(grow | shrink) window up",
                    "command": "user.idea(\"action ResizeToolWindowUp\")",
                    "os": ""
                },
                {
                    "name": "(grow | shrink) window down",
                    "command": "user.idea(\"action ResizeToolWindowDown\")",
                    "os": ""
                },
                {
                    "name": "go next (error | air)",
                    "command": "user.idea(\"action GotoNextError\")",
                    "os": ""
                },
                {
                    "name": "go last (error | air)",
                    "command": "user.idea(\"action GotoPreviousError\")",
                    "os": ""
                },
                {
                    "name": "fix next (error | air)",
                    "command": "user.idea(\"action GotoNextError\")\nuser.idea(\"action ShowIntentionActions\")",
                    "os": ""
                },
                {
                    "name": "fix last (error | air)",
                    "command": "user.idea(\"action GotoPreviousError\")\nuser.idea(\"action ShowIntentionActions\")\n# Special Selects",
                    "os": ""
                },
                {
                    "name": "select less",
                    "command": "user.idea(\"action EditorUnSelectWord\")",
                    "os": ""
                },
                {
                    "name": "select (more|this)",
                    "command": "user.idea(\"action EditorSelectWord\")",
                    "os": ""
                },
                {
                    "name": "expand <number> until <number>",
                    "command": "user.select_range(number_1, number_2)\nuser.idea(\"action ExpandRegion\")",
                    "os": ""
                },
                {
                    "name": "collapse <number> until <number>",
                    "command": "user.select_range(number_1, number_2)\nuser.idea(\"action CollapseRegion\")",
                    "os": ""
                },
                {
                    "name": "paste <number> until <number>",
                    "command": "user.select_range(number_1, number_2)\nuser.idea(\"action EditorPaste\")",
                    "os": ""
                },
                {
                    "name": "refactor <number> until <number>",
                    "command": "user.select_range(number_1, number_2)\nuser.idea(\"action Refactorings.QuickListPopupAction\")",
                    "os": ""
                },
                {
                    "name": "clone <number>",
                    "command": "user.line_clone(number)",
                    "os": ""
                },
                {
                    "name": "clear last <user.text> [over]",
                    "command": "user.idea(\"find prev {text}, action EditorBackSpace\")",
                    "os": ""
                },
                {
                    "name": "clear next <user.text> [over]",
                    "command": "user.idea(\"find next {text}, action EditorBackSpace\")",
                    "os": ""
                },
                {
                    "name": "comment last <user.text> [over]",
                    "command": "user.idea(\"find prev {text}, action CommentByLineComment\")",
                    "os": ""
                },
                {
                    "name": "comment next <user.text> [over]",
                    "command": "user.idea(\"find next {text}, action CommentByLineComment\")",
                    "os": ""
                },
                {
                    "name": "go last <user.text> [over]",
                    "command": "user.idea(\"find prev {text}, action EditorRight\")",
                    "os": ""
                },
                {
                    "name": "go next <user.text> [over]",
                    "command": "user.idea(\"find next {text}, action EditorRight\")",
                    "os": ""
                },
                {
                    "name": "paste last <user.text> [over]",
                    "command": "user.idea(\"find prev {text}, action EditorRight, action EditorPaste\")",
                    "os": ""
                },
                {
                    "name": "paste next <user.text> [over]",
                    "command": "user.idea(\"find next {text}, action EditorRight, action EditorPaste\")",
                    "os": ""
                },
                {
                    "name": "refactor last <user.text> [over]",
                    "command": "user.idea(\"find prev {text}, action Refactorings.QuickListPopupAction\")",
                    "os": ""
                },
                {
                    "name": "refactor next <user.text> [over]",
                    "command": "user.idea(\"find next {text}, action Refactorings.QuickListPopupAction\")",
                    "os": ""
                },
                {
                    "name": "replace last <user.text> [over]",
                    "command": "user.idea(\"find prev {text}, action EditorPaste\")",
                    "os": ""
                },
                {
                    "name": "replace next <user.text> [over]",
                    "command": "user.idea(\"find next {text}, action EditorPaste\")",
                    "os": ""
                },
                {
                    "name": "select last <user.text> [over]",
                    "command": "user.idea(\"find prev {text}\")",
                    "os": ""
                },
                {
                    "name": "select next <user.text> [over]",
                    "command": "user.idea(\"find next {text}\")",
                    "os": ""
                },
                {
                    "name": "select camel left",
                    "command": "user.extend_camel_left()",
                    "os": ""
                },
                {
                    "name": "select camel right",
                    "command": "user.extend_camel_right()",
                    "os": ""
                },
                {
                    "name": "go camel left",
                    "command": "user.camel_left()",
                    "os": ""
                },
                {
                    "name": "go camel right",
                    "command": "user.camel_right()",
                    "os": ""
                },
                {
                    "name": "blacken",
                    "command": "user.idea(\"action BLACKReformatCode\")",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.kubectl.kubectl",
            "pretty_name": "kubectl",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.kubectl.kubectl.talon",
            "pretty_name": "kubectl",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "cube [control]",
                    "command": "\"kubectl \"",
                    "os": ""
                },
                {
                    "name": "cube create",
                    "command": "\"kubectl create \"",
                    "os": ""
                },
                {
                    "name": "cube expose",
                    "command": "\"kubectl expose \"",
                    "os": ""
                },
                {
                    "name": "cube run",
                    "command": "\"kubectl run \"",
                    "os": ""
                },
                {
                    "name": "cube set",
                    "command": "\"kubectl set \"",
                    "os": ""
                },
                {
                    "name": "cube run container",
                    "command": "\"kubectl run-container \"",
                    "os": ""
                },
                {
                    "name": "cube explain",
                    "command": "\"kubectl explain \"",
                    "os": ""
                },
                {
                    "name": "cube get",
                    "command": "\"kubectl get \"",
                    "os": ""
                },
                {
                    "name": "cube edit",
                    "command": "\"kubectl edit \"",
                    "os": ""
                },
                {
                    "name": "cube delete",
                    "command": "\"kubectl delete \"",
                    "os": ""
                },
                {
                    "name": "cube rollout",
                    "command": "\"kubectl rollout \"",
                    "os": ""
                },
                {
                    "name": "cube rolling update",
                    "command": "\"kubectl rolling-update \"",
                    "os": ""
                },
                {
                    "name": "cube scale",
                    "command": "\"kubectl scale \"",
                    "os": ""
                },
                {
                    "name": "cube auto scale",
                    "command": "\"kubectl autoscale \"",
                    "os": ""
                },
                {
                    "name": "cube certificate",
                    "command": "\"kubectl certificate \"",
                    "os": ""
                },
                {
                    "name": "cube top",
                    "command": "\"kubectl top \"",
                    "os": ""
                },
                {
                    "name": "cube drain",
                    "command": "\"kubectl drain \"",
                    "os": ""
                },
                {
                    "name": "cube taint",
                    "command": "\"kubectl taint \"",
                    "os": ""
                },
                {
                    "name": "cube (cord | cordon)",
                    "command": "\"kubectl cordon \"",
                    "os": ""
                },
                {
                    "name": "cube (uncord | uncordon)",
                    "command": "\"kubectl uncordon \"",
                    "os": ""
                },
                {
                    "name": "cube cluster (info | information)",
                    "command": "\"kubectl cluster-info \"",
                    "os": ""
                },
                {
                    "name": "cube describe",
                    "command": "\"kubectl describe \"",
                    "os": ""
                },
                {
                    "name": "cube logs",
                    "command": "\"kubectl logs \"",
                    "os": ""
                },
                {
                    "name": "cube attach",
                    "command": "\"kubectl attach \"",
                    "os": ""
                },
                {
                    "name": "cube exec",
                    "command": "\"kubectl exec \"",
                    "os": ""
                },
                {
                    "name": "cube port forward",
                    "command": "\"kubectl port-forward \"",
                    "os": ""
                },
                {
                    "name": "cube proxy",
                    "command": "\"kubectl proxy \"",
                    "os": ""
                },
                {
                    "name": "cube copy",
                    "command": "\"kubectl cp \"",
                    "os": ""
                },
                {
                    "name": "cube auth",
                    "command": "\"kubectl auth \"",
                    "os": ""
                },
                {
                    "name": "cube diff",
                    "command": "\"kubectl diff \"",
                    "os": ""
                },
                {
                    "name": "cube apply",
                    "command": "\"kubectl apply \"",
                    "os": ""
                },
                {
                    "name": "cube patch",
                    "command": "\"kubectl patch \"",
                    "os": ""
                },
                {
                    "name": "cube replace",
                    "command": "\"kubectl replace \"",
                    "os": ""
                },
                {
                    "name": "cube wait",
                    "command": "\"kubectl wait \"",
                    "os": ""
                },
                {
                    "name": "cube convert",
                    "command": "\"kubectl convert \"",
                    "os": ""
                },
                {
                    "name": "cube customize",
                    "command": "\"kubectl kustomize \"",
                    "os": ""
                },
                {
                    "name": "cube label",
                    "command": "\"kubectl label \"",
                    "os": ""
                },
                {
                    "name": "cube annotate",
                    "command": "\"kubectl annotate \"",
                    "os": ""
                },
                {
                    "name": "cube completion",
                    "command": "\"kubectl completion \"",
                    "os": ""
                },
                {
                    "name": "cube (interface | API)",
                    "command": "\"kubectl api \"",
                    "os": ""
                },
                {
                    "name": "cube interface resources",
                    "command": "\"kubectl api-resources \"",
                    "os": ""
                },
                {
                    "name": "cube interface versions",
                    "command": "\"kubectl api-versions \"",
                    "os": ""
                },
                {
                    "name": "cube config",
                    "command": "\"kubectl config \"",
                    "os": ""
                },
                {
                    "name": "cube help",
                    "command": "\"kubectl help \"",
                    "os": ""
                },
                {
                    "name": "cube plugin",
                    "command": "\"kubectl plugin \"",
                    "os": ""
                },
                {
                    "name": "cube version",
                    "command": "\"kubectl version \"",
                    "os": ""
                },
                {
                    "name": "cube {user.kubectl_action} [{user.kubectl_object}]",
                    "command": "insert(\"kubectl {kubectl_action} \")\ninsert(kubectl_object or \"\")\n",
                    "os": ""
                },
                {
                    "name": "cube detach",
                    "command": "key(\"ctrl-p\")\nkey(\"ctrl-q\")",
                    "os": ""
                },
                {
                    "name": "cube shell",
                    "command": "insert(\"kubectl exec -it  -- /bin/bash\")\nkey(\"left:13\")",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.platforms.linux.dunst.talon",
            "pretty_name": "dunst",
            "os": "linux",
            "raw_commands": [],
            "commands": [
                {
                    "name": "show notifications",
                    "command": "key(ctrl-`)",
                    "os": "linux"
                },
                {
                    "name": "dismiss [notifications]",
                    "command": "user.system_command('dunstctl close')",
                    "os": "linux"
                },
                {
                    "name": "dismiss all [notifications]",
                    "command": "user.system_command('dunstctl close-all')",
                    "os": "linux"
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.platforms.linux.gnome-terminal.gnome-terminal",
            "pretty_name": "gnome-terminal",
            "os": "linux",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.platforms.linux.gnome-terminal.gnome-terminal.talon",
            "pretty_name": "gnome-terminal",
            "os": "linux",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.platforms.linux.guake",
            "pretty_name": "guake",
            "os": "linux",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.platforms.linux.kde-konsole.kde-konsole",
            "pretty_name": "kde-konsole",
            "os": "linux",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.platforms.linux.kde-konsole.kde-konsole.talon",
            "pretty_name": "kde-konsole",
            "os": "linux",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.platforms.linux.keepassx.talon",
            "pretty_name": "keepassx",
            "os": "linux",
            "raw_commands": [],
            "commands": [
                {
                    "name": "open database",
                    "command": "key(ctrl-o)",
                    "os": "linux"
                },
                {
                    "name": "save database",
                    "command": "key(ctrl-s)",
                    "os": "linux"
                },
                {
                    "name": "close database",
                    "command": "key(ctrl-w)",
                    "os": "linux"
                },
                {
                    "name": "lock database",
                    "command": "key(ctrl-l)",
                    "os": "linux"
                },
                {
                    "name": "quit",
                    "command": "key(ctrl-q)",
                    "os": "linux"
                },
                {
                    "name": "[add] new entry",
                    "command": "key(ctrl-n)",
                    "os": "linux"
                },
                {
                    "name": "clone entry",
                    "command": "key(ctrl-k)",
                    "os": "linux"
                },
                {
                    "name": "(view|edit) entry",
                    "command": "key(ctrl-e)",
                    "os": "linux"
                },
                {
                    "name": "delete entry",
                    "command": "key(ctrl-d)",
                    "os": "linux"
                },
                {
                    "name": "copy user [name]",
                    "command": "key(ctrl-b)",
                    "os": "linux"
                },
                {
                    "name": "copy password",
                    "command": "key(ctrl-c)",
                    "os": "linux"
                },
                {
                    "name": "open (earl|url|link)",
                    "command": "key(ctrl-u)",
                    "os": "linux"
                },
                {
                    "name": "copy (earl|url|link)",
                    "command": "key(ctrl-alt-u)",
                    "os": "linux"
                },
                {
                    "name": "find",
                    "command": "key(ctrl-f)",
                    "os": "linux"
                },
                {
                    "name": "find <user.text>",
                    "command": "key(ctrl-f)\ninsert(\"{text}\")",
                    "os": "linux"
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.platforms.linux.nautilus.nautilus",
            "pretty_name": "nautilus",
            "os": "linux",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.platforms.linux.nautilus.nautilus.talon",
            "pretty_name": "nautilus",
            "os": "linux",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.platforms.linux.signal.talon",
            "pretty_name": "signal",
            "os": "linux",
            "raw_commands": [],
            "commands": [
                {
                    "name": "show shortcuts",
                    "command": "key(\"ctrl-/\")",
                    "os": "linux"
                },
                {
                    "name": "(next|nav|navigate) [by] (sec|section)",
                    "command": "key(\"ctrl-t\")",
                    "os": "linux"
                },
                {
                    "name": "(prev|previous) (chat|conversation)",
                    "command": "key(\"alt-down\")",
                    "os": "linux"
                },
                {
                    "name": "next (chat|conversation)",
                    "command": "key(\"alt-up\")",
                    "os": "linux"
                },
                {
                    "name": "(prev|previous) unread",
                    "command": "key(\"alt-shift-down\")",
                    "os": "linux"
                },
                {
                    "name": "next unread",
                    "command": "key(\"alt-shift-up\")",
                    "os": "linux"
                },
                {
                    "name": "[open] (pref|preferences)",
                    "command": "key(\"ctrl-,\")",
                    "os": "linux"
                },
                {
                    "name": "open conversation menu",
                    "command": "key(\"ctrl-shift-l\")",
                    "os": "linux"
                },
                {
                    "name": "search",
                    "command": "key(\"ctrl-f\")",
                    "os": "linux"
                },
                {
                    "name": "search chat",
                    "command": "key(\"ctrl-shift-f\")",
                    "os": "linux"
                },
                {
                    "name": "focus (chat|composer)",
                    "command": "key(\"ctrl-shift-t\")",
                    "os": "linux"
                },
                {
                    "name": "open media",
                    "command": "key(\"ctrl-shift-m\")",
                    "os": "linux"
                },
                {
                    "name": "open emoji",
                    "command": "key(\"ctrl-shift-j\")",
                    "os": "linux"
                },
                {
                    "name": "open sticker",
                    "command": "key(\"ctrl-shift-s\")",
                    "os": "linux"
                },
                {
                    "name": "record [voice] message",
                    "command": "key(\"ctrl-shift-v\")",
                    "os": "linux"
                },
                {
                    "name": "archive chat",
                    "command": "key(\"ctrl-shift-a\")",
                    "os": "linux"
                },
                {
                    "name": "unarchive chat",
                    "command": "key(\"ctrl-shift-u\")",
                    "os": "linux"
                },
                {
                    "name": "(first|top) message",
                    "command": "key(\"ctrl-up\")",
                    "os": "linux"
                },
                {
                    "name": "(last|bottom) message",
                    "command": "key(\"ctrl-down\")",
                    "os": "linux"
                },
                {
                    "name": "close chat",
                    "command": "key(\"ctrl-shift-c\")",
                    "os": "linux"
                },
                {
                    "name": "send it",
                    "command": "key(\"enter\")",
                    "os": "linux"
                },
                {
                    "name": "message details",
                    "command": "key(\"ctrl-d\")",
                    "os": "linux"
                },
                {
                    "name": "reply [message]",
                    "command": "key(\"ctrl-shift-r\")",
                    "os": "linux"
                },
                {
                    "name": "react [message]",
                    "command": "key(\"ctrl-shift-e\")",
                    "os": "linux"
                },
                {
                    "name": "save attachment",
                    "command": "key(\"ctrl-s\")",
                    "os": "linux"
                },
                {
                    "name": "delete [message]",
                    "command": "key(\"ctrl-shift-d\")",
                    "os": "linux"
                },
                {
                    "name": "send message",
                    "command": "key(\"ctrl-enter\")",
                    "os": "linux"
                },
                {
                    "name": "expand chat",
                    "command": "key(\"ctrl-shift-x\")",
                    "os": "linux"
                },
                {
                    "name": "attach [file]",
                    "command": "key(\"ctrl-u\")",
                    "os": "linux"
                },
                {
                    "name": "remove [link] preview",
                    "command": "key(\"ctrl-p\")",
                    "os": "linux"
                },
                {
                    "name": "remove [link] attachment",
                    "command": "key(\"ctrl-shift-p\")",
                    "os": "linux"
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.platforms.linux.taskwarrior.talon",
            "pretty_name": "taskwarrior",
            "os": "linux",
            "raw_commands": [],
            "commands": [
                {
                    "name": "task version",
                    "command": "\"task --version\\n\"",
                    "os": "linux"
                },
                {
                    "name": "task commands",
                    "command": "\"task commands\\n\"",
                    "os": "linux"
                },
                {
                    "name": "task help",
                    "command": "\"task help\\n\"",
                    "os": "linux"
                },
                {
                    "name": "task list",
                    "command": "\"task list\\n\"",
                    "os": "linux"
                },
                {
                    "name": "task list orphans",
                    "command": "\"task project: list\\n\"",
                    "os": "linux"
                },
                {
                    "name": "task list untagged",
                    "command": "\"task tags.none: list\\n\"",
                    "os": "linux"
                },
                {
                    "name": "task list <user.text>",
                    "command": "\"task list {text}\\n\"",
                    "os": "linux"
                },
                {
                    "name": "task list project",
                    "command": "\"task list project: \"",
                    "os": "linux"
                },
                {
                    "name": "task list project <user.text>",
                    "command": "\"task list project:{text}\\n\"",
                    "os": "linux"
                },
                {
                    "name": "task add",
                    "command": "\"task add \"",
                    "os": "linux"
                },
                {
                    "name": "task add <user.text>",
                    "command": "\"task add {text}\\n\"",
                    "os": "linux"
                },
                {
                    "name": "task undo",
                    "command": "\"task undo\\n\"",
                    "os": "linux"
                },
                {
                    "name": "(tasks|task next)",
                    "command": "\"task next\\n\"",
                    "os": "linux"
                },
                {
                    "name": "task <number> edit",
                    "command": "\"task {number} edit\"",
                    "os": "linux"
                },
                {
                    "name": "task <number> done",
                    "command": "\"task {number} done\"",
                    "os": "linux"
                },
                {
                    "name": "task <number> delete",
                    "command": "\"task {number} delete\"",
                    "os": "linux"
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.platforms.linux.termite.talon",
            "pretty_name": "termite",
            "os": "linux",
            "raw_commands": [],
            "commands": [
                {
                    "name": "shell yank",
                    "command": "key(\"y\")",
                    "os": "linux"
                },
                {
                    "name": "shell select",
                    "command": "key(\"ctrl-shift-space\")",
                    "os": "linux"
                },
                {
                    "name": "shell insert",
                    "command": "key(\"escape\")",
                    "os": "linux"
                },
                {
                    "name": "visual line",
                    "command": "key(\"v\")",
                    "os": "linux"
                },
                {
                    "name": "visual line mode",
                    "command": "key(\"V\")",
                    "os": "linux"
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.platforms.linux.tmux.talon",
            "pretty_name": "tmux",
            "os": "linux",
            "raw_commands": [],
            "commands": [
                {
                    "name": "mux",
                    "command": "\"tmux \"",
                    "os": "linux"
                },
                {
                    "name": "mux new session",
                    "command": "insert('tmux new ')",
                    "os": "linux"
                },
                {
                    "name": "mux sessions",
                    "command": "key(ctrl-b)\nkey(s)",
                    "os": "linux"
                },
                {
                    "name": "mux name session",
                    "command": "key(ctrl-b)\nkey($)",
                    "os": "linux"
                },
                {
                    "name": "mux kill session",
                    "command": "insert('tmux kill-session -t ')\n#window management",
                    "os": "linux"
                },
                {
                    "name": "mux new window",
                    "command": "key(ctrl-b)\nkey(c)",
                    "os": "linux"
                },
                {
                    "name": "mux window <number>",
                    "command": "key(ctrl-b )\nkey('{number}')",
                    "os": "linux"
                },
                {
                    "name": "mux previous window",
                    "command": "key(ctrl-b)\nkey(p)",
                    "os": "linux"
                },
                {
                    "name": "mux next window",
                    "command": "key(ctrl-b)\nkey(n)",
                    "os": "linux"
                },
                {
                    "name": "mux rename window",
                    "command": "key(ctrl-b)\nkey(,)",
                    "os": "linux"
                },
                {
                    "name": "mux close window",
                    "command": "key(ctrl-b)\nkey(&)\n#pane management",
                    "os": "linux"
                },
                {
                    "name": "mux split horizontal",
                    "command": "key(ctrl-b)\nkey(%)",
                    "os": "linux"
                },
                {
                    "name": "mux split vertical",
                    "command": "key(ctrl-b)\nkey(\")",
                    "os": "linux"
                },
                {
                    "name": "mux next pane",
                    "command": "key(ctrl-b)\nkey(o)",
                    "os": "linux"
                },
                {
                    "name": "mux move <user.arrow_key>",
                    "command": "key(ctrl-b)\nkey(arrow_key)",
                    "os": "linux"
                },
                {
                    "name": "mux close pane",
                    "command": "key(ctrl-b)\nkey(x)\n#Say a number right after this command, to switch to pane",
                    "os": "linux"
                },
                {
                    "name": "mux pane numbers",
                    "command": "key(ctrl-b)\nkey(q)",
                    "os": "linux"
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.platforms.mac.finder.finder",
            "pretty_name": "finder",
            "os": "mac",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.platforms.mac.finder.finder.talon",
            "pretty_name": "finder",
            "os": "mac",
            "raw_commands": [],
            "commands": [
                {
                    "name": "preferences",
                    "command": "key(cmd-,)",
                    "os": "mac"
                },
                {
                    "name": "options",
                    "command": "key(cmd-j)",
                    "os": "mac"
                },
                {
                    "name": "search",
                    "command": "key(cmd-alt-f)",
                    "os": "mac"
                },
                {
                    "name": "sort by none",
                    "command": "key(ctrl-alt-cmd-0)",
                    "os": "mac"
                },
                {
                    "name": "sort by name",
                    "command": "key(ctrl-alt-cmd-1)",
                    "os": "mac"
                },
                {
                    "name": "sort by kind",
                    "command": "key(ctrl-alt-cmd-2)",
                    "os": "mac"
                },
                {
                    "name": "sort by date opened",
                    "command": "key(ctrl-alt-cmd-3)",
                    "os": "mac"
                },
                {
                    "name": "sort by date added",
                    "command": "key(ctrl-alt-cmd-4)",
                    "os": "mac"
                },
                {
                    "name": "sort by date modified",
                    "command": "key(ctrl-alt-cmd-5)",
                    "os": "mac"
                },
                {
                    "name": "sort by size",
                    "command": "key(ctrl-alt-cmd-6)",
                    "os": "mac"
                },
                {
                    "name": "icon view",
                    "command": "key(cmd-1)",
                    "os": "mac"
                },
                {
                    "name": "column view",
                    "command": "key(cmd-3)",
                    "os": "mac"
                },
                {
                    "name": "list view",
                    "command": "key(cmd-2)",
                    "os": "mac"
                },
                {
                    "name": "gallery view",
                    "command": "key(cmd-4)",
                    "os": "mac"
                },
                {
                    "name": "copy path",
                    "command": "key(alt-cmd-c)",
                    "os": "mac"
                },
                {
                    "name": "trash it",
                    "command": "key(cmd-backspace)",
                    "os": "mac"
                },
                {
                    "name": "hide [finder]",
                    "command": "key(cmd-h)",
                    "os": "mac"
                },
                {
                    "name": "hide others",
                    "command": "app.window_hide_others()",
                    "os": "mac"
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.platforms.mac.iterm.iterm",
            "pretty_name": "iterm",
            "os": "mac",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.platforms.mac.iterm.iterm.talon",
            "pretty_name": "iterm",
            "os": "mac",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.platforms.mac.rstudio.talon",
            "pretty_name": "rstudio",
            "os": "mac",
            "raw_commands": [],
            "commands": [
                {
                    "name": "run that",
                    "command": "key(\"cmd-enter\")",
                    "os": "mac"
                },
                {
                    "name": "run document",
                    "command": "key(\"cmd-alt-r\")",
                    "os": "mac"
                },
                {
                    "name": "run from top",
                    "command": "key(\"cmd-alt-b\")",
                    "os": "mac"
                },
                {
                    "name": "run to end",
                    "command": "key(\"cmd-alt-e\")",
                    "os": "mac"
                },
                {
                    "name": "run (function|funk)",
                    "command": "key(\"cmd-alt-f\")",
                    "os": "mac"
                },
                {
                    "name": "run section",
                    "command": "key(\"cmd-alt-t\")",
                    "os": "mac"
                },
                {
                    "name": "run previous chunks",
                    "command": "key(\"cmd-alt-p\")",
                    "os": "mac"
                },
                {
                    "name": "run chunk",
                    "command": "key(\"cmd-alt-c\")",
                    "os": "mac"
                },
                {
                    "name": "run next chunk",
                    "command": "key(\"cmd-alt-n\")",
                    "os": "mac"
                },
                {
                    "name": "run all",
                    "command": "key(\"cmd-shift-s\")",
                    "os": "mac"
                },
                {
                    "name": "run knitter",
                    "command": "key(\"cmd-shift-k\")",
                    "os": "mac"
                },
                {
                    "name": "run profiler",
                    "command": "key(\"cmd-shift-alt-p\")",
                    "os": "mac"
                },
                {
                    "name": "jump back",
                    "command": "key(\"cmd-f9\")",
                    "os": "mac"
                },
                {
                    "name": "jump forward",
                    "command": "key(\"cmd-f10\")",
                    "os": "mac"
                },
                {
                    "name": "close all tabs",
                    "command": "key(\"cmd-shift-w\")",
                    "os": "mac"
                },
                {
                    "name": "indent lines",
                    "command": "key(\"cmd-i\")",
                    "os": "mac"
                },
                {
                    "name": "toggle comment",
                    "command": "key(\"cmd-shift-c\")",
                    "os": "mac"
                },
                {
                    "name": "reformat comment",
                    "command": "key(\"cmd-shift-/\")",
                    "os": "mac"
                },
                {
                    "name": "reformat R code",
                    "command": "key(\"cmd-shift-a\")",
                    "os": "mac"
                },
                {
                    "name": "line up",
                    "command": "key(\"alt-up\")",
                    "os": "mac"
                },
                {
                    "name": "line down",
                    "command": "key(\"alt-down\")",
                    "os": "mac"
                },
                {
                    "name": "duplicate line up",
                    "command": "key(\"cmd-alt-up\")",
                    "os": "mac"
                },
                {
                    "name": "duplicate line [down]",
                    "command": "key(\"cmd-alt-down\")",
                    "os": "mac"
                },
                {
                    "name": "select to paren",
                    "command": "key(\"ctrl-shift-e\")",
                    "os": "mac"
                },
                {
                    "name": "select to matching paren",
                    "command": "key(\"ctrl-shift-alt-e\")",
                    "os": "mac"
                },
                {
                    "name": "jump to matching",
                    "command": "key(\"ctrl-p\")",
                    "os": "mac"
                },
                {
                    "name": "expand selection",
                    "command": "key(\"shift-alt-cmd-up\")",
                    "os": "mac"
                },
                {
                    "name": "reduce selection",
                    "command": "key(\"shift-alt-cmd-down\")",
                    "os": "mac"
                },
                {
                    "name": "add cursor up",
                    "command": "key(\"ctrl-alt-up\")",
                    "os": "mac"
                },
                {
                    "name": "add cursor down",
                    "command": "key(\"ctrl-alt-down\")",
                    "os": "mac"
                },
                {
                    "name": "move active cursor up",
                    "command": "key(\"ctrl-alt-shift-up\")",
                    "os": "mac"
                },
                {
                    "name": "move active cursor down",
                    "command": "key(\"ctrl-alt-shift-down\")",
                    "os": "mac"
                },
                {
                    "name": "delete line",
                    "command": "key(\"cmd-d\")",
                    "os": "mac"
                },
                {
                    "name": "delete word left",
                    "command": "key(\"alt-backspace\")",
                    "os": "mac"
                },
                {
                    "name": "delete word right",
                    "command": "key(\"alt-delete\")",
                    "os": "mac"
                },
                {
                    "name": "assign that",
                    "command": "key(\"alt--\")",
                    "os": "mac"
                },
                {
                    "name": "pipe that",
                    "command": "key(\"cmd-shift-m\")",
                    "os": "mac"
                },
                {
                    "name": "insert knitter chunk",
                    "command": "key(\"cmd-alt-i\")",
                    "os": "mac"
                },
                {
                    "name": "fold that",
                    "command": "key(\"cmd-alt-l\")",
                    "os": "mac"
                },
                {
                    "name": "unfold that",
                    "command": "key(\"cmd-shift-alt-l\")",
                    "os": "mac"
                },
                {
                    "name": "fold all",
                    "command": "key(\"cmd-alt-o\")",
                    "os": "mac"
                },
                {
                    "name": "unfold all",
                    "command": "key(\"cmd-shift-alt-o\")",
                    "os": "mac"
                },
                {
                    "name": "find and replace",
                    "command": "key(\"cmd-f\")",
                    "os": "mac"
                },
                {
                    "name": "find next",
                    "command": "key(\"cmd-g\")",
                    "os": "mac"
                },
                {
                    "name": "find previous",
                    "command": "key(\"cmd-shift-g\")",
                    "os": "mac"
                },
                {
                    "name": "find with selection",
                    "command": "key(\"cmd-e\")",
                    "os": "mac"
                },
                {
                    "name": "find in files",
                    "command": "key(\"cmd-shift-f\")",
                    "os": "mac"
                },
                {
                    "name": "run replace",
                    "command": "key(\"cmd-shift-j\")",
                    "os": "mac"
                },
                {
                    "name": "run spell check",
                    "command": "key(\"f7\")",
                    "os": "mac"
                },
                {
                    "name": "go to source",
                    "command": "key(\"ctrl-1\")",
                    "os": "mac"
                },
                {
                    "name": "go to console",
                    "command": "key(\"ctrl-2\")",
                    "os": "mac"
                },
                {
                    "name": "go to help",
                    "command": "key(\"ctrl-3\")",
                    "os": "mac"
                },
                {
                    "name": "go to history",
                    "command": "key(\"ctrl-4\")",
                    "os": "mac"
                },
                {
                    "name": "go to files",
                    "command": "key(\"ctrl-5\")",
                    "os": "mac"
                },
                {
                    "name": "go to (plots|plot)",
                    "command": "key(\"ctrl-6\")",
                    "os": "mac"
                },
                {
                    "name": "go to packages",
                    "command": "key(\"ctrl-7\")",
                    "os": "mac"
                },
                {
                    "name": "go to environment",
                    "command": "key(\"ctrl-8\")",
                    "os": "mac"
                },
                {
                    "name": "go to git",
                    "command": "key(\"ctrl-9\")",
                    "os": "mac"
                },
                {
                    "name": "go to build",
                    "command": "key(\"ctrl-0\")",
                    "os": "mac"
                },
                {
                    "name": "go to terminal",
                    "command": "key(\"alt-shift-t\")",
                    "os": "mac"
                },
                {
                    "name": "go to omni",
                    "command": "key(\"ctrl-.\")",
                    "os": "mac"
                },
                {
                    "name": "go to line",
                    "command": "key(\"cmd-shift-alt-g\")",
                    "os": "mac"
                },
                {
                    "name": "go to section",
                    "command": "key(\"cmd-shift-alt-j\")",
                    "os": "mac"
                },
                {
                    "name": "go to tab",
                    "command": "key(\"ctrl-shift-.\")",
                    "os": "mac"
                },
                {
                    "name": "go to previous tab",
                    "command": "key(\"ctrl-f11\")",
                    "os": "mac"
                },
                {
                    "name": "go to next tab",
                    "command": "key(\"ctrl-f12\")",
                    "os": "mac"
                },
                {
                    "name": "go to first tab",
                    "command": "key(\"ctrl-shift-f11\")",
                    "os": "mac"
                },
                {
                    "name": "go to last tab",
                    "command": "key(\"ctrl-shift-f12\")",
                    "os": "mac"
                },
                {
                    "name": "zoom source",
                    "command": "key(\"ctrl-shift-1\")",
                    "os": "mac"
                },
                {
                    "name": "(zoom|show) all",
                    "command": "key(\"ctrl-shift-0\")",
                    "os": "mac"
                },
                {
                    "name": "help that",
                    "command": "key(\"f1\")",
                    "os": "mac"
                },
                {
                    "name": "define that",
                    "command": "key(\"f2\")",
                    "os": "mac"
                },
                {
                    "name": "previous plot",
                    "command": "key(\"cmd-alt-f11\")",
                    "os": "mac"
                },
                {
                    "name": "next plot",
                    "command": "key(\"cmd-alt-f12\")",
                    "os": "mac"
                },
                {
                    "name": "restart R session",
                    "command": "key(\"cmd-shift-f10\")",
                    "os": "mac"
                },
                {
                    "name": "dev tools build",
                    "command": "key(\"cmd-shift-b\")",
                    "os": "mac"
                },
                {
                    "name": "dev tools load all",
                    "command": "key(\"cmd-shift-l\")",
                    "os": "mac"
                },
                {
                    "name": "dev tools test",
                    "command": "key(\"cmd-shift-t\")",
                    "os": "mac"
                },
                {
                    "name": "dev tools check",
                    "command": "key(\"cmd-shift-e\")",
                    "os": "mac"
                },
                {
                    "name": "dev tools document",
                    "command": "key(\"cmd-shift-d\")",
                    "os": "mac"
                },
                {
                    "name": "toggle breakpoint",
                    "command": "key(\"shift-f9\")",
                    "os": "mac"
                },
                {
                    "name": "debug next",
                    "command": "key(\"f10\")",
                    "os": "mac"
                },
                {
                    "name": "debug step into (function|funk)",
                    "command": "key(\"shift-f4\")",
                    "os": "mac"
                },
                {
                    "name": "debug finish (function|funk)",
                    "command": "key(\"shift-f6\")",
                    "os": "mac"
                },
                {
                    "name": "debug continue",
                    "command": "key(\"shift-f5\")",
                    "os": "mac"
                },
                {
                    "name": "debug stop",
                    "command": "key(\"shift-f8\")",
                    "os": "mac"
                },
                {
                    "name": "run git diff",
                    "command": "key(\"ctrl-alt-d\")",
                    "os": "mac"
                },
                {
                    "name": "run git commit",
                    "command": "key(\"ctrl-alt-m\")",
                    "os": "mac"
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.platforms.mac.safari.safari",
            "pretty_name": "safari",
            "os": "mac",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.platforms.mac.terminal.apple_terminal",
            "pretty_name": "apple terminal",
            "os": "mac",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.platforms.mac.terminal.apple_terminal.talon",
            "pretty_name": "apple terminal",
            "os": "mac",
            "raw_commands": [],
            "commands": [
                {
                    "name": "suspend",
                    "command": "key(ctrl-z)",
                    "os": "mac"
                },
                {
                    "name": "resume",
                    "command": "insert(\"fg\")\nkey(enter)",
                    "os": "mac"
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.platforms.win.command_processor.command_processor",
            "pretty_name": "command processor",
            "os": "win",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.platforms.win.command_processor.command_processor_actions",
            "pretty_name": "command processor actions",
            "os": "win",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.platforms.win.explorer.explorer",
            "pretty_name": "explorer",
            "os": "win",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.platforms.win.explorer.explorer.talon",
            "pretty_name": "explorer",
            "os": "win",
            "raw_commands": [],
            "commands": [
                {
                    "name": "go <user.letter>",
                    "command": "user.file_manager_open_volume(\"{letter}:\")",
                    "os": "win"
                },
                {
                    "name": "go app data",
                    "command": "user.file_manager_open_directory(\"%AppData%\")",
                    "os": "win"
                },
                {
                    "name": "go program files",
                    "command": "user.file_manager_open_directory(\"%programfiles%\")",
                    "os": "win"
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.platforms.win.mintty.mintty",
            "pretty_name": "mintty",
            "os": "win",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.platforms.win.notepad++.notepad++",
            "pretty_name": "notepad++",
            "os": "win",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.platforms.win.outlook.outlook.talon",
            "pretty_name": "outlook",
            "os": "win",
            "raw_commands": [],
            "commands": [
                {
                    "name": "archive",
                    "command": "key(alt h o 1)",
                    "os": "win"
                },
                {
                    "name": "new e-mail",
                    "command": "key(ctrl-n)",
                    "os": "win"
                },
                {
                    "name": "calendar",
                    "command": "key(ctrl-2)",
                    "os": "win"
                },
                {
                    "name": "inbox",
                    "command": "key(ctrl-1)",
                    "os": "win"
                },
                {
                    "name": "Reply",
                    "command": "key(ctrl-r)",
                    "os": "win"
                },
                {
                    "name": "Reply all",
                    "command": "key(ctrl-shift-r)",
                    "os": "win"
                },
                {
                    "name": "Forward",
                    "command": "key(ctrl-f)",
                    "os": "win"
                },
                {
                    "name": "accept",
                    "command": "key(shift-f10 c c enter)",
                    "os": "win"
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.platforms.win.powershell.power_shell",
            "pretty_name": "power shell",
            "os": "win",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.platforms.win.powershell.power_shell.talon",
            "pretty_name": "power shell",
            "os": "win",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.platforms.win.windows_terminal.windows_terminal",
            "pretty_name": "windows terminal",
            "os": "win",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.platforms.win.windows_terminal.windows_terminal.talon",
            "pretty_name": "windows terminal",
            "os": "win",
            "raw_commands": [],
            "commands": [
                {
                    "name": "settings open",
                    "command": "key(ctrl-,)",
                    "os": "win"
                },
                {
                    "name": "focus left",
                    "command": "key(ctrl-alt-shift-left)",
                    "os": "win"
                },
                {
                    "name": "focus right",
                    "command": "key(ctrl-alt-shift-right)",
                    "os": "win"
                },
                {
                    "name": "focus up",
                    "command": "key(ctrl-alt-shift-up)",
                    "os": "win"
                },
                {
                    "name": "focus down",
                    "command": "key(ctrl-alt-shift-down)",
                    "os": "win"
                },
                {
                    "name": "split right",
                    "command": "key(alt-shift-=)",
                    "os": "win"
                },
                {
                    "name": "split down",
                    "command": "key(alt-shift--)",
                    "os": "win"
                },
                {
                    "name": "term menu",
                    "command": "key(ctrl-shift-f1)",
                    "os": "win"
                },
                {
                    "name": "run last",
                    "command": "key(up enter)",
                    "os": "win"
                },
                {
                    "name": "kill all",
                    "command": "key(ctrl-c)\ninsert(\"y\")\nkey(enter)\n\n",
                    "os": "win"
                },
                {
                    "name": "find it",
                    "command": "edit.find()\n",
                    "os": "win"
                },
                {
                    "name": "find it <phrase>",
                    "command": "# handle consecutive finds by first escaping out of any previous one\nkey(escape)\n# make it so\nedit.find(\"{phrase}\\n\")\n",
                    "os": "win"
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.platforms.win.wsl.ubuntu.talon",
            "pretty_name": "ubuntu",
            "os": "win",
            "raw_commands": [],
            "commands": [
                {
                    "name": "go <user.letter>",
                    "command": "user.file_manager_open_volume(\"/mnt/{letter}\")",
                    "os": "win"
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.platforms.win.wsl.wsl",
            "pretty_name": "wsl",
            "os": "win",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.platforms.win.wsl.wsl.talon",
            "pretty_name": "wsl",
            "os": "win",
            "raw_commands": [],
            "commands": [
                {
                    "name": "(wsl|weasel) reset path detection",
                    "command": "user.wsl_reset_path_detection()",
                    "os": "win"
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.slack.mac",
            "pretty_name": "slack",
            "os": "mac",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.slack.slack",
            "pretty_name": "slack",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.slack.slack_mac.talon",
            "pretty_name": "slack mac",
            "os": "mac",
            "raw_commands": [],
            "commands": [
                {
                    "name": "workspace <number>",
                    "command": "key(\"cmd-{number}\")",
                    "os": "mac"
                },
                {
                    "name": "(slack | lack) [channel] info",
                    "command": "key(cmd-shift-i)",
                    "os": "mac"
                },
                {
                    "name": "(move | next) focus",
                    "command": "key(ctrl-`)",
                    "os": "mac"
                },
                {
                    "name": "[next] (section | zone)",
                    "command": "key(f6)",
                    "os": "mac"
                },
                {
                    "name": "(previous | last) (section | zone)",
                    "command": "key(shift-f6)",
                    "os": "mac"
                },
                {
                    "name": "(slack | lack) [direct] messages",
                    "command": "key(cmd-shift-k)",
                    "os": "mac"
                },
                {
                    "name": "(slack | lack) threads",
                    "command": "key(cmd-shift-t)",
                    "os": "mac"
                },
                {
                    "name": "(slack | lack) (history [next] | back | backward)",
                    "command": "key(cmd-[)",
                    "os": "mac"
                },
                {
                    "name": "(slack | lack) forward",
                    "command": "key(cmd-])",
                    "os": "mac"
                },
                {
                    "name": "[next] (element | bit)",
                    "command": "key(tab)",
                    "os": "mac"
                },
                {
                    "name": "(previous | last) (element | bit)",
                    "command": "key(shift-tab)",
                    "os": "mac"
                },
                {
                    "name": "(slack | lack) (my stuff | activity)",
                    "command": "key(cmd-shift-m)",
                    "os": "mac"
                },
                {
                    "name": "(slack | lack) directory",
                    "command": "key(cmd-shift-e)",
                    "os": "mac"
                },
                {
                    "name": "(slack | lack) (starred [items] | stars)",
                    "command": "key(cmd-shift-s)",
                    "os": "mac"
                },
                {
                    "name": "(slack | lack) unread [messages]",
                    "command": "key(cmd-shift-a)",
                    "os": "mac"
                },
                {
                    "name": "(go | undo | toggle) full",
                    "command": "key(ctrl-cmd-f)",
                    "os": "mac"
                },
                {
                    "name": "grab left",
                    "command": "key(shift-up)",
                    "os": "mac"
                },
                {
                    "name": "grab right",
                    "command": "key(shift-down)",
                    "os": "mac"
                },
                {
                    "name": "add line",
                    "command": "key(shift-enter)",
                    "os": "mac"
                },
                {
                    "name": "(slack | lack) (slap | slaw | slapper)",
                    "command": "key(cmd-right shift-enter)",
                    "os": "mac"
                },
                {
                    "name": "(slack | lack) (react | reaction)",
                    "command": "key(cmd-shift-\\\\)",
                    "os": "mac"
                },
                {
                    "name": "(insert command | commandify)",
                    "command": "key(cmd-shift-c)",
                    "os": "mac"
                },
                {
                    "name": "insert code",
                    "command": "insert(\"``````\")\nkey(left left left)\nkey(shift-enter)\nkey(shift-enter)\nkey(up)",
                    "os": "mac"
                },
                {
                    "name": "(slack | lack) (bull | bullet | bulleted) [list]",
                    "command": "key(cmd-shift-8)",
                    "os": "mac"
                },
                {
                    "name": "(slack | lack) (number | numbered) [list]",
                    "command": "key(cmd-shift-7)",
                    "os": "mac"
                },
                {
                    "name": "(slack | lack) (quotes | quotation)",
                    "command": "key(cmd-shift->)",
                    "os": "mac"
                },
                {
                    "name": "bold",
                    "command": "key(cmd-b)",
                    "os": "mac"
                },
                {
                    "name": "(italic | italicize)",
                    "command": "key(cmd-i)",
                    "os": "mac"
                },
                {
                    "name": "(strike | strikethrough)",
                    "command": "key(cmd-shift-x)",
                    "os": "mac"
                },
                {
                    "name": "(clear | scrap | scratch)",
                    "command": "key(cmd-a backspace)",
                    "os": "mac"
                },
                {
                    "name": "(slack | lack) snippet",
                    "command": "key(cmd-shift-enter)",
                    "os": "mac"
                },
                {
                    "name": "([toggle] mute | unmute)",
                    "command": "key(m)",
                    "os": "mac"
                },
                {
                    "name": "(slack | lack) ([toggle] video)",
                    "command": "key(v)",
                    "os": "mac"
                },
                {
                    "name": "(slack | lack) invite",
                    "command": "key(a)",
                    "os": "mac"
                },
                {
                    "name": "(slack | lack) shortcuts",
                    "command": "key(cmd-/)",
                    "os": "mac"
                },
                {
                    "name": "emote <user.text>",
                    "command": "\"{text}\"",
                    "os": "mac"
                },
                {
                    "name": "toggle left sidebar",
                    "command": "key(cmd-shift-d)",
                    "os": "mac"
                },
                {
                    "name": "toggle right sidebar",
                    "command": "key(cmd-.)",
                    "os": "mac"
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.slack.slack_win.talon",
            "pretty_name": "slack win",
            "os": "win",
            "raw_commands": [],
            "commands": [
                {
                    "name": "workspace <number>",
                    "command": "key(\"ctrl-{number}\")",
                    "os": "win"
                },
                {
                    "name": "(slack | lack) [channel] info",
                    "command": "key(ctrl-shift-i)",
                    "os": "win"
                },
                {
                    "name": "(move | next) focus",
                    "command": "key(ctrl-`)",
                    "os": "win"
                },
                {
                    "name": "[next] (section | zone)",
                    "command": "key(f6)",
                    "os": "win"
                },
                {
                    "name": "(previous | last) (section | zone)",
                    "command": "key(shift-f6)",
                    "os": "win"
                },
                {
                    "name": "(slack | lack) [direct] messages",
                    "command": "key(ctrl-shift-k)",
                    "os": "win"
                },
                {
                    "name": "(slack | lack) threads",
                    "command": "key(ctrl-shift-t)",
                    "os": "win"
                },
                {
                    "name": "(slack | lack) (history [next] | back | backward)",
                    "command": "key(alt-left)",
                    "os": "win"
                },
                {
                    "name": "(slack | lack) forward",
                    "command": "key(alt-right)",
                    "os": "win"
                },
                {
                    "name": "[next] (element | bit)",
                    "command": "key(tab)",
                    "os": "win"
                },
                {
                    "name": "(previous | last) (element | bit)",
                    "command": "key(shift-tab)",
                    "os": "win"
                },
                {
                    "name": "(slack | lack) (my stuff | activity)",
                    "command": "key(ctrl-shift-m)",
                    "os": "win"
                },
                {
                    "name": "(slack | lack) directory",
                    "command": "key(ctrl-shift-e)",
                    "os": "win"
                },
                {
                    "name": "(slack | lack) (starred [items] | stars)",
                    "command": "key(ctrl-shift-s)",
                    "os": "win"
                },
                {
                    "name": "(slack | lack) unread [messages]",
                    "command": "key(ctrl-shift-a)",
                    "os": "win"
                },
                {
                    "name": "grab left",
                    "command": "key(shift-up)",
                    "os": "win"
                },
                {
                    "name": "grab right",
                    "command": "key(shift-down)",
                    "os": "win"
                },
                {
                    "name": "add line",
                    "command": "key(shift-enter)",
                    "os": "win"
                },
                {
                    "name": "(slack | lack) (react | reaction)",
                    "command": "key(ctrl-shift-\\\\)",
                    "os": "win"
                },
                {
                    "name": "(insert command | commandify)",
                    "command": "key(ctrl-shift-c)",
                    "os": "win"
                },
                {
                    "name": "insert code",
                    "command": "insert(\"``````\")\nkey(left left left)\nkey(shift-enter)\nkey(shift-enter)\nkey(up)",
                    "os": "win"
                },
                {
                    "name": "(slack | lack) (bull | bullet | bulleted) [list]",
                    "command": "key(ctrl-shift-8)",
                    "os": "win"
                },
                {
                    "name": "(slack | lack) (number | numbered) [list]",
                    "command": "key(ctrl-shift-7)",
                    "os": "win"
                },
                {
                    "name": "(slack | lack) (quotes | quotation)",
                    "command": "key(ctrl-shift-9)",
                    "os": "win"
                },
                {
                    "name": "bold",
                    "command": "key(ctrl-b)",
                    "os": "win"
                },
                {
                    "name": "(italic | italicize)",
                    "command": "key(ctrl-i)",
                    "os": "win"
                },
                {
                    "name": "(strike | strikethrough)",
                    "command": "key(ctrl-shift-x)",
                    "os": "win"
                },
                {
                    "name": "(clear | scrap | scratch)",
                    "command": "key(ctrl-a backspace)",
                    "os": "win"
                },
                {
                    "name": "(slack | lack) snippet",
                    "command": "key(ctrl-shift-enter)",
                    "os": "win"
                },
                {
                    "name": "([toggle] mute | unmute)",
                    "command": "key(m)",
                    "os": "win"
                },
                {
                    "name": "(slack | lack) ([toggle] video)",
                    "command": "key(v)",
                    "os": "win"
                },
                {
                    "name": "(slack | lack) invite",
                    "command": "key(a)",
                    "os": "win"
                },
                {
                    "name": "(slack | lack) shortcuts",
                    "command": "key(ctrl-/)",
                    "os": "win"
                },
                {
                    "name": "emote <user.text>",
                    "command": "\"{text}\"",
                    "os": "win"
                },
                {
                    "name": "toggle left sidebar",
                    "command": "key(ctrl-shift-d)",
                    "os": "win"
                },
                {
                    "name": "toggle right sidebar",
                    "command": "key(ctrl-.)",
                    "os": "win"
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.slack.win",
            "pretty_name": "slack",
            "os": "win",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.talon_repl.talon",
            "pretty_name": "talon repl",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "test last",
                    "command": "phrase = user.history_get(1)\ncommand = \"sim('{phrase}')\"\ninsert(command)\nkey(enter)",
                    "os": ""
                },
                {
                    "name": "test <phrase>",
                    "command": "insert(\"sim('{phrase}')\")\nkey(enter)",
                    "os": ""
                },
                {
                    "name": "test numb <number_small>",
                    "command": "phrase = user.history_get(number_small)\ncommand = \"sim('{phrase}')\"\n#to do: shouldn't this work?\n#user.paste(\"sim({phrase})\")\ninsert(command)\nkey(enter)\n# requires user.talon_populate_lists tag. do not use with dragon",
                    "os": ""
                },
                {
                    "name": "debug action {user.talon_actions}",
                    "command": "insert(\"actions.find('{user.talon_actions}')\")\nkey(enter)\n# requires user.talon_populate_lists tag. do not use with dragon",
                    "os": ""
                },
                {
                    "name": "debug list {user.talon_lists}",
                    "command": "insert(\"actions.user.talon_pretty_print(registry.lists['{talon_lists}'])\")\nkey(enter)",
                    "os": ""
                },
                {
                    "name": "debug tags",
                    "command": "insert(\"actions.user.talon_pretty_print(registry.tags)\")\nkey(enter)",
                    "os": ""
                },
                {
                    "name": "debug settings",
                    "command": "insert(\"actions.user.talon_pretty_print(registry.settings)\")\nkey(enter)",
                    "os": ""
                },
                {
                    "name": "debug modes",
                    "command": "insert(\"actions.user.talon_pretty_print(scope.get('mode'))\")\nkey(enter)\n# requires user.talon_populate_lists tag. do not use with dragon",
                    "os": ""
                },
                {
                    "name": "debug scope {user.talon_scopes}",
                    "command": "insert(\"actions.user.talon_pretty_print(scope.get('{talon_scopes}'))\")\nkey(enter)",
                    "os": ""
                },
                {
                    "name": "debug running apps",
                    "command": "insert(\"actions.user.talon_pretty_print(ui.apps(background=False))\")\nkey(enter)",
                    "os": ""
                },
                {
                    "name": "debug all windows",
                    "command": "insert(\"actions.user.talon_pretty_print(ui.windows())\")\nkey(enter)",
                    "os": ""
                },
                {
                    "name": "debug {user.running} windows",
                    "command": "insert(\"actions.user.talon_debug_app_windows('{running}')\")\nkey(enter)",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.teams.linux",
            "pretty_name": "teams",
            "os": "linux",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.teams.teams.talon",
            "pretty_name": "teams",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "show shortcuts",
                    "command": "key(ctrl-.)",
                    "os": ""
                },
                {
                    "name": "[go] [to] search",
                    "command": "key(ctrl-e)",
                    "os": ""
                },
                {
                    "name": "show commands",
                    "command": "key(ctrl-/)",
                    "os": ""
                },
                {
                    "name": "open filter",
                    "command": "key(ctrl-shift-f)",
                    "os": ""
                },
                {
                    "name": "go to",
                    "command": "key(ctrl-g)",
                    "os": ""
                },
                {
                    "name": "open (apps|applications)",
                    "command": "key(ctrl-`)",
                    "os": ""
                },
                {
                    "name": "[start] new chat",
                    "command": "key(ctrl-n)",
                    "os": ""
                },
                {
                    "name": "open settings",
                    "command": "key(ctrl-,)",
                    "os": ""
                },
                {
                    "name": "open help",
                    "command": "key(f1)",
                    "os": ""
                },
                {
                    "name": "close",
                    "command": "key(escape)",
                    "os": ""
                },
                {
                    "name": "open activity",
                    "command": "key(ctrl-1)",
                    "os": ""
                },
                {
                    "name": "open chat",
                    "command": "key(ctrl-2)",
                    "os": ""
                },
                {
                    "name": "open teams",
                    "command": "key(ctrl-3)",
                    "os": ""
                },
                {
                    "name": "open calendar",
                    "command": "key(ctrl-4)",
                    "os": ""
                },
                {
                    "name": "open planner",
                    "command": "key(ctrl-5)",
                    "os": ""
                },
                {
                    "name": "open calls",
                    "command": "key(ctrl-6)",
                    "os": ""
                },
                {
                    "name": "open files",
                    "command": "key(ctrl-7)",
                    "os": ""
                },
                {
                    "name": "[go] [to] (prev|previous) [list] item",
                    "command": "key(alt-up)",
                    "os": ""
                },
                {
                    "name": "[go] [to] next [list] item",
                    "command": "key(alt-down)",
                    "os": ""
                },
                {
                    "name": "move [selected] team up",
                    "command": "key(ctrl-shift-up)",
                    "os": ""
                },
                {
                    "name": "move [selected] team down",
                    "command": "key(ctrl-shift-down)",
                    "os": ""
                },
                {
                    "name": "[go] [to] (prev|previous) section",
                    "command": "key(ctrl-shift-f6)",
                    "os": ""
                },
                {
                    "name": "[go] [to] next section",
                    "command": "key(ctrl-f6)",
                    "os": ""
                },
                {
                    "name": "[go] [to] compose [box]",
                    "command": "key(c)",
                    "os": ""
                },
                {
                    "name": "[expand] compose [box]",
                    "command": "key(ctrl-shift-x)",
                    "os": ""
                },
                {
                    "name": "send",
                    "command": "key(ctrl-enter)",
                    "os": ""
                },
                {
                    "name": "attach file",
                    "command": "key(ctrl-o)",
                    "os": ""
                },
                {
                    "name": "[start] new line",
                    "command": "key(shift-enter)",
                    "os": ""
                },
                {
                    "name": "reply [to] [thread]",
                    "command": "key(r)",
                    "os": ""
                },
                {
                    "name": "accept video call",
                    "command": "key(ctrl-shift-a)",
                    "os": ""
                },
                {
                    "name": "accept audio call",
                    "command": "key(ctrl-shift-s)",
                    "os": ""
                },
                {
                    "name": "decline call",
                    "command": "key(ctrl-shift-d)",
                    "os": ""
                },
                {
                    "name": "start audio call",
                    "command": "key(ctrl-shift-c)",
                    "os": ""
                },
                {
                    "name": "start video call",
                    "command": "key(ctrl-shift-u)",
                    "os": ""
                },
                {
                    "name": "toggle mute",
                    "command": "key(ctrl-shift-m)",
                    "os": ""
                },
                {
                    "name": "starch screen share session",
                    "command": "key(ctrl-shift-e)",
                    "os": ""
                },
                {
                    "name": "toggle video",
                    "command": "key(ctrl-shift-o)",
                    "os": ""
                },
                {
                    "name": "[go] [to] sharing toolbar",
                    "command": "key(ctrl-shift-space)",
                    "os": ""
                },
                {
                    "name": "decline screen share",
                    "command": "key(ctrl-shift-d)",
                    "os": ""
                },
                {
                    "name": "accept screen share",
                    "command": "key(ctrl-shift-a)",
                    "os": ""
                },
                {
                    "name": "schedule [a] meeting",
                    "command": "key(alt-shift-n)",
                    "os": ""
                },
                {
                    "name": "go to current time",
                    "command": "key(alt-.)",
                    "os": ""
                },
                {
                    "name": "go to (prev|previous) (day|week)",
                    "command": "key(ctrl-alt-left)",
                    "os": ""
                },
                {
                    "name": "go to next (day|week)",
                    "command": "key(ctrl-alt-right)",
                    "os": ""
                },
                {
                    "name": "view day",
                    "command": "key(ctrl-alt-1)",
                    "os": ""
                },
                {
                    "name": "view work week",
                    "command": "key(ctrl-alt-2)",
                    "os": ""
                },
                {
                    "name": "view week",
                    "command": "key(ctrl-alt-3)",
                    "os": ""
                },
                {
                    "name": "(safe|send) meeting request",
                    "command": "key(ctrl-s)",
                    "os": ""
                },
                {
                    "name": "join [from] meeting [details]",
                    "command": "key(alt-shift-j)",
                    "os": ""
                },
                {
                    "name": "go to suggested time",
                    "command": "key(alt-shift-s)",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.teams.teams_mac.talon",
            "pretty_name": "teams mac",
            "os": "mac",
            "raw_commands": [],
            "commands": [
                {
                    "name": "open history",
                    "command": "key(super-shift-h)",
                    "os": "mac"
                },
                {
                    "name": "view shortcuts",
                    "command": "key(super-.)",
                    "os": "mac"
                },
                {
                    "name": "show shortcuts",
                    "command": "key(super-.)",
                    "os": "mac"
                },
                {
                    "name": "[go] [to] search",
                    "command": "key(super-e)",
                    "os": "mac"
                },
                {
                    "name": "show commands",
                    "command": "key(super-/)",
                    "os": "mac"
                },
                {
                    "name": "open filter",
                    "command": "key(super-shift-f)",
                    "os": "mac"
                },
                {
                    "name": "go to",
                    "command": "key(super-g)",
                    "os": "mac"
                },
                {
                    "name": "open (apps|applications)",
                    "command": "key(ctrl-`)",
                    "os": "mac"
                },
                {
                    "name": "[start] new chat",
                    "command": "key(super-n)",
                    "os": "mac"
                },
                {
                    "name": "open settings",
                    "command": "key(super-,)",
                    "os": "mac"
                },
                {
                    "name": "open help",
                    "command": "key(f1)",
                    "os": "mac"
                },
                {
                    "name": "close",
                    "command": "key(escape)",
                    "os": "mac"
                },
                {
                    "name": "reset",
                    "command": "key(escape)\nkey(escape)\nkey(escape)\nkey(escape)",
                    "os": "mac"
                },
                {
                    "name": "zoom reset",
                    "command": "key(super-0)\n\n# navigations",
                    "os": "mac"
                },
                {
                    "name": "open (act|activity)",
                    "command": "key(super-1)",
                    "os": "mac"
                },
                {
                    "name": "open chat",
                    "command": "key(super-2)",
                    "os": "mac"
                },
                {
                    "name": "open teams",
                    "command": "key(super-3)",
                    "os": "mac"
                },
                {
                    "name": "open calendar",
                    "command": "key(super-4)",
                    "os": "mac"
                },
                {
                    "name": "open calls",
                    "command": "key(super-5)",
                    "os": "mac"
                },
                {
                    "name": "open files",
                    "command": "key(super-6)",
                    "os": "mac"
                },
                {
                    "name": "[go] [to] (prev|previous) [list] item",
                    "command": "key(alt-up)",
                    "os": "mac"
                },
                {
                    "name": "[go] [to] next [list] item",
                    "command": "key(alt-down)",
                    "os": "mac"
                },
                {
                    "name": "move [selected] team up",
                    "command": "key(super-shift-up)",
                    "os": "mac"
                },
                {
                    "name": "move [selected] team down",
                    "command": "key(super-shift-down)",
                    "os": "mac"
                },
                {
                    "name": "[go] [to] (prev|previous) section",
                    "command": "key(super-shift-f6)",
                    "os": "mac"
                },
                {
                    "name": "[go] [to] next section",
                    "command": "key(super-f6)",
                    "os": "mac"
                },
                {
                    "name": "[go] [to] compose [box]",
                    "command": "key(shift-alt-c)",
                    "os": "mac"
                },
                {
                    "name": "[expand] compose [box]",
                    "command": "key(super-shift-x)",
                    "os": "mac"
                },
                {
                    "name": "send message",
                    "command": "key(super-enter)",
                    "os": "mac"
                },
                {
                    "name": "attach file",
                    "command": "key(shift-alt-o)",
                    "os": "mac"
                },
                {
                    "name": "attach local file",
                    "command": "key(shift-alt-o)\nsleep(100ms)\nkey(down)\nkey(space)",
                    "os": "mac"
                },
                {
                    "name": "[start] new line",
                    "command": "key(shift-enter)",
                    "os": "mac"
                },
                {
                    "name": "reply [to] [thread]",
                    "command": "key(shift-alt-r)",
                    "os": "mac"
                },
                {
                    "name": "accept video call",
                    "command": "key(super-shift-a)",
                    "os": "mac"
                },
                {
                    "name": "accept audio call",
                    "command": "key(super-shift-s)",
                    "os": "mac"
                },
                {
                    "name": "decline call",
                    "command": "key(super-shift-d)",
                    "os": "mac"
                },
                {
                    "name": "start audio call",
                    "command": "key(super-shift-c)",
                    "os": "mac"
                },
                {
                    "name": "start video call",
                    "command": "key(super-shift-u)",
                    "os": "mac"
                },
                {
                    "name": "toggle mute",
                    "command": "key(super-shift-m)",
                    "os": "mac"
                },
                {
                    "name": "starch screen share session",
                    "command": "key(super-shift-e)",
                    "os": "mac"
                },
                {
                    "name": "toggle video",
                    "command": "key(super-shift-o)",
                    "os": "mac"
                },
                {
                    "name": "[go] [to] sharing toolbar",
                    "command": "key(super-shift-space)",
                    "os": "mac"
                },
                {
                    "name": "decline screen share",
                    "command": "key(super-shift-d)",
                    "os": "mac"
                },
                {
                    "name": "accept screen share",
                    "command": "key(super-shift-a)",
                    "os": "mac"
                },
                {
                    "name": "schedule [a] meeting",
                    "command": "key(alt-shift-n)",
                    "os": "mac"
                },
                {
                    "name": "go to current time",
                    "command": "key(alt-.)",
                    "os": "mac"
                },
                {
                    "name": "go to (prev|previous) (day|week)",
                    "command": "key(super-alt-left)",
                    "os": "mac"
                },
                {
                    "name": "go to next (day|week)",
                    "command": "key(super-alt-right)",
                    "os": "mac"
                },
                {
                    "name": "view day",
                    "command": "key(super-alt-1)",
                    "os": "mac"
                },
                {
                    "name": "view work week",
                    "command": "key(super-alt-2)",
                    "os": "mac"
                },
                {
                    "name": "view week",
                    "command": "key(super-alt-3)",
                    "os": "mac"
                },
                {
                    "name": "(save|send) meeting request",
                    "command": "key(super-s)",
                    "os": "mac"
                },
                {
                    "name": "join [from] meeting [details]",
                    "command": "key(alt-shift-j)",
                    "os": "mac"
                },
                {
                    "name": "go to suggested time",
                    "command": "key(alt-shift-s)",
                    "os": "mac"
                },
                {
                    "name": "(raise|lower) hand",
                    "command": "key(super-shift-k)",
                    "os": "mac"
                },
                {
                    "name": "leave team meeting",
                    "command": "key(super-shift-h)",
                    "os": "mac"
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.visualstudio.visual_studio",
            "pretty_name": "visual studio",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.visualstudio.visual_studio.1",
            "pretty_name": "1",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.visualstudio.visual_studio.talon",
            "pretty_name": "visual studio",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "panel solution",
                    "command": "key(ctrl-alt-l)",
                    "os": ""
                },
                {
                    "name": "panel properties",
                    "command": "key(f4)",
                    "os": ""
                },
                {
                    "name": "panel output",
                    "command": "key(ctrl-alt-o)",
                    "os": ""
                },
                {
                    "name": "panel class",
                    "command": "key(ctrl-shift-c)",
                    "os": ""
                },
                {
                    "name": "panel errors",
                    "command": "key(ctrl-\\ ctrl-e)",
                    "os": ""
                },
                {
                    "name": "panel design",
                    "command": "key(shift-f7)",
                    "os": ""
                },
                {
                    "name": "panel marks",
                    "command": "key(ctrl-k ctrl-w)",
                    "os": ""
                },
                {
                    "name": "panel breakpoints",
                    "command": "key(ctrl-alt-b)",
                    "os": ""
                },
                {
                    "name": "show settings",
                    "command": "key(alt-t o)",
                    "os": ""
                },
                {
                    "name": "fullscreen switch",
                    "command": "key(shift-alt-enter)",
                    "os": ""
                },
                {
                    "name": "wrap switch",
                    "command": "key(ctrl-e ctrl-w)",
                    "os": ""
                },
                {
                    "name": "file hunt [<user.text>]",
                    "command": "key(ctrl-shift-t)\ninsert(text or \"\")",
                    "os": ""
                },
                {
                    "name": "file create",
                    "command": "key(ctrl-n)",
                    "os": ""
                },
                {
                    "name": "file rename",
                    "command": "key(ctrl-[ s f2)",
                    "os": ""
                },
                {
                    "name": "file reveal",
                    "command": "key(ctrl-[ s)",
                    "os": ""
                },
                {
                    "name": "hint show",
                    "command": "key(ctrl-shift-space)",
                    "os": ""
                },
                {
                    "name": "definition show",
                    "command": "key(f12)",
                    "os": ""
                },
                {
                    "name": "definition peek",
                    "command": "key(alt-f12)",
                    "os": ""
                },
                {
                    "name": "references find",
                    "command": "key(shift-f12)",
                    "os": ""
                },
                {
                    "name": "format that",
                    "command": "key(ctrl-k ctrl-d)",
                    "os": ""
                },
                {
                    "name": "format selection",
                    "command": "key(ctrl-k ctrl-f)",
                    "os": ""
                },
                {
                    "name": "imports fix",
                    "command": "key(ctrl-r ctrl-g)",
                    "os": ""
                },
                {
                    "name": "refactor field",
                    "command": "key(ctrl-r ctrl-e)",
                    "os": ""
                },
                {
                    "name": "refactor interface",
                    "command": "key(ctrl-r ctrl-i)",
                    "os": ""
                },
                {
                    "name": "refactor method",
                    "command": "key(ctrl-r ctrl-m)",
                    "os": ""
                },
                {
                    "name": "refactor reorder parameters",
                    "command": "key(ctrl-r ctrl-o)",
                    "os": ""
                },
                {
                    "name": "refactor remove parameters",
                    "command": "key(ctrl-r ctrl-v)",
                    "os": ""
                },
                {
                    "name": "refactor that",
                    "command": "key(ctrl-r ctrl-r)",
                    "os": ""
                },
                {
                    "name": "(go declaration | follow)",
                    "command": "key(ctrl-f12)",
                    "os": ""
                },
                {
                    "name": "go back",
                    "command": "key(ctrl--)",
                    "os": ""
                },
                {
                    "name": "go forward",
                    "command": "key(ctrl-shift--)",
                    "os": ""
                },
                {
                    "name": "go implementation",
                    "command": "key(f12)",
                    "os": ""
                },
                {
                    "name": "go recent [<user.text>]",
                    "command": "key(ctrl-1 ctrl-r)\nsleep(100ms)\ninsert(text or \"\")",
                    "os": ""
                },
                {
                    "name": "go type [<user.text>]",
                    "command": "key(ctrl-1 ctrl-t)\nsleep(100ms)\ninsert(text or \"\")",
                    "os": ""
                },
                {
                    "name": "go member [<user.text>]",
                    "command": "key(alt-\\)\nsleep(100ms)\ninsert(text or \"\")",
                    "os": ""
                },
                {
                    "name": "go usage",
                    "command": "key(shift-f12)",
                    "os": ""
                },
                {
                    "name": "go marks",
                    "command": "key(ctrl-k ctrl-w)",
                    "os": ""
                },
                {
                    "name": "toggle mark",
                    "command": "key(ctrl-k ctrl-k)",
                    "os": ""
                },
                {
                    "name": "go next mark",
                    "command": "key(ctrl-k ctrl-n)",
                    "os": ""
                },
                {
                    "name": "go last mark",
                    "command": "key(ctrl-k ctrl-p)",
                    "os": ""
                },
                {
                    "name": "fold toggle",
                    "command": "key(ctrl-m ctrl-m)",
                    "os": ""
                },
                {
                    "name": "fold toggle all",
                    "command": "key(ctrl-m ctrl-l)",
                    "os": ""
                },
                {
                    "name": "fold definitions",
                    "command": "key(ctrl-m ctrl-o)",
                    "os": ""
                },
                {
                    "name": "break point",
                    "command": "key(f9)",
                    "os": ""
                },
                {
                    "name": "step over",
                    "command": "key(f10)",
                    "os": ""
                },
                {
                    "name": "debug step into",
                    "command": "key(f11)",
                    "os": ""
                },
                {
                    "name": "debug step out [of]",
                    "command": "key(f10)",
                    "os": ""
                },
                {
                    "name": "debug start",
                    "command": "key(f5)",
                    "os": ""
                },
                {
                    "name": "debug stopper",
                    "command": "key(shift-f5)",
                    "os": ""
                },
                {
                    "name": "debug continue",
                    "command": "key(f5)",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.visualstudio.win",
            "pretty_name": "visualstudio",
            "os": "win",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.vscode.command_client.command_client",
            "pretty_name": "command client",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.vscode.command_client.command_client.1",
            "pretty_name": "1",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.vscode.command_client.command_client.2",
            "pretty_name": "2",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.vscode.command_client.command_client.3",
            "pretty_name": "3",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.vscode.snippets.csharp_snippets",
            "pretty_name": "csharp snippets",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.vscode.snippets.python_snippets",
            "pretty_name": "python snippets",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.vscode.vscode",
            "pretty_name": "vscode",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.vscode.vscode.1",
            "pretty_name": "1",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.vscode.vscode.talon",
            "pretty_name": "vscode",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "window reload",
                    "command": "user.vscode(\"workbench.action.reloadWindow\")",
                    "os": ""
                },
                {
                    "name": "window close",
                    "command": "user.vscode(\"workbench.action.closeWindow\")",
                    "os": ""
                },
                {
                    "name": "please [<user.text>]",
                    "command": "user.vscode(\"workbench.action.showCommands\")\ninsert(user.text or \"\")\n\n# Sidebar",
                    "os": ""
                },
                {
                    "name": "bar explore",
                    "command": "user.vscode(\"workbench.view.explorer\")",
                    "os": ""
                },
                {
                    "name": "bar extensions",
                    "command": "user.vscode(\"workbench.view.extensions\")",
                    "os": ""
                },
                {
                    "name": "bar outline",
                    "command": "user.vscode(\"outline.focus\")",
                    "os": ""
                },
                {
                    "name": "bar run",
                    "command": "user.vscode(\"workbench.view.debug\")",
                    "os": ""
                },
                {
                    "name": "bar search",
                    "command": "user.vscode(\"workbench.view.search\")",
                    "os": ""
                },
                {
                    "name": "bar source",
                    "command": "user.vscode(\"workbench.view.scm\")",
                    "os": ""
                },
                {
                    "name": "bar switch",
                    "command": "user.vscode(\"workbench.action.toggleSidebarVisibility\")",
                    "os": ""
                },
                {
                    "name": "symbol hunt [<user.text>]",
                    "command": "user.vscode(\"workbench.action.gotoSymbol\")\nsleep(50ms)\ninsert(text or \"\")\n\n# Panels",
                    "os": ""
                },
                {
                    "name": "panel control",
                    "command": "user.vscode(\"workbench.panel.repl.view.focus\")",
                    "os": ""
                },
                {
                    "name": "panel output",
                    "command": "user.vscode(\"workbench.panel.output.focus\")",
                    "os": ""
                },
                {
                    "name": "panel problems",
                    "command": "user.vscode(\"workbench.panel.markers.view.focus\")",
                    "os": ""
                },
                {
                    "name": "panel switch",
                    "command": "user.vscode(\"workbench.action.togglePanel\")",
                    "os": ""
                },
                {
                    "name": "panel terminal",
                    "command": "user.vscode(\"workbench.action.terminal.focus\")",
                    "os": ""
                },
                {
                    "name": "focus editor",
                    "command": "user.vscode(\"workbench.action.focusActiveEditorGroup\")",
                    "os": ""
                },
                {
                    "name": "show settings",
                    "command": "user.vscode(\"workbench.action.openGlobalSettings\")",
                    "os": ""
                },
                {
                    "name": "show shortcuts",
                    "command": "user.vscode(\"workbench.action.openGlobalKeybindings\")",
                    "os": ""
                },
                {
                    "name": "show snippets",
                    "command": "user.vscode(\"workbench.action.openSnippets\")",
                    "os": ""
                },
                {
                    "name": "centered switch",
                    "command": "user.vscode(\"workbench.action.toggleCenteredLayout\")",
                    "os": ""
                },
                {
                    "name": "fullscreen switch",
                    "command": "user.vscode(\"workbench.action.toggleFullScreen\")",
                    "os": ""
                },
                {
                    "name": "theme switch",
                    "command": "user.vscode(\"workbench.action.selectTheme\")",
                    "os": ""
                },
                {
                    "name": "wrap switch",
                    "command": "user.vscode(\"editor.action.toggleWordWrap\")",
                    "os": ""
                },
                {
                    "name": "zen switch",
                    "command": "user.vscode(\"workbench.action.toggleZenMode\")",
                    "os": ""
                },
                {
                    "name": "file hunt [<user.text>]",
                    "command": "user.vscode(\"workbench.action.quickOpen\")\nsleep(50ms)\ninsert(text or \"\")",
                    "os": ""
                },
                {
                    "name": "file copy path",
                    "command": "user.vscode(\"copyFilePath\")",
                    "os": ""
                },
                {
                    "name": "file create sibling",
                    "command": "user.vscode_and_wait(\"explorer.newFile\")",
                    "os": ""
                },
                {
                    "name": "file create",
                    "command": "user.vscode(\"workbench.action.files.newUntitledFile\")",
                    "os": ""
                },
                {
                    "name": "file rename",
                    "command": "user.vscode(\"fileutils.renameFile\")\nsleep(150ms)",
                    "os": ""
                },
                {
                    "name": "file move",
                    "command": "user.vscode(\"fileutils.moveFile\")\nsleep(150ms)",
                    "os": ""
                },
                {
                    "name": "file open folder",
                    "command": "user.vscode(\"revealFileInOS\")",
                    "os": ""
                },
                {
                    "name": "file reveal",
                    "command": "user.vscode(\"workbench.files.action.showActiveFileInExplorer\")",
                    "os": ""
                },
                {
                    "name": "save ugly",
                    "command": "user.vscode(\"workbench.action.files.saveWithoutFormatting\")",
                    "os": ""
                },
                {
                    "name": "suggest show",
                    "command": "user.vscode(\"editor.action.triggerSuggest\")",
                    "os": ""
                },
                {
                    "name": "hint show",
                    "command": "user.vscode(\"editor.action.triggerParameterHints\")",
                    "os": ""
                },
                {
                    "name": "definition show",
                    "command": "user.vscode(\"editor.action.revealDefinition\")",
                    "os": ""
                },
                {
                    "name": "definition peek",
                    "command": "user.vscode(\"editor.action.peekDefinition\")",
                    "os": ""
                },
                {
                    "name": "definition side",
                    "command": "user.vscode(\"editor.action.revealDefinitionAside\")",
                    "os": ""
                },
                {
                    "name": "references show",
                    "command": "user.vscode(\"editor.action.goToReferences\")",
                    "os": ""
                },
                {
                    "name": "references find",
                    "command": "user.vscode(\"references-view.find\")",
                    "os": ""
                },
                {
                    "name": "format that",
                    "command": "user.vscode(\"editor.action.formatDocument\")",
                    "os": ""
                },
                {
                    "name": "format selection",
                    "command": "user.vscode(\"editor.action.formatSelection\")",
                    "os": ""
                },
                {
                    "name": "imports fix",
                    "command": "user.vscode(\"editor.action.organizeImports\")",
                    "os": ""
                },
                {
                    "name": "problem next",
                    "command": "user.vscode(\"editor.action.marker.nextInFiles\")",
                    "os": ""
                },
                {
                    "name": "problem last",
                    "command": "user.vscode(\"editor.action.marker.prevInFiles\")",
                    "os": ""
                },
                {
                    "name": "problem fix",
                    "command": "user.vscode(\"problems.action.showQuickFixes\")",
                    "os": ""
                },
                {
                    "name": "rename that",
                    "command": "user.vscode(\"editor.action.rename\")",
                    "os": ""
                },
                {
                    "name": "refactor that",
                    "command": "user.vscode(\"editor.action.refactor\")",
                    "os": ""
                },
                {
                    "name": "whitespace trim",
                    "command": "user.vscode(\"editor.action.trimTrailingWhitespace\")",
                    "os": ""
                },
                {
                    "name": "language switch",
                    "command": "user.vscode(\"workbench.action.editor.changeLanguageMode\")",
                    "os": ""
                },
                {
                    "name": "refactor rename",
                    "command": "user.vscode(\"editor.action.rename\")",
                    "os": ""
                },
                {
                    "name": "refactor this",
                    "command": "user.vscode(\"editor.action.refactor\")",
                    "os": ""
                },
                {
                    "name": "(go declaration | follow)",
                    "command": "user.vscode(\"editor.action.revealDefinition\")",
                    "os": ""
                },
                {
                    "name": "go back",
                    "command": "user.vscode(\"workbench.action.navigateBack\")",
                    "os": ""
                },
                {
                    "name": "go forward",
                    "command": "user.vscode(\"workbench.action.navigateForward\")",
                    "os": ""
                },
                {
                    "name": "go implementation",
                    "command": "user.vscode(\"editor.action.goToImplementation\")",
                    "os": ""
                },
                {
                    "name": "go type",
                    "command": "user.vscode(\"editor.action.goToTypeDefinition\")",
                    "os": ""
                },
                {
                    "name": "go usage",
                    "command": "user.vscode(\"references-view.find\")",
                    "os": ""
                },
                {
                    "name": "go recent [<user.text>]",
                    "command": "user.vscode(\"workbench.action.openRecent\")\nsleep(50ms)\ninsert(text or \"\")\nsleep(250ms)\n\n# Bookmarks. Requires Bookmarks plugin",
                    "os": ""
                },
                {
                    "name": "go marks",
                    "command": "user.vscode(\"workbench.view.extension.bookmarks\")",
                    "os": ""
                },
                {
                    "name": "toggle mark",
                    "command": "user.vscode(\"bookmarks.toggle\")",
                    "os": ""
                },
                {
                    "name": "go next mark",
                    "command": "user.vscode(\"bookmarks.jumpToNext\")",
                    "os": ""
                },
                {
                    "name": "go last mark",
                    "command": "user.vscode(\"bookmarks.jumpToPrevious\")",
                    "os": ""
                },
                {
                    "name": "fold that",
                    "command": "user.vscode(\"editor.fold\")",
                    "os": ""
                },
                {
                    "name": "unfold that",
                    "command": "user.vscode(\"editor.unfold\")",
                    "os": ""
                },
                {
                    "name": "fold those",
                    "command": "user.vscode(\"editor.foldAllMarkerRegions\")",
                    "os": ""
                },
                {
                    "name": "unfold those",
                    "command": "user.vscode(\"editor.unfoldRecursively\")",
                    "os": ""
                },
                {
                    "name": "fold all",
                    "command": "user.vscode(\"editor.foldAll\")",
                    "os": ""
                },
                {
                    "name": "unfold all",
                    "command": "user.vscode(\"editor.unfoldAll\")",
                    "os": ""
                },
                {
                    "name": "fold comments",
                    "command": "user.vscode(\"editor.foldAllBlockComments\")",
                    "os": ""
                },
                {
                    "name": "git branch",
                    "command": "user.vscode(\"git.branchFrom\")",
                    "os": ""
                },
                {
                    "name": "git branch this",
                    "command": "user.vscode(\"git.branch\")",
                    "os": ""
                },
                {
                    "name": "git checkout [<user.text>]",
                    "command": "user.vscode(\"git.checkout\")\nsleep(50ms)\ninsert(text or \"\")",
                    "os": ""
                },
                {
                    "name": "git commit [<user.text>]",
                    "command": "user.vscode(\"git.commitStaged\")\nsleep(100ms)\nuser.insert_formatted(text or \"\", \"CAPITALIZE_FIRST_WORD\")",
                    "os": ""
                },
                {
                    "name": "git commit undo",
                    "command": "user.vscode(\"git.undoCommit\")",
                    "os": ""
                },
                {
                    "name": "git commit ammend",
                    "command": "user.vscode(\"git.commitStagedAmend\")",
                    "os": ""
                },
                {
                    "name": "git diff",
                    "command": "user.vscode(\"git.openChange\")",
                    "os": ""
                },
                {
                    "name": "git ignore",
                    "command": "user.vscode(\"git.ignore\")",
                    "os": ""
                },
                {
                    "name": "git merge",
                    "command": "user.vscode(\"git.merge\")",
                    "os": ""
                },
                {
                    "name": "git output",
                    "command": "user.vscode(\"git.showOutput\")",
                    "os": ""
                },
                {
                    "name": "git pull",
                    "command": "user.vscode(\"git.pullRebase\")",
                    "os": ""
                },
                {
                    "name": "git push",
                    "command": "user.vscode(\"git.push\")",
                    "os": ""
                },
                {
                    "name": "git push focus",
                    "command": "user.vscode(\"git.pushForce\")",
                    "os": ""
                },
                {
                    "name": "git rebase abort",
                    "command": "user.vscode(\"git.rebaseAbort\")",
                    "os": ""
                },
                {
                    "name": "git reveal",
                    "command": "user.vscode(\"git.revealInExplorer\")",
                    "os": ""
                },
                {
                    "name": "git revert",
                    "command": "user.vscode(\"git.revertChange\")",
                    "os": ""
                },
                {
                    "name": "git stash",
                    "command": "user.vscode(\"git.stash\")",
                    "os": ""
                },
                {
                    "name": "git stash pop",
                    "command": "user.vscode(\"git.stashPop\")",
                    "os": ""
                },
                {
                    "name": "git status",
                    "command": "user.vscode(\"workbench.scm.focus\")",
                    "os": ""
                },
                {
                    "name": "git stage",
                    "command": "user.vscode(\"git.stage\")",
                    "os": ""
                },
                {
                    "name": "git stage all",
                    "command": "user.vscode(\"git.stageAll\")",
                    "os": ""
                },
                {
                    "name": "git unstage",
                    "command": "user.vscode(\"git.unstage\")",
                    "os": ""
                },
                {
                    "name": "git unstage all",
                    "command": "user.vscode(\"git.unstageAll\")",
                    "os": ""
                },
                {
                    "name": "pull request",
                    "command": "user.vscode(\"pr.create\")",
                    "os": ""
                },
                {
                    "name": "change next",
                    "command": "key(alt-f5)",
                    "os": ""
                },
                {
                    "name": "change last",
                    "command": "key(shift-alt-f5)",
                    "os": ""
                },
                {
                    "name": "break point",
                    "command": "user.vscode(\"editor.debug.action.toggleBreakpoint\")",
                    "os": ""
                },
                {
                    "name": "step over",
                    "command": "user.vscode(\"workbench.action.debug.stepOver\")",
                    "os": ""
                },
                {
                    "name": "debug step into",
                    "command": "user.vscode(\"workbench.action.debug.stepInto\")",
                    "os": ""
                },
                {
                    "name": "debug step out [of]",
                    "command": "user.vscode(\"workbench.action.debug.stepOut\")",
                    "os": ""
                },
                {
                    "name": "debug start",
                    "command": "user.vscode(\"workbench.action.debug.start\")",
                    "os": ""
                },
                {
                    "name": "debug pause",
                    "command": "user.vscode(\"workbench.action.debug.pause\")",
                    "os": ""
                },
                {
                    "name": "debug stopper",
                    "command": "user.vscode(\"workbench.action.debug.stop\")",
                    "os": ""
                },
                {
                    "name": "debug continue",
                    "command": "user.vscode(\"workbench.action.debug.continue\")",
                    "os": ""
                },
                {
                    "name": "debug restart",
                    "command": "user.vscode(\"workbench.action.debug.restart\")",
                    "os": ""
                },
                {
                    "name": "debug console",
                    "command": "user.vscode(\"workbench.debug.action.toggleRepl\")",
                    "os": ""
                },
                {
                    "name": "terminal external",
                    "command": "user.vscode(\"workbench.action.terminal.openNativeConsole\")",
                    "os": ""
                },
                {
                    "name": "terminal new",
                    "command": "user.vscode(\"workbench.action.terminal.new\")",
                    "os": ""
                },
                {
                    "name": "terminal next",
                    "command": "user.vscode(\"workbench.action.terminal.focusNext\")",
                    "os": ""
                },
                {
                    "name": "terminal last",
                    "command": "user.vscode(\"workbench.action.terminal.focusPrevious\")",
                    "os": ""
                },
                {
                    "name": "terminal split",
                    "command": "user.vscode(\"workbench.action.terminal.split\")",
                    "os": ""
                },
                {
                    "name": "terminal zoom",
                    "command": "user.vscode(\"workbench.action.toggleMaximizedPanel\")",
                    "os": ""
                },
                {
                    "name": "terminal trash",
                    "command": "user.vscode(\"workbench.action.terminal.kill\")",
                    "os": ""
                },
                {
                    "name": "terminal toggle",
                    "command": "user.vscode_and_wait(\"workbench.action.terminal.toggleTerminal\")",
                    "os": ""
                },
                {
                    "name": "terminal scroll up",
                    "command": "user.vscode(\"workbench.action.terminal.scrollUp\")",
                    "os": ""
                },
                {
                    "name": "terminal scroll down",
                    "command": "user.vscode(\"workbench.action.terminal.scrollDown\")",
                    "os": ""
                },
                {
                    "name": "terminal <number_small>",
                    "command": "user.vscode_terminal(number_small)",
                    "os": ""
                },
                {
                    "name": "copy line down",
                    "command": "user.vscode(\"editor.action.copyLinesDownAction\")",
                    "os": ""
                },
                {
                    "name": "copy line up",
                    "command": "user.vscode(\"editor.action.copyLinesUpAction\")",
                    "os": ""
                },
                {
                    "name": "select less",
                    "command": "user.vscode(\"editor.action.smartSelect.shrink\")",
                    "os": ""
                },
                {
                    "name": "select (more|this)",
                    "command": "user.vscode(\"editor.action.smartSelect.expand\")",
                    "os": ""
                },
                {
                    "name": "minimap",
                    "command": "user.vscode(\"editor.action.toggleMinimap\")",
                    "os": ""
                },
                {
                    "name": "maximize",
                    "command": "user.vscode(\"workbench.action.minimizeOtherEditors\")",
                    "os": ""
                },
                {
                    "name": "restore",
                    "command": "user.vscode(\"workbench.action.evenEditorWidths\")",
                    "os": ""
                },
                {
                    "name": "replace here",
                    "command": "user.replace(\"\")\nkey(cmd-alt-l)\n",
                    "os": ""
                },
                {
                    "name": "hover show",
                    "command": "user.vscode(\"editor.action.showHover\")",
                    "os": ""
                },
                {
                    "name": "join lines",
                    "command": "user.vscode(\"editor.action.joinLines\")",
                    "os": ""
                },
                {
                    "name": "full screen",
                    "command": "user.vscode(\"workbench.action.toggleFullScreen\")",
                    "os": ""
                },
                {
                    "name": "curse undo",
                    "command": "user.vscode(\"cursorUndo\")",
                    "os": ""
                },
                {
                    "name": "select word",
                    "command": "user.vscode(\"editor.action.addSelectionToNextFindMatch\")",
                    "os": ""
                },
                {
                    "name": "skip word",
                    "command": "user.vscode(\"editor.action.moveSelectionToNextFindMatch\")",
                    "os": ""
                },
                {
                    "name": "cell next",
                    "command": "user.vscode(\"jupyter.gotoNextCellInFile\")",
                    "os": ""
                },
                {
                    "name": "cell last",
                    "command": "user.vscode(\"jupyter.gotoPrevCellInFile\")",
                    "os": ""
                },
                {
                    "name": "cell run above",
                    "command": "user.vscode(\"jupyter.runallcellsabove.palette\")",
                    "os": ""
                },
                {
                    "name": "cell run",
                    "command": "user.vscode(\"jupyter.runcurrentcell\")",
                    "os": ""
                },
                {
                    "name": "install local",
                    "command": "user.vscode(\"workbench.extensions.action.installVSIX\")",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.web.github.talon",
            "pretty_name": "github",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "focus search",
                    "command": "key(s)",
                    "os": ""
                },
                {
                    "name": "go to notifications",
                    "command": "insert(\"gn\")",
                    "os": ""
                },
                {
                    "name": "go to dashboard",
                    "command": "insert(\"gd\")",
                    "os": ""
                },
                {
                    "name": "(keyboard shortcuts show | show keyboard shortcuts)",
                    "command": "key(?)",
                    "os": ""
                },
                {
                    "name": "(selection move down | move selection down)",
                    "command": "key(j)",
                    "os": ""
                },
                {
                    "name": "(selection move up | move selection up)",
                    "command": "key(k)",
                    "os": ""
                },
                {
                    "name": "(selection toggle | toggle selection)",
                    "command": "key(x)",
                    "os": ""
                },
                {
                    "name": "(selection open | open selection)",
                    "command": "key(o)",
                    "os": ""
                },
                {
                    "name": "go to code",
                    "command": "insert(\"gc\")",
                    "os": ""
                },
                {
                    "name": "go to issues",
                    "command": "insert(\"gi\")",
                    "os": ""
                },
                {
                    "name": "go to pull requests",
                    "command": "insert(\"gp\")",
                    "os": ""
                },
                {
                    "name": "go to wiki",
                    "command": "insert(\"gw\")",
                    "os": ""
                },
                {
                    "name": "go to actions",
                    "command": "insert(\"ga\")",
                    "os": ""
                },
                {
                    "name": "go to projects",
                    "command": "insert(\"gb\")",
                    "os": ""
                },
                {
                    "name": "go to discussions",
                    "command": "insert(\"gg\")",
                    "os": ""
                },
                {
                    "name": "[web] editor open",
                    "command": "key(.)",
                    "os": ""
                },
                {
                    "name": "(file find | find file)",
                    "command": "key(t)",
                    "os": ""
                },
                {
                    "name": "jump to line",
                    "command": "key(l)",
                    "os": ""
                },
                {
                    "name": "((branch|tag) switch | switch (branch|tag))",
                    "command": "key(w)",
                    "os": ""
                },
                {
                    "name": "(url expand | expand url)",
                    "command": "key(y)",
                    "os": ""
                },
                {
                    "name": "(show|hide) comments",
                    "command": "key(i)",
                    "os": ""
                },
                {
                    "name": "blame view open",
                    "command": "key(b)",
                    "os": ""
                },
                {
                    "name": "(show|hide) annotations",
                    "command": "key(a)",
                    "os": ""
                },
                {
                    "name": "(issue create | create [an] issue)",
                    "command": "key(c)",
                    "os": ""
                },
                {
                    "name": "search (issues|[pull] requests)",
                    "command": "key(/)",
                    "os": ""
                },
                {
                    "name": "(filter by|edit) labels",
                    "command": "key(l)",
                    "os": ""
                },
                {
                    "name": "(filter by|edit) milestones",
                    "command": "key(m)",
                    "os": ""
                },
                {
                    "name": "(filter by|edit) assignee",
                    "command": "key(a)",
                    "os": ""
                },
                {
                    "name": "reply",
                    "command": "key(r)",
                    "os": ""
                },
                {
                    "name": "(comment submit | submit comment)",
                    "command": "key(ctrl-enter)",
                    "os": ""
                },
                {
                    "name": "(comment preview | preview comment)",
                    "command": "key(ctrl-shift-p)",
                    "os": ""
                },
                {
                    "name": "git hub full screen",
                    "command": "key(ctrl-shift-l)",
                    "os": ""
                },
                {
                    "name": "(form close | close form)",
                    "command": "key(escape)",
                    "os": ""
                },
                {
                    "name": "parent commit",
                    "command": "key(p)",
                    "os": ""
                },
                {
                    "name": "other parent commit",
                    "command": "key(o)",
                    "os": ""
                },
                {
                    "name": "mark as read",
                    "command": "key(y)",
                    "os": ""
                },
                {
                    "name": "(thread mute | mute thread)",
                    "command": "key(shift-m)",
                    "os": ""
                },
                {
                    "name": "(issue open | open issue)",
                    "command": "key(o)",
                    "os": ""
                },
                {
                    "name": "(issue create | create issue)",
                    "command": "key(c)",
                    "os": ""
                },
                {
                    "name": "reviewer request",
                    "command": "key(q)",
                    "os": ""
                },
                {
                    "name": "milestone set",
                    "command": "key(m)",
                    "os": ""
                },
                {
                    "name": "assignee set",
                    "command": "key(a)",
                    "os": ""
                },
                {
                    "name": "label set",
                    "command": "key(l)",
                    "os": ""
                },
                {
                    "name": "go to workflow",
                    "command": "insert(\"gf\")",
                    "os": ""
                },
                {
                    "name": "timestamps toggle",
                    "command": "key(shift-t)",
                    "os": ""
                },
                {
                    "name": "fullscreen toggle",
                    "command": "key(shift-f)",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.web.gitlab.talon",
            "pretty_name": "gitlab",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "show shortcuts",
                    "command": "key(?)",
                    "os": ""
                },
                {
                    "name": "go to projects [page]",
                    "command": "key(shift-p)",
                    "os": ""
                },
                {
                    "name": "go to groups [page]",
                    "command": "key(shift-g)",
                    "os": ""
                },
                {
                    "name": "go to activity [page]",
                    "command": "key(shift-a)",
                    "os": ""
                },
                {
                    "name": "go to milestones [page]",
                    "command": "key(shift-l)",
                    "os": ""
                },
                {
                    "name": "go to snippets [page]",
                    "command": "key(shift-s)",
                    "os": ""
                },
                {
                    "name": "search page",
                    "command": "key(s)",
                    "os": ""
                },
                {
                    "name": "go to issues [page]",
                    "command": "key(shift-i)",
                    "os": ""
                },
                {
                    "name": "go to merge requests [page]",
                    "command": "key(shift-m)",
                    "os": ""
                },
                {
                    "name": "go to to do [list] [page]",
                    "command": "key(shift-t)",
                    "os": ""
                },
                {
                    "name": "(show|hide) performance bar",
                    "command": "key(p)",
                    "os": ""
                },
                {
                    "name": "edit last comment",
                    "command": "key(1)",
                    "os": ""
                },
                {
                    "name": "toggle mark down [preview]",
                    "command": "key(ctrl-shift-p)",
                    "os": ""
                },
                {
                    "name": "go [to] project home [page]",
                    "command": "insert(\"gp\")",
                    "os": ""
                },
                {
                    "name": "go [to] project activity [feed]",
                    "command": "insert(\"gv\")",
                    "os": ""
                },
                {
                    "name": "go [to] project releases [list]",
                    "command": "insert(\"gr\")",
                    "os": ""
                },
                {
                    "name": "go [to] project files [list]",
                    "command": "insert(\"gf\")",
                    "os": ""
                },
                {
                    "name": "go [to] project file search [page]",
                    "command": "key(t)",
                    "os": ""
                },
                {
                    "name": "go [to] project (commit|commits) [list]",
                    "command": "insert(\"gc\")",
                    "os": ""
                },
                {
                    "name": "go [to] (repository|repo) graph [page]",
                    "command": "insert(\"gn\")",
                    "os": ""
                },
                {
                    "name": "go [to] (repository|repo) charts",
                    "command": "insert(\"gd\")",
                    "os": ""
                },
                {
                    "name": "go [to] project issues [list]",
                    "command": "insert(\"gi\")",
                    "os": ""
                },
                {
                    "name": "go [to] new issues [list]",
                    "command": "insert(\"i\")",
                    "os": ""
                },
                {
                    "name": "go [to] project issues boards [list]",
                    "command": "insert(\"gb\")",
                    "os": ""
                },
                {
                    "name": "go [to] project merge requests [list]",
                    "command": "insert(\"gm\")",
                    "os": ""
                },
                {
                    "name": "go [to] jobs [list]",
                    "command": "insert(\"gj\")",
                    "os": ""
                },
                {
                    "name": "go [to] project metrics",
                    "command": "insert(\"gl\")",
                    "os": ""
                },
                {
                    "name": "go [to] project environments",
                    "command": "insert(\"ge\")",
                    "os": ""
                },
                {
                    "name": "go [to] project cubes",
                    "command": "insert(\"gk\")",
                    "os": ""
                },
                {
                    "name": "go [to] project snippets [list]",
                    "command": "insert(\"gs\")",
                    "os": ""
                },
                {
                    "name": "go [to] project wiki",
                    "command": "insert(\"gw\")",
                    "os": ""
                },
                {
                    "name": "edit description",
                    "command": "key(e)",
                    "os": ""
                },
                {
                    "name": "change assignee",
                    "command": "key(a)",
                    "os": ""
                },
                {
                    "name": "change milestone",
                    "command": "key(m)",
                    "os": ""
                },
                {
                    "name": "change label",
                    "command": "key(l)",
                    "os": ""
                },
                {
                    "name": "right comment",
                    "command": "key(r)",
                    "os": ""
                },
                {
                    "name": "next [unresolved] discussion",
                    "command": "key(n)",
                    "os": ""
                },
                {
                    "name": "previous [unresolved] discussion",
                    "command": "key(p)",
                    "os": ""
                },
                {
                    "name": "next file",
                    "command": "key(])",
                    "os": ""
                },
                {
                    "name": "previous file",
                    "command": "key([)",
                    "os": ""
                },
                {
                    "name": "back to files",
                    "command": "key(escape)",
                    "os": ""
                },
                {
                    "name": "open permalink",
                    "command": "key(y)",
                    "os": ""
                },
                {
                    "name": "edit page",
                    "command": "key(e)",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.web.outlook.talon",
            "pretty_name": "outlook",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "new message",
                    "command": "key(n)",
                    "os": ""
                },
                {
                    "name": "send [this] message",
                    "command": "key(alt-s)",
                    "os": ""
                },
                {
                    "name": "reply [to] [this] message",
                    "command": "key(r)",
                    "os": ""
                },
                {
                    "name": "reply all [to] [this] message",
                    "command": "key(ctrl-shift-r)",
                    "os": ""
                },
                {
                    "name": "forward [this] message",
                    "command": "key(ctrl-shift-f)",
                    "os": ""
                },
                {
                    "name": "save [draft]",
                    "command": "key(ctrl-s)",
                    "os": ""
                },
                {
                    "name": "discard [draft]",
                    "command": "key(esc)",
                    "os": ""
                },
                {
                    "name": "insert [a] [hyper] link",
                    "command": "key(ctrl-k)",
                    "os": ""
                },
                {
                    "name": "(select|unselect) [this] message",
                    "command": "key(ctrl-space)",
                    "os": ""
                },
                {
                    "name": "select all [messages]",
                    "command": "key(ctrl-a)",
                    "os": ""
                },
                {
                    "name": "clear all [messages]",
                    "command": "key(esc)",
                    "os": ""
                },
                {
                    "name": "select first [message]",
                    "command": "key(home)",
                    "os": ""
                },
                {
                    "name": "select last [message]",
                    "command": "key(and)",
                    "os": ""
                },
                {
                    "name": "open [this] message",
                    "command": "key(o)",
                    "os": ""
                },
                {
                    "name": "open [this] message [in] [a] new window",
                    "command": "key(shift-enter)",
                    "os": ""
                },
                {
                    "name": "close [this] message",
                    "command": "key(esc)",
                    "os": ""
                },
                {
                    "name": "[open] [the] next (item|message)",
                    "command": "key(ctrl-.)",
                    "os": ""
                },
                {
                    "name": "[open] [the] (prev|previous) item",
                    "command": "key(ctrl-,)",
                    "os": ""
                },
                {
                    "name": "next reading [pane] (item|message)",
                    "command": "key(.)",
                    "os": ""
                },
                {
                    "name": "(prev|previous) [pane] (item|message)",
                    "command": "key(,)",
                    "os": ""
                },
                {
                    "name": "(expand|collapse) [conversation]",
                    "command": "key(x)",
                    "os": ""
                },
                {
                    "name": "go [to] mail",
                    "command": "key(ctrl-shift-1)",
                    "os": ""
                },
                {
                    "name": "go [to] calendar",
                    "command": "key(ctrl-shift-2)",
                    "os": ""
                },
                {
                    "name": "go [to] people",
                    "command": "key(ctrl-shift-3)",
                    "os": ""
                },
                {
                    "name": "go [to] to do",
                    "command": "key(ctrl-shift-4)",
                    "os": ""
                },
                {
                    "name": "go [to] inbox",
                    "command": "key(g)\nkey(i)",
                    "os": ""
                },
                {
                    "name": "go to drafts",
                    "command": "key(g)\nkey(d)",
                    "os": ""
                },
                {
                    "name": "go to sent",
                    "command": "key(g)\nkey(s)",
                    "os": ""
                },
                {
                    "name": "search [email]",
                    "command": "key(alt-q)",
                    "os": ""
                },
                {
                    "name": "show help",
                    "command": "key(?)",
                    "os": ""
                },
                {
                    "name": "undo [last] [action]",
                    "command": "key(ctrl-z)",
                    "os": ""
                },
                {
                    "name": "delete [this] [message]",
                    "command": "key(delete)",
                    "os": ""
                },
                {
                    "name": "(perm|permanently) delete [this] [message]",
                    "command": "key(shift+delete)",
                    "os": ""
                },
                {
                    "name": "new folder",
                    "command": "key(shift-e)",
                    "os": ""
                },
                {
                    "name": "mark [this] [(item|message)] as read",
                    "command": "key(q)",
                    "os": ""
                },
                {
                    "name": "mark [this] [(item|message)] as unread",
                    "command": "key(u)",
                    "os": ""
                },
                {
                    "name": "flag [this] [(item|message)]",
                    "command": "key(insert)",
                    "os": ""
                },
                {
                    "name": "archive",
                    "command": "key(e)",
                    "os": ""
                },
                {
                    "name": "mark [this] [message] [as] junk",
                    "command": "key(j)",
                    "os": ""
                },
                {
                    "name": "moved to [a] folder",
                    "command": "key(v)",
                    "os": ""
                },
                {
                    "name": "categorize [this] message",
                    "command": "key(c)",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.web.protonmail.talon",
            "pretty_name": "protonmail",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "open help",
                    "command": "key(?)",
                    "os": ""
                },
                {
                    "name": "[focus] search",
                    "command": "key(/)",
                    "os": ""
                },
                {
                    "name": "confirm active",
                    "command": "key(enter)",
                    "os": ""
                },
                {
                    "name": "close active",
                    "command": "key(escape)",
                    "os": ""
                },
                {
                    "name": "open command [palette]",
                    "command": "key(shift-space)",
                    "os": ""
                },
                {
                    "name": "new message",
                    "command": "key(c)",
                    "os": ""
                },
                {
                    "name": "send message",
                    "command": "key(ctrl-enter)",
                    "os": ""
                },
                {
                    "name": "save message",
                    "command": "key(ctrl-s)",
                    "os": ""
                },
                {
                    "name": "(go|jump) [to] inbox",
                    "command": "key(g)\nkey(i)",
                    "os": ""
                },
                {
                    "name": "(go|jump) [to] draft",
                    "command": "key(g)\nkey(d)",
                    "os": ""
                },
                {
                    "name": "(go|jump) [to] sent",
                    "command": "key(g)\nkey(s)",
                    "os": ""
                },
                {
                    "name": "(go|jump) [to] starred",
                    "command": "key(g)\nkey(.)",
                    "os": ""
                },
                {
                    "name": "(go|jump) [to] archive",
                    "command": "key(g)\nkey(a)",
                    "os": ""
                },
                {
                    "name": "(go|jump) [to] spam",
                    "command": "key(g)\nkey(x)",
                    "os": ""
                },
                {
                    "name": "(go|jump) [to] trash",
                    "command": "key(g)\nkey(t)\n\n## Navigation",
                    "os": ""
                },
                {
                    "name": "(prev|previous) message",
                    "command": "key(up)",
                    "os": ""
                },
                {
                    "name": "next message",
                    "command": "key(down)",
                    "os": ""
                },
                {
                    "name": "exit message",
                    "command": "key(left)",
                    "os": ""
                },
                {
                    "name": "enter message",
                    "command": "key(right)",
                    "os": ""
                },
                {
                    "name": "(show|display) newer [message]",
                    "command": "key(k)",
                    "os": ""
                },
                {
                    "name": "(show|display) older [message]",
                    "command": "key(j)",
                    "os": ""
                },
                {
                    "name": "open message",
                    "command": "key(enter)",
                    "os": ""
                },
                {
                    "name": "go back",
                    "command": "key(escape)",
                    "os": ""
                },
                {
                    "name": "select all",
                    "command": "key(*)\nkey(a)",
                    "os": ""
                },
                {
                    "name": "(deselect|unselect) all",
                    "command": "key(*)\nkey(n)",
                    "os": ""
                },
                {
                    "name": "select [the] (message|conversation)",
                    "command": "key(x)",
                    "os": ""
                },
                {
                    "name": "mark [as] read",
                    "command": "key(r)",
                    "os": ""
                },
                {
                    "name": "mark [as] unread",
                    "command": "key(u)",
                    "os": ""
                },
                {
                    "name": "star (message|conversation)",
                    "command": "key(.)",
                    "os": ""
                },
                {
                    "name": "move to inbox",
                    "command": "key(i)",
                    "os": ""
                },
                {
                    "name": "move to trash",
                    "command": "key(t)",
                    "os": ""
                },
                {
                    "name": "move to archive",
                    "command": "key(a)",
                    "os": ""
                },
                {
                    "name": "move to spam",
                    "command": "key(s)",
                    "os": ""
                },
                {
                    "name": "reply to (message|conversation)",
                    "command": "key(shift-r)",
                    "os": ""
                },
                {
                    "name": "reply all [to] (message|conversation)",
                    "command": "key(shift-a)",
                    "os": ""
                },
                {
                    "name": "forward (message|conversation)",
                    "command": "key(shift-f)",
                    "os": ""
                },
                {
                    "name": "(prev|previous) contact",
                    "command": "key(up)",
                    "os": ""
                },
                {
                    "name": "next contact",
                    "command": "key(down)",
                    "os": ""
                },
                {
                    "name": "enter contact",
                    "command": "key(right)",
                    "os": ""
                },
                {
                    "name": "delete contact",
                    "command": "key(t)",
                    "os": ""
                },
                {
                    "name": "exit contact",
                    "command": "key(left)",
                    "os": ""
                },
                {
                    "name": "save contact",
                    "command": "key(ctrl-s)",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.web.twitter.talon",
            "pretty_name": "twitter",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "(show shortcuts|shortcuts help)",
                    "command": "key(?)",
                    "os": ""
                },
                {
                    "name": "next tweet",
                    "command": "key(j)",
                    "os": ""
                },
                {
                    "name": "previous tweet",
                    "command": "key(k)",
                    "os": ""
                },
                {
                    "name": "page down",
                    "command": "key(space)",
                    "os": ""
                },
                {
                    "name": "load new tweet",
                    "command": "key(.)",
                    "os": ""
                },
                {
                    "name": "go home",
                    "command": "insert(\"gh\")",
                    "os": ""
                },
                {
                    "name": "go explore",
                    "command": "insert(\"ge\")",
                    "os": ""
                },
                {
                    "name": "go notifications",
                    "command": "insert(\"gn\")",
                    "os": ""
                },
                {
                    "name": "go mentions",
                    "command": "insert(\"gr\")",
                    "os": ""
                },
                {
                    "name": "go profile",
                    "command": "insert(\"gp\")",
                    "os": ""
                },
                {
                    "name": "go likes",
                    "command": "insert(\"gl\")",
                    "os": ""
                },
                {
                    "name": "go lists",
                    "command": "insert(\"gi\")",
                    "os": ""
                },
                {
                    "name": "go direct messages",
                    "command": "insert(\"gm\")",
                    "os": ""
                },
                {
                    "name": "go settings",
                    "command": "insert(\"gs\")",
                    "os": ""
                },
                {
                    "name": "go book marks",
                    "command": "insert(\"gb\")",
                    "os": ""
                },
                {
                    "name": "go to user",
                    "command": "insert(\"gu\")",
                    "os": ""
                },
                {
                    "name": "display settings",
                    "command": "insert(\"gd\")",
                    "os": ""
                },
                {
                    "name": "new tweet",
                    "command": "key(n)",
                    "os": ""
                },
                {
                    "name": "send tweet",
                    "command": "key(ctrl-enter)",
                    "os": ""
                },
                {
                    "name": "new direct message",
                    "command": "key(m)",
                    "os": ""
                },
                {
                    "name": "search",
                    "command": "key(/)",
                    "os": ""
                },
                {
                    "name": "like message",
                    "command": "key(l)",
                    "os": ""
                },
                {
                    "name": "reply message",
                    "command": "key(r)",
                    "os": ""
                },
                {
                    "name": "re tweet [message]",
                    "command": "key(t)",
                    "os": ""
                },
                {
                    "name": "share tweet",
                    "command": "key(s)",
                    "os": ""
                },
                {
                    "name": "bookmark",
                    "command": "key(b)",
                    "os": ""
                },
                {
                    "name": "mute account",
                    "command": "key(urge)",
                    "os": ""
                },
                {
                    "name": "block account",
                    "command": "key(x)",
                    "os": ""
                },
                {
                    "name": "open details",
                    "command": "key(enter)",
                    "os": ""
                },
                {
                    "name": "expand photo",
                    "command": "key(o)",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.apps.windbg.windbg",
            "pretty_name": "windbg",
            "os": "win",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.apps.windbg.windbg.talon",
            "pretty_name": "windbg",
            "os": "win",
            "raw_commands": [],
            "commands": [
                {
                    "name": "register <user.registers>",
                    "command": "key(@)\ninsert(\"{registers}\")\n",
                    "os": "win"
                },
                {
                    "name": "open help",
                    "command": "insert(\".hh\\n\")",
                    "os": "win"
                },
                {
                    "name": "add microsoft symbols",
                    "command": "insert(\"srv*C:\\\\symbols*http://msdl.microsoft.com/download/symbols;\\n\")",
                    "os": "win"
                },
                {
                    "name": "force reload symbols",
                    "command": "insert(\".reload /f\\n\")",
                    "os": "win"
                },
                {
                    "name": "reload symbols",
                    "command": "insert(\".reload\\n\")",
                    "os": "win"
                },
                {
                    "name": "loaded modules",
                    "command": "insert(\"lm l\\n\")\n",
                    "os": "win"
                },
                {
                    "name": "display pointers",
                    "command": "insert(\"dps \")\n\n# XXX - should be generic",
                    "os": "win"
                },
                {
                    "name": "dereference pointer",
                    "command": "insert(\"poi()\")\nedit.left()\n",
                    "os": "win"
                },
                {
                    "name": "show version",
                    "command": "key(ctrl-alt-w)",
                    "os": "win"
                },
                {
                    "name": "view command",
                    "command": "key(alt-1)",
                    "os": "win"
                },
                {
                    "name": "view watch",
                    "command": "key(alt-2)",
                    "os": "win"
                },
                {
                    "name": "view locals",
                    "command": "key(alt-3)",
                    "os": "win"
                },
                {
                    "name": "view registers",
                    "command": "key(alt-4)",
                    "os": "win"
                },
                {
                    "name": "view memory",
                    "command": "key(alt-5)",
                    "os": "win"
                },
                {
                    "name": "view call stack",
                    "command": "key(alt-6)",
                    "os": "win"
                },
                {
                    "name": "view disassembly",
                    "command": "key(alt-7)",
                    "os": "win"
                },
                {
                    "name": "view scratch pad",
                    "command": "key(alt-8)",
                    "os": "win"
                },
                {
                    "name": "view (processes|threads)",
                    "command": "key(alt-9)",
                    "os": "win"
                },
                {
                    "name": "dump function params",
                    "command": "\"r @rcx,@rdx,@r8,@r9\\n\"",
                    "os": "win"
                },
                {
                    "name": "(lib|library) <user.windows_dlls>",
                    "command": "\"{windows_dlls}\"",
                    "os": "win"
                }
            ]
        },
        {
            "name": "user.knausj_talon.code.abbreviate",
            "pretty_name": "abbreviate",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.code.browser",
            "pretty_name": "browser",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.code.code",
            "pretty_name": "code",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.code.extensions",
            "pretty_name": "extensions",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.code.numbers",
            "pretty_name": "numbers",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.code.keys",
            "pretty_name": "keys",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.code.debugger",
            "pretty_name": "debugger",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.code.dictation",
            "pretty_name": "dictation",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.code.edit",
            "pretty_name": "edit",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.code.file_manager",
            "pretty_name": "file manager",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.code.formatters",
            "pretty_name": "formatters",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.code.help",
            "pretty_name": "help",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.code.homophones",
            "pretty_name": "homophones",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.code.ordinals",
            "pretty_name": "ordinals",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.code.platforms.linux.app",
            "pretty_name": "app",
            "os": "linux",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.code.platforms.linux.desktops",
            "pretty_name": "desktops",
            "os": "linux",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.code.platforms.linux.edit",
            "pretty_name": "edit",
            "os": "linux",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.code.platforms.mac.app",
            "pretty_name": "app",
            "os": "mac",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.code.platforms.mac.desktops",
            "pretty_name": "desktops",
            "os": "mac",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.code.platforms.mac.edit",
            "pretty_name": "edit",
            "os": "mac",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.code.platforms.win.app",
            "pretty_name": "app",
            "os": "win",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.code.platforms.win.desktops",
            "pretty_name": "desktops",
            "os": "win",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.code.platforms.win.edit",
            "pretty_name": "edit",
            "os": "win",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.code.switcher",
            "pretty_name": "switcher",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.code.vocabulary",
            "pretty_name": "vocabulary",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.code.websites_and_search_engines",
            "pretty_name": "websites and search engines",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.code.window_snap",
            "pretty_name": "window snap",
            "os": "win",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.draft_editor.draft_editor.talon",
            "pretty_name": "draft editor",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "draft this",
                    "command": "user.draft_editor_open()\n",
                    "os": ""
                },
                {
                    "name": "draft all",
                    "command": "edit.select_all()\nuser.draft_editor_open()\n",
                    "os": ""
                },
                {
                    "name": "draft line",
                    "command": "edit.select_line()\nuser.draft_editor_open()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.draft_editor.draft_editor_open.talon",
            "pretty_name": "draft editor open",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "draft submit",
                    "command": "user.draft_editor_submit()",
                    "os": ""
                },
                {
                    "name": "draft discard",
                    "command": "user.draft_editor_discard()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.lang.batch.batch",
            "pretty_name": "batch",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.lang.batch.batch.talon",
            "pretty_name": "batch",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "soft exit",
                    "command": "\"exit /B 1\\n\"",
                    "os": ""
                },
                {
                    "name": "hard exit",
                    "command": "\"exit 1\\n\"",
                    "os": ""
                },
                {
                    "name": "echo",
                    "command": "\"echo \"",
                    "os": ""
                },
                {
                    "name": "echo off",
                    "command": "\"@echo off\\n\"",
                    "os": ""
                },
                {
                    "name": "call",
                    "command": "\"call \"",
                    "os": ""
                },
                {
                    "name": "call shell",
                    "command": "\"call cmd \\\\c \"",
                    "os": ""
                },
                {
                    "name": "if error",
                    "command": "\"if errorlevel 1 \"",
                    "os": ""
                },
                {
                    "name": "go to",
                    "command": "\"goto \"",
                    "os": ""
                },
                {
                    "name": "delayed expansion",
                    "command": "\"SETLOCAL EnableDelayedExpansion\\n\"",
                    "os": ""
                },
                {
                    "name": "arg <number_small>",
                    "command": "\"%{number_small}\"",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.lang.c.c",
            "pretty_name": "c",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.lang.c.c.talon",
            "pretty_name": "c",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "funky <user.text>",
                    "command": "user.code_default_function(text)",
                    "os": ""
                },
                {
                    "name": "static funky <user.text>",
                    "command": "user.code_private_static_function(text)",
                    "os": ""
                },
                {
                    "name": "state define",
                    "command": "\"#define \"",
                    "os": ""
                },
                {
                    "name": "state undefine",
                    "command": "\"#undef \"",
                    "os": ""
                },
                {
                    "name": "state if define",
                    "command": "\"#ifdef \"",
                    "os": ""
                },
                {
                    "name": "state pre if",
                    "command": "\"#if \"",
                    "os": ""
                },
                {
                    "name": "state error",
                    "command": "\"#error \"",
                    "os": ""
                },
                {
                    "name": "state pre else if",
                    "command": "\"#elif \"",
                    "os": ""
                },
                {
                    "name": "state pre end",
                    "command": "\"#endif \"",
                    "os": ""
                },
                {
                    "name": "state pragma",
                    "command": "\"#pragma \"",
                    "os": ""
                },
                {
                    "name": "state default",
                    "command": "\"default:\\nbreak;\"",
                    "os": ""
                },
                {
                    "name": "push brackets",
                    "command": "edit.line_end()\n#insert(\"{\")\n#key(enter)\ninsert(\"{}\")\nedit.left()\nkey(enter)\nkey(enter)\nedit.up()\n\n# Declare variables or structs etc.\n# Ex. * int myList",
                    "os": ""
                },
                {
                    "name": "<user.c_variable> <phrase>",
                    "command": "insert(\"{c_variable} \")\ninsert(user.formatted_text(phrase, \"PRIVATE_CAMEL_CASE,NO_SPACES\"))\n",
                    "os": ""
                },
                {
                    "name": "<user.c_variable> <user.letter>",
                    "command": "insert(\"{c_variable} {letter} \")\n\n# Ex. (int *)",
                    "os": ""
                },
                {
                    "name": "cast to <user.c_cast>",
                    "command": "\"{c_cast}\"",
                    "os": ""
                },
                {
                    "name": "standard cast to <user.stdint_cast>",
                    "command": "\"{stdint_cast}\"",
                    "os": ""
                },
                {
                    "name": "<user.c_types>",
                    "command": "\"{c_types}\"",
                    "os": ""
                },
                {
                    "name": "<user.c_pointers>",
                    "command": "\"{c_pointers}\"",
                    "os": ""
                },
                {
                    "name": "<user.c_signed>",
                    "command": "\"{c_signed}\"",
                    "os": ""
                },
                {
                    "name": "standard <user.stdint_types>",
                    "command": "\"{stdint_types}\"",
                    "os": ""
                },
                {
                    "name": "int main",
                    "command": "insert(\"int main()\")\nedit.left()\n",
                    "os": ""
                },
                {
                    "name": "toggle includes",
                    "command": "user.code_toggle_libraries()",
                    "os": ""
                },
                {
                    "name": "include <user.code_libraries>",
                    "command": "user.code_insert_library(code_libraries, \"\")\nkey(end enter)",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.lang.csharp.csharp",
            "pretty_name": "csharp",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.lang.csharp.csharp.talon",
            "pretty_name": "csharp",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "funky <user.text>",
                    "command": "user.code_default_function(text)",
                    "os": ""
                },
                {
                    "name": "pro funky <user.text>",
                    "command": "user.code_protected_function(text)",
                    "os": ""
                },
                {
                    "name": "pub funky <user.text>",
                    "command": "user.code_public_function(text)",
                    "os": ""
                },
                {
                    "name": "static funky <user.text>",
                    "command": "user.code_private_static_function(text)",
                    "os": ""
                },
                {
                    "name": "pro static funky <user.text>",
                    "command": "user.code_protected_static_function(text)",
                    "os": ""
                },
                {
                    "name": "pub static funky <user.text>",
                    "command": "user.code_public_static_function(text)",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.lang.go.go.talon",
            "pretty_name": "go",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "variadic",
                    "command": "\"...\"",
                    "os": ""
                },
                {
                    "name": "logical and",
                    "command": "\" && \"",
                    "os": ""
                },
                {
                    "name": "logical or",
                    "command": "\" || \"",
                    "os": ""
                },
                {
                    "name": "state comment",
                    "command": "\"// \"",
                    "os": ""
                },
                {
                    "name": "[line] comment <user.text>",
                    "command": "key(\"cmd-right\")\ninsert(\" // \")\ninsert(user.formatted_text(text, \"sentence\"))\n\n# \"add comment <user.text> [over]:\n#     key(\"cmd-right\")\n#     text_with_leading(\" // \")\n# ]\n# \"[state] context: insert(\"ctx\")",
                    "os": ""
                },
                {
                    "name": "state (funk | func | fun)",
                    "command": "\"func \"",
                    "os": ""
                },
                {
                    "name": "function (Annette | init) [over]",
                    "command": "\"func init() {\\n\"",
                    "os": ""
                },
                {
                    "name": "function <user.text> [over]",
                    "command": "insert(\"func \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\ninsert(\"(\")\nsleep(100ms)\n",
                    "os": ""
                },
                {
                    "name": "method <user.text> [over]",
                    "command": "insert(\"meth \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\nsleep(100ms)\n",
                    "os": ""
                },
                {
                    "name": "state var",
                    "command": "\"var \"",
                    "os": ""
                },
                {
                    "name": "variable [<user.text>] [over]",
                    "command": "insert(\"var \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n# insert(\" \")\nsleep(100ms)\n",
                    "os": ""
                },
                {
                    "name": "of type [<user.text>] [over]",
                    "command": "insert(\" \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n\n# \"set <user.text> [over]:\n#     insert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n#     insert(\" := \")\n#     sleep(100ms)\n# ]",
                    "os": ""
                },
                {
                    "name": "state break",
                    "command": "\"break\"",
                    "os": ""
                },
                {
                    "name": "state (chan | channel)",
                    "command": "\" chan \"",
                    "os": ""
                },
                {
                    "name": "state go",
                    "command": "\"go \"",
                    "os": ""
                },
                {
                    "name": "state if",
                    "command": "\"if \"",
                    "os": ""
                },
                {
                    "name": "if <user.text> [over]",
                    "command": "insert(\"if \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))",
                    "os": ""
                },
                {
                    "name": "spawn <user.text> [over]",
                    "command": "insert(\"go \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))",
                    "os": ""
                },
                {
                    "name": "state else if",
                    "command": "\" else if \"",
                    "os": ""
                },
                {
                    "name": "else if <user.text> [over]",
                    "command": "insert(\" else if \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n",
                    "os": ""
                },
                {
                    "name": "state else",
                    "command": "\" else \"",
                    "os": ""
                },
                {
                    "name": "else <user.text> [over]",
                    "command": "insert(\" else {\")\nkey(\"enter\")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n",
                    "os": ""
                },
                {
                    "name": "state while",
                    "command": "\"while \"",
                    "os": ""
                },
                {
                    "name": "while <user.text> [over]",
                    "command": "insert(\"while \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n",
                    "os": ""
                },
                {
                    "name": "state for",
                    "command": "\"for \"",
                    "os": ""
                },
                {
                    "name": "for <user.text> [over]",
                    "command": "insert(\"for \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n",
                    "os": ""
                },
                {
                    "name": "state for range",
                    "command": "\"forr \"",
                    "os": ""
                },
                {
                    "name": "range <user.text> [over]",
                    "command": "insert(\"forr \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n",
                    "os": ""
                },
                {
                    "name": "state format",
                    "command": "\"fmt\"",
                    "os": ""
                },
                {
                    "name": "format <user.text> [over]",
                    "command": "insert(\"fmt.\")\ninsert(user.formatted_text(text, \"PUBLIC_CAMEL_CASE\"))\n",
                    "os": ""
                },
                {
                    "name": "state switch",
                    "command": "\"switch \"",
                    "os": ""
                },
                {
                    "name": "switch <user.text> [over]",
                    "command": "insert(\"switch \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n",
                    "os": ""
                },
                {
                    "name": "state select",
                    "command": "\"select \"",
                    "os": ""
                },
                {
                    "name": "state (const | constant)",
                    "command": "\" const \"",
                    "os": ""
                },
                {
                    "name": "constant <user.text> [over]",
                    "command": "insert(\"const \")\ninsert(user.formatted_text(text, \"PUBLIC_CAMEL_CASE\"))\n",
                    "os": ""
                },
                {
                    "name": "state case",
                    "command": "\" case \"",
                    "os": ""
                },
                {
                    "name": "state default",
                    "command": "\" default:\"",
                    "os": ""
                },
                {
                    "name": "case <user.text> [over]",
                    "command": "insert(\"case \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n",
                    "os": ""
                },
                {
                    "name": "state type",
                    "command": "\" type \"",
                    "os": ""
                },
                {
                    "name": "type <user.text> [over]",
                    "command": "insert(\"type \")\ninsert(user.formatted_text(text, \"PUBLIC_CAMEL_CASE\"))",
                    "os": ""
                },
                {
                    "name": "state true",
                    "command": "\" true \"",
                    "os": ""
                },
                {
                    "name": "state false",
                    "command": "\" false \"",
                    "os": ""
                },
                {
                    "name": "state (start | struct | struck)",
                    "command": "insert(\" struct {\")\nkey(\"enter\")",
                    "os": ""
                },
                {
                    "name": "(struct | struck) <user.text> [over]",
                    "command": "insert(\" struct {\")\nkey(\"enter\")\ninsert(user.formatted_text(text, \"PUBLIC_CAMEL_CASE\"))\n",
                    "os": ""
                },
                {
                    "name": "[state] empty interface",
                    "command": "\" interface{} \"",
                    "os": ""
                },
                {
                    "name": "state interface",
                    "command": "insert(\" interface {\")\nkey(\"enter\")",
                    "os": ""
                },
                {
                    "name": "interface <user.text> [over]",
                    "command": "insert(\" interface {\")\nkey(\"enter\")\ninsert(user.formatted_text(text, \"PUBLIC_CAMEL_CASE\"))\n",
                    "os": ""
                },
                {
                    "name": "state string",
                    "command": "\" string \"",
                    "os": ""
                },
                {
                    "name": "[state] (int | integer | ant)",
                    "command": "\"int\"",
                    "os": ""
                },
                {
                    "name": "state slice",
                    "command": "\" []\"",
                    "os": ""
                },
                {
                    "name": "slice of",
                    "command": "\"[]\"",
                    "os": ""
                },
                {
                    "name": "[state] (no | nil)",
                    "command": "\"nil\"",
                    "os": ""
                },
                {
                    "name": "state (int | integer | ant) 64",
                    "command": "\" int64 \"",
                    "os": ""
                },
                {
                    "name": "state tag",
                    "command": "insert(\" ``\")\nkey(\"left\")",
                    "os": ""
                },
                {
                    "name": "field tag <user.text> [over]",
                    "command": "insert(\" ``\")\nkey(\"left\")\nsleep(100ms)\ninsert(user.formatted_text(text, \"snake\"))\ninsert(\" \")\nsleep(100ms)\n",
                    "os": ""
                },
                {
                    "name": "state return",
                    "command": "\" return \"",
                    "os": ""
                },
                {
                    "name": "return  <user.text> [over]",
                    "command": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n",
                    "os": ""
                },
                {
                    "name": "map of string to string",
                    "command": "\" map[string]string \"",
                    "os": ""
                },
                {
                    "name": "map of <user.text> [over]",
                    "command": "insert(\"map[\")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\nkey(\"right\")\nsleep(100ms)\n",
                    "os": ""
                },
                {
                    "name": "receive",
                    "command": "\" <- \"",
                    "os": ""
                },
                {
                    "name": "make",
                    "command": "\"make(\"",
                    "os": ""
                },
                {
                    "name": "loggers [<user.text>] [over]",
                    "command": "insert(\"logrus.\")\ninsert(user.formatted_text(text, \"PUBLIC_CAMEL_CASE\"))\n",
                    "os": ""
                },
                {
                    "name": "length <user.text> [over]",
                    "command": "insert(\"len(\")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n",
                    "os": ""
                },
                {
                    "name": "append <user.text> [over]",
                    "command": "insert(\"append(\")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n",
                    "os": ""
                },
                {
                    "name": "state (air | err)",
                    "command": "\"err\"",
                    "os": ""
                },
                {
                    "name": "error",
                    "command": "\" err \"",
                    "os": ""
                },
                {
                    "name": "loop over [<user.text>] [over]",
                    "command": "insert(\"forr \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n",
                    "os": ""
                },
                {
                    "name": "item <user.text> [over]",
                    "command": "insert(\", \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n",
                    "os": ""
                },
                {
                    "name": "value <user.text> [over]",
                    "command": "insert(\": \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n",
                    "os": ""
                },
                {
                    "name": "address of [<user.text>] [over]",
                    "command": "insert(\"&\")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n",
                    "os": ""
                },
                {
                    "name": "pointer to [<user.text>] [over]",
                    "command": "insert(\"*\")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n",
                    "os": ""
                },
                {
                    "name": "swipe [<user.text>] [over]",
                    "command": "key(\"right\")\ninsert(\", \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.lang.java.java",
            "pretty_name": "java",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.lang.java.java.talon",
            "pretty_name": "java",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "boxed [type] {user.java_boxed_types}",
                    "command": "insert(user.java_boxed_types)\nkey(\"space\")\n",
                    "os": ""
                },
                {
                    "name": "generic [type] {user.java_generic_data_structures}",
                    "command": "insert(java_generic_data_structures)\ninsert(\"<>\")\nkey(\"left\")\n\n# Arrays",
                    "os": ""
                },
                {
                    "name": "type {user.code_type} array",
                    "command": "insert(user.code_type)\nuser.code_operator_subscript()\n",
                    "os": ""
                },
                {
                    "name": "[state] {user.java_access_modifiers}",
                    "command": "insert(user.java_access_modifiers)\nkey(\"space\")\n",
                    "os": ""
                },
                {
                    "name": "[state] {user.java_modifiers}",
                    "command": "insert(user.java_modifiers)\nkey(\"space\")\n",
                    "os": ""
                },
                {
                    "name": "op array",
                    "command": "user.code_operator_subscript()\n",
                    "os": ""
                },
                {
                    "name": "op new",
                    "command": "insert(\"new \")\n\n# Methods",
                    "os": ""
                },
                {
                    "name": "method <user.text>",
                    "command": "user.code_default_function(text)",
                    "os": ""
                },
                {
                    "name": "pro method <user.text>",
                    "command": "user.code_protected_function(text)",
                    "os": ""
                },
                {
                    "name": "pub method <user.text>",
                    "command": "user.code_public_function(text)",
                    "os": ""
                },
                {
                    "name": "static method <user.text>",
                    "command": "user.code_private_static_function(text)",
                    "os": ""
                },
                {
                    "name": "pro static method <user.text>",
                    "command": "user.code_protected_static_function(text)",
                    "os": ""
                },
                {
                    "name": "pub static method <user.text>",
                    "command": "user.code_public_static_function(text)",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.lang.javascript.javascript",
            "pretty_name": "javascript",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.lang.javascript.javascript.talon",
            "pretty_name": "javascript",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "(op | is) strict equal",
                    "command": "\" === \"",
                    "os": ""
                },
                {
                    "name": "(op | is) strict not equal",
                    "command": "\" !== \"",
                    "os": ""
                },
                {
                    "name": "state const",
                    "command": "\"const \"",
                    "os": ""
                },
                {
                    "name": "state let",
                    "command": "\"let \"",
                    "os": ""
                },
                {
                    "name": "state var",
                    "command": "\"var \"",
                    "os": ""
                },
                {
                    "name": "state async",
                    "command": "\"async \"",
                    "os": ""
                },
                {
                    "name": "state await",
                    "command": "\"await \"",
                    "os": ""
                },
                {
                    "name": "state map",
                    "command": "insert(\".map()\")\nkey(left)\n",
                    "os": ""
                },
                {
                    "name": "state filter",
                    "command": "insert(\".filter()\")\nkey(left)\n",
                    "os": ""
                },
                {
                    "name": "state reduce",
                    "command": "insert(\".reduce()\")\nkey(left)\n",
                    "os": ""
                },
                {
                    "name": "state spread",
                    "command": "\"...\"",
                    "os": ""
                },
                {
                    "name": "funky <user.text>",
                    "command": "user.code_default_function(text)",
                    "os": ""
                },
                {
                    "name": "pro funky <user.text>",
                    "command": "user.code_protected_function(text)",
                    "os": ""
                },
                {
                    "name": "pub funky <user.text>",
                    "command": "user.code_public_function(text)",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.lang.markdown.markdown",
            "pretty_name": "markdown",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.lang.markdown.markdown.talon",
            "pretty_name": "markdown",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "level one",
                    "command": "\"# \"",
                    "os": ""
                },
                {
                    "name": "level two",
                    "command": "\"## \"",
                    "os": ""
                },
                {
                    "name": "level three",
                    "command": "\"### \"",
                    "os": ""
                },
                {
                    "name": "level four",
                    "command": "\"#### \"",
                    "os": ""
                },
                {
                    "name": "level five",
                    "command": "\"##### \"",
                    "os": ""
                },
                {
                    "name": "level six",
                    "command": "\"###### \"",
                    "os": ""
                },
                {
                    "name": "{user.markdown_code_block_language} block",
                    "command": "\"```{markdown_code_block_language}\"\nkey(enter:2)\n\"```\"\nkey(up)",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.lang.python.python",
            "pretty_name": "python",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.lang.python.python.talon",
            "pretty_name": "python",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "dunder in it",
                    "command": "\"__init__\"",
                    "os": ""
                },
                {
                    "name": "state (def | deaf | deft)",
                    "command": "\"def \"",
                    "os": ""
                },
                {
                    "name": "state try",
                    "command": "\"try:\\n\"",
                    "os": ""
                },
                {
                    "name": "state except",
                    "command": "\"except \"",
                    "os": ""
                },
                {
                    "name": "state raise",
                    "command": "\"raise \"",
                    "os": ""
                },
                {
                    "name": "self taught",
                    "command": "\"self.\"",
                    "os": ""
                },
                {
                    "name": "pie test",
                    "command": "\"pytest\"",
                    "os": ""
                },
                {
                    "name": "state past",
                    "command": "\"pass\"",
                    "os": ""
                },
                {
                    "name": "funky <user.text>",
                    "command": "user.code_default_function(text)",
                    "os": ""
                },
                {
                    "name": "pub funky <user.text>",
                    "command": "user.code_public_function(text)",
                    "os": ""
                },
                {
                    "name": "raise {user.python_exception}",
                    "command": "user.insert_cursor(\"raise {python_exception}([|])\")",
                    "os": ""
                },
                {
                    "name": "except {user.python_exception}",
                    "command": "\"except {python_exception}:\"",
                    "os": ""
                },
                {
                    "name": "dock {user.python_docstring_fields}",
                    "command": "insert(\"{python_docstring_fields}\")\nedit.left()",
                    "os": ""
                },
                {
                    "name": "dock type {user.code_type}",
                    "command": "user.insert_cursor(\":type [|]: {code_type}\")",
                    "os": ""
                },
                {
                    "name": "dock returns type {user.code_type}",
                    "command": "user.insert_cursor(\":rtype [|]: {code_type}\")",
                    "os": ""
                },
                {
                    "name": "toggle imports",
                    "command": "user.code_toggle_libraries()",
                    "os": ""
                },
                {
                    "name": "import <user.code_libraries>",
                    "command": "user.code_insert_library(code_libraries, \"\")\nkey(end enter)",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.lang.r.r",
            "pretty_name": "r",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.lang.r.r.talon",
            "pretty_name": "r",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "toggle library",
                    "command": "user.code_toggle_libraries()",
                    "os": ""
                },
                {
                    "name": "library <user.code_libraries>",
                    "command": "user.code_insert_library(code_libraries, \"\")\nkey(end enter)\n\n# R specific commands",
                    "os": ""
                },
                {
                    "name": "(chain|pipe that)",
                    "command": "key(end)\n\" %>%\"\nkey(enter)",
                    "os": ""
                },
                {
                    "name": "state na",
                    "command": "insert(\"NA\")\n",
                    "os": ""
                },
                {
                    "name": "function define <user.text>",
                    "command": "user.code_private_function(text)",
                    "os": ""
                },
                {
                    "name": "named arg {user.code_parameter_name}",
                    "command": "user.code_insert_named_argument(code_parameter_name)",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.lang.ruby.ruby",
            "pretty_name": "ruby",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.lang.ruby.ruby.talon",
            "pretty_name": "ruby",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "funky <user.text>",
                    "command": "user.code_default_function(text)",
                    "os": ""
                },
                {
                    "name": "args pipe",
                    "command": "insert(\"||\")\nkey(left)\n",
                    "os": ""
                },
                {
                    "name": "state do",
                    "command": "\"do \"",
                    "os": ""
                },
                {
                    "name": "state end",
                    "command": "\"end\"",
                    "os": ""
                },
                {
                    "name": "state begin",
                    "command": "\"begin\"",
                    "os": ""
                },
                {
                    "name": "state rescue",
                    "command": "\"rescue \"",
                    "os": ""
                },
                {
                    "name": "state module",
                    "command": "\"module \"",
                    "os": ""
                },
                {
                    "name": "instance <user.text>",
                    "command": "insert(\"@\")\nuser.code_public_variable_formatter(text)",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.lang.sql.sql.talon",
            "pretty_name": "sql",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "select",
                    "command": "\"SELECT \"",
                    "os": ""
                },
                {
                    "name": "star",
                    "command": "\"*\"",
                    "os": ""
                },
                {
                    "name": "from",
                    "command": "\"FROM \"",
                    "os": ""
                },
                {
                    "name": "select star from",
                    "command": "\"SELECT * FROM \"",
                    "os": ""
                },
                {
                    "name": "where",
                    "command": "\"WHERE \"",
                    "os": ""
                },
                {
                    "name": "order by",
                    "command": "\"ORDER BY \"",
                    "os": ""
                },
                {
                    "name": "descending",
                    "command": "\" DESC\"",
                    "os": ""
                },
                {
                    "name": "ascending",
                    "command": "\" ASC\"",
                    "os": ""
                },
                {
                    "name": "dot i d",
                    "command": "\".id\"",
                    "os": ""
                },
                {
                    "name": "is not null",
                    "command": "\" IS NOT NULL\"",
                    "os": ""
                },
                {
                    "name": "is null",
                    "command": "\" IS NULL\"",
                    "os": ""
                },
                {
                    "name": "inner join",
                    "command": "insert(\"INNER JOIN  ON \")\nkey(left)\nkey(left)\nkey(left)\nkey(left)",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.lang.tags.block_comment",
            "pretty_name": "block comment",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.lang.tags.block_comment.talon",
            "pretty_name": "block comment",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "block comment",
                    "command": "user.code_block_comment()",
                    "os": ""
                },
                {
                    "name": "block comment line",
                    "command": "#todo: this should probably be a single function once\n#.talon supports implementing actions with parameters?\nedit.line_start()\nuser.code_block_comment_prefix()\nkey(space)\nedit.line_end()\nkey(space)\nuser.code_block_comment_suffix()\n#adds comment to the start of the line",
                    "os": ""
                },
                {
                    "name": "block comment line <user.text> over",
                    "command": "#todo: this should probably be a single function once\n#.talon supports implementing actions with parameters?\nedit.line_start()\nuser.code_block_comment()\ninsert(user.text)",
                    "os": ""
                },
                {
                    "name": "block comment <user.text> over",
                    "command": "#todo: this should probably be a single function once\n#.talon supports implementing actions with parameters?\nuser.code_block_comment()\ninsert(user.text)",
                    "os": ""
                },
                {
                    "name": "block comment <user.text>",
                    "command": "#todo: this should probably be a single function once\n#.talon supports implementing actions with parameters?\nuser.code_block_comment()\ninsert(user.text)",
                    "os": ""
                },
                {
                    "name": "(line | inline) block comment <user.text> over",
                    "command": "#todo: this should probably be a single function once\n#.talon supports implementing actions with parameters?\nedit.line_end()\nuser.code_block_comment_prefix()\nkey(space)\ninsert(user.text)\nkey(space)\nuser.code_block_comment_suffix()",
                    "os": ""
                },
                {
                    "name": "(line | inline) block comment <user.text>",
                    "command": "#todo: this should probably be a single function once\n#.talon supports implementing actions with parameters?\nedit.line_end()\nuser.code_block_comment_prefix()\nkey(space)\ninsert(user.text)\nkey(space)\nuser.code_block_comment_suffix()",
                    "os": ""
                },
                {
                    "name": "open block comment",
                    "command": "user.code_block_comment_prefix()",
                    "os": ""
                },
                {
                    "name": "close block comment",
                    "command": "user.code_block_comment_suffix()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.lang.tags.comment",
            "pretty_name": "comment",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.lang.tags.comment.talon",
            "pretty_name": "comment",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "comment",
                    "command": "user.code_comment()",
                    "os": ""
                },
                {
                    "name": "comment line",
                    "command": "#todo: this should probably be a single function once\n#.talon supports implementing actions with parameters?\nedit.line_start()\nuser.code_comment()\n#adds comment to the start of the line",
                    "os": ""
                },
                {
                    "name": "comment line <user.text> over",
                    "command": "#todo: this should probably be a single function once\n#.talon supports implementing actions with parameters?\nedit.line_start()\nuser.code_comment()\ninsert(user.text)\ninsert(\" \")",
                    "os": ""
                },
                {
                    "name": "comment <user.text> over",
                    "command": "#todo: this should probably be a single function once\n#.talon supports implementing actions with parameters?\nuser.code_comment()\ninsert(user.text)",
                    "os": ""
                },
                {
                    "name": "comment <user.text>",
                    "command": "#todo: this should probably be a single function once\n#.talon supports implementing actions with parameters?\nuser.code_comment()\ninsert(user.text)",
                    "os": ""
                },
                {
                    "name": "(line | inline) comment <user.text> over",
                    "command": "#todo: this should probably be a single function once\n#.talon supports implementing actions with parameters?\nedit.line_end()\nuser.code_comment()\ninsert(user.text)",
                    "os": ""
                },
                {
                    "name": "(line | inline) comment <user.text>",
                    "command": "#todo: this should probably be a single function once\n#.talon supports implementing actions with parameters?\nedit.line_end()\nuser.code_comment()\ninsert(user.text)",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.lang.tags.generic",
            "pretty_name": "generic",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.lang.tags.generic.talon",
            "pretty_name": "generic",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "block",
                    "command": "user.code_block()",
                    "os": ""
                },
                {
                    "name": "is not (none|null)",
                    "command": "user.code_is_not_null()",
                    "os": ""
                },
                {
                    "name": "is (none|null)",
                    "command": "user.code_is_null()",
                    "os": ""
                },
                {
                    "name": "state if",
                    "command": "user.code_state_if()",
                    "os": ""
                },
                {
                    "name": "state else if",
                    "command": "user.code_state_else_if()",
                    "os": ""
                },
                {
                    "name": "state else",
                    "command": "user.code_state_else()",
                    "os": ""
                },
                {
                    "name": "state self",
                    "command": "user.code_self()",
                    "os": ""
                },
                {
                    "name": "self dot",
                    "command": "user.code_self()\ninsert(\".\")",
                    "os": ""
                },
                {
                    "name": "state while",
                    "command": "user.code_state_while()",
                    "os": ""
                },
                {
                    "name": "state for",
                    "command": "user.code_state_for()",
                    "os": ""
                },
                {
                    "name": "state for in",
                    "command": "user.code_state_for_each()",
                    "os": ""
                },
                {
                    "name": "state switch",
                    "command": "user.code_state_switch()",
                    "os": ""
                },
                {
                    "name": "state case",
                    "command": "user.code_state_case()",
                    "os": ""
                },
                {
                    "name": "state do",
                    "command": "user.code_state_do()",
                    "os": ""
                },
                {
                    "name": "state goto",
                    "command": "user.code_state_go_to()",
                    "os": ""
                },
                {
                    "name": "state return",
                    "command": "user.code_state_return()",
                    "os": ""
                },
                {
                    "name": "state import",
                    "command": "user.code_import()",
                    "os": ""
                },
                {
                    "name": "from import",
                    "command": "user.code_from_import()",
                    "os": ""
                },
                {
                    "name": "state class",
                    "command": "user.code_type_class()",
                    "os": ""
                },
                {
                    "name": "state include",
                    "command": "user.code_include()",
                    "os": ""
                },
                {
                    "name": "state include system",
                    "command": "user.code_include_system()",
                    "os": ""
                },
                {
                    "name": "state include local",
                    "command": "user.code_include_local()",
                    "os": ""
                },
                {
                    "name": "state type deaf",
                    "command": "user.code_type_definition()",
                    "os": ""
                },
                {
                    "name": "state type deaf struct",
                    "command": "user.code_typedef_struct()",
                    "os": ""
                },
                {
                    "name": "state (no | nil | null)",
                    "command": "user.code_null()",
                    "os": ""
                },
                {
                    "name": "state break",
                    "command": "user.code_break()",
                    "os": ""
                },
                {
                    "name": "state next",
                    "command": "user.code_next()",
                    "os": ""
                },
                {
                    "name": "state true",
                    "command": "user.code_true()",
                    "os": ""
                },
                {
                    "name": "state false",
                    "command": "user.code_false()",
                    "os": ""
                },
                {
                    "name": "toggle funk",
                    "command": "user.code_toggle_functions()",
                    "os": ""
                },
                {
                    "name": "funk <user.code_functions>",
                    "command": "user.code_insert_function(code_functions, \"\")",
                    "os": ""
                },
                {
                    "name": "funk cell <number>",
                    "command": "user.code_select_function(number - 1, \"\")",
                    "os": ""
                },
                {
                    "name": "funk wrap <user.code_functions>",
                    "command": "user.code_insert_function(code_functions, edit.selected_text())",
                    "os": ""
                },
                {
                    "name": "funk wrap <number>",
                    "command": "user.code_select_function(number - 1, edit.selected_text())",
                    "os": ""
                },
                {
                    "name": "dock string",
                    "command": "user.code_document_string()",
                    "os": ""
                },
                {
                    "name": "is type {user.code_type}",
                    "command": "user.code_insert_type_annotation(code_type)",
                    "os": ""
                },
                {
                    "name": "returns [type] {user.code_type}",
                    "command": "user.code_insert_return_type(code_type)",
                    "os": ""
                },
                {
                    "name": "type {user.code_type}",
                    "command": "insert(\"{code_type}\")",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.lang.tags.operators",
            "pretty_name": "operators",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.lang.tags.operators.talon",
            "pretty_name": "operators",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "op dereference",
                    "command": "user.code_operator_indirection()",
                    "os": ""
                },
                {
                    "name": "op address of",
                    "command": "user.code_operator_address_of()",
                    "os": ""
                },
                {
                    "name": "op arrow",
                    "command": "user.code_operator_structure_dereference()",
                    "os": ""
                },
                {
                    "name": "op lambda",
                    "command": "user.code_operator_lambda()",
                    "os": ""
                },
                {
                    "name": "op subscript",
                    "command": "user.code_operator_subscript()",
                    "os": ""
                },
                {
                    "name": "op (equals | assign)",
                    "command": "user.code_operator_assignment()",
                    "os": ""
                },
                {
                    "name": "op (minus | subtract)",
                    "command": "user.code_operator_subtraction()",
                    "os": ""
                },
                {
                    "name": "op (minus | subtract) equals",
                    "command": "user.code_operator_subtraction_assignment()",
                    "os": ""
                },
                {
                    "name": "op (plus | add)",
                    "command": "user.code_operator_addition()",
                    "os": ""
                },
                {
                    "name": "op (plus | add) equals",
                    "command": "user.code_operator_addition_assignment()",
                    "os": ""
                },
                {
                    "name": "op (times | multiply)",
                    "command": "user.code_operator_multiplication()",
                    "os": ""
                },
                {
                    "name": "op (times | multiply) equals",
                    "command": "user.code_operator_multiplication_assignment()",
                    "os": ""
                },
                {
                    "name": "op divide",
                    "command": "user.code_operator_division()",
                    "os": ""
                },
                {
                    "name": "op divide equals",
                    "command": "user.code_operator_division_assignment()",
                    "os": ""
                },
                {
                    "name": "op mod",
                    "command": "user.code_operator_modulo()",
                    "os": ""
                },
                {
                    "name": "op mod equals",
                    "command": "user.code_operator_modulo_assignment()",
                    "os": ""
                },
                {
                    "name": "(op (power | exponent) | to the power [of])",
                    "command": "user.code_operator_exponent()",
                    "os": ""
                },
                {
                    "name": "(op | is) equal",
                    "command": "user.code_operator_equal()",
                    "os": ""
                },
                {
                    "name": "(op | is) not equal",
                    "command": "user.code_operator_not_equal()",
                    "os": ""
                },
                {
                    "name": "(op | is) (greater | more)",
                    "command": "user.code_operator_greater_than()",
                    "os": ""
                },
                {
                    "name": "(op | is) (less | below) [than]",
                    "command": "user.code_operator_less_than()",
                    "os": ""
                },
                {
                    "name": "(op | is) greater [than] or equal",
                    "command": "user.code_operator_greater_than_or_equal_to()",
                    "os": ""
                },
                {
                    "name": "(op | is) less [than] or equal",
                    "command": "user.code_operator_less_than_or_equal_to()",
                    "os": ""
                },
                {
                    "name": "(op | is) in",
                    "command": "user.code_operator_in()",
                    "os": ""
                },
                {
                    "name": "(op | logical) and",
                    "command": "user.code_operator_and()",
                    "os": ""
                },
                {
                    "name": "(op | logical) or",
                    "command": "user.code_operator_or()",
                    "os": ""
                },
                {
                    "name": "[op] bitwise and",
                    "command": "user.code_operator_bitwise_and()",
                    "os": ""
                },
                {
                    "name": "[op] increment",
                    "command": "user.code_operator_increment()",
                    "os": ""
                },
                {
                    "name": "[op] bitwise or",
                    "command": "user.code_operator_bitwise_or()",
                    "os": ""
                },
                {
                    "name": "(op | logical | bitwise) (ex | exclusive) or",
                    "command": "user.code_operator_bitwise_exclusive_or()",
                    "os": ""
                },
                {
                    "name": "(op | logical | bitwise) (left shift | shift left)",
                    "command": "user.code_operator_bitwise_left_shift()",
                    "os": ""
                },
                {
                    "name": "(op | logical | bitwise) (right shift | shift right)",
                    "command": "user.code_operator_bitwise_right_shift()",
                    "os": ""
                },
                {
                    "name": "(op | logical | bitwise) (ex | exclusive) or equals",
                    "command": "user.code_operator_bitwise_exclusive_or_equals()",
                    "os": ""
                },
                {
                    "name": "[(op | logical | bitwise)] (left shift | shift left) equals",
                    "command": "user.code_operator_bitwise_left_shift_equals()",
                    "os": ""
                },
                {
                    "name": "[(op | logical | bitwise)] (left right | shift right) equals",
                    "command": "user.code_operator_bitwise_right_shift_equals()",
                    "os": ""
                },
                {
                    "name": "(op | pad) colon",
                    "command": "\" : \"",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.lang.talon.talon",
            "pretty_name": "talon",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.lang.talon.talon.1",
            "pretty_name": "1",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.lang.talon.talon.talon",
            "pretty_name": "talon",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "dot talon",
                    "command": "insert(\".talon\")",
                    "os": ""
                },
                {
                    "name": "action block",
                    "command": "insert(\"action():\")\nedit.left()\nedit.left()",
                    "os": ""
                },
                {
                    "name": "setting block",
                    "command": "insert(\"settings():\\n\\t\")",
                    "os": ""
                },
                {
                    "name": "setting {user.talon_settings}",
                    "command": "user.paste(\"{talon_settings} = \")\n#context requirements",
                    "os": ""
                },
                {
                    "name": "win require",
                    "command": "insert(\"os: windows\\n\")",
                    "os": ""
                },
                {
                    "name": "mac require",
                    "command": "insert(\"os: mac\\n\")",
                    "os": ""
                },
                {
                    "name": "linux require",
                    "command": "insert(\"os: linux\\n\")",
                    "os": ""
                },
                {
                    "name": "title require",
                    "command": "insert(\"win.title: \")",
                    "os": ""
                },
                {
                    "name": "application [require] [{user.talon_apps}]",
                    "command": "app = talon_apps or \"\"\nuser.paste(\"app: {app}\")",
                    "os": ""
                },
                {
                    "name": "mode require [{user.talon_modes}]",
                    "command": "mode = talon_modes or \"\"\nuser.paste(\"mode: {mode}\")",
                    "os": ""
                },
                {
                    "name": "tag require [{user.talon_tags}]",
                    "command": "tag = talon_tags or \"\"\nuser.paste(\"tag: {tag}\")",
                    "os": ""
                },
                {
                    "name": "tag set [{user.talon_tags}]",
                    "command": "tag = talon_tags or \"\"\nuser.paste(\"tag(): {tag}\")\n# requires user.talon_populate_lists tag. do not use with dragon",
                    "os": ""
                },
                {
                    "name": "list {user.talon_lists}",
                    "command": "\"{{{talon_lists}}}\"",
                    "os": ""
                },
                {
                    "name": "capture {user.talon_captures}",
                    "command": "\"<{talon_captures}>\"",
                    "os": ""
                },
                {
                    "name": "key <user.keys> over",
                    "command": "\"{keys}\"",
                    "os": ""
                },
                {
                    "name": "key <user.modifiers> over",
                    "command": "\"{modifiers}\"",
                    "os": ""
                },
                {
                    "name": "funk <user.code_functions>",
                    "command": "user.code_insert_function(code_functions, \"\")\n\n# all actions (requires uncommenting user.talon_populate_lists tag above)",
                    "os": ""
                },
                {
                    "name": "funk {user.talon_actions}",
                    "command": "user.code_insert_function(talon_actions, edit.selected_text())",
                    "os": ""
                },
                {
                    "name": "funk cell <number>",
                    "command": "user.code_select_function(number - 1, \"\")",
                    "os": ""
                },
                {
                    "name": "funk wrap <user.code_functions>",
                    "command": "user.code_insert_function(code_functions, edit.selected_text())",
                    "os": ""
                },
                {
                    "name": "funk wrap <number>",
                    "command": "user.code_select_function(number - 1, edit.selected_text())",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.lang.typescript.typescript",
            "pretty_name": "typescript",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.lang.typescript.typescript.talon",
            "pretty_name": "typescript",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "(op | is) strict equal",
                    "command": "\" === \"",
                    "os": ""
                },
                {
                    "name": "(op | is) strict not equal",
                    "command": "\" !== \"",
                    "os": ""
                },
                {
                    "name": "state const",
                    "command": "\"const \"",
                    "os": ""
                },
                {
                    "name": "state let",
                    "command": "\"let \"",
                    "os": ""
                },
                {
                    "name": "state var",
                    "command": "\"var \"",
                    "os": ""
                },
                {
                    "name": "state async",
                    "command": "\"async \"",
                    "os": ""
                },
                {
                    "name": "state await",
                    "command": "\"await \"",
                    "os": ""
                },
                {
                    "name": "state map",
                    "command": "insert(\".map()\")\nkey(left)\n",
                    "os": ""
                },
                {
                    "name": "state filter",
                    "command": "insert(\".filter()\")\nkey(left)\n",
                    "os": ""
                },
                {
                    "name": "state reduce",
                    "command": "insert(\".reduce()\")\nkey(left)\n",
                    "os": ""
                },
                {
                    "name": "state spread",
                    "command": "\"...\"",
                    "os": ""
                },
                {
                    "name": "funky <user.text>",
                    "command": "user.code_default_function(text)",
                    "os": ""
                },
                {
                    "name": "pro funky <user.text>",
                    "command": "user.code_protected_function(text)",
                    "os": ""
                },
                {
                    "name": "pub funky <user.text>",
                    "command": "user.code_public_function(text)",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.lang.vimscript.vimscript",
            "pretty_name": "vimscript",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.lang.vimscript.vimscript.talon",
            "pretty_name": "vimscript",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "assign [<user.vimscript_scope>] (variable|var) [<user.text>] [over]",
                    "command": "insert(\"let \")\ninsert(vimscript_scope or '')\nuser.code_private_variable_formatter(text)\n",
                    "os": ""
                },
                {
                    "name": "[<user.vimscript_scope>] (variable|var) [<user.text>] [over]",
                    "command": "insert(vimscript_scope or '')\nuser.code_private_variable_formatter(text)\n\n# see lang/vimscript/vimscript.py for list",
                    "os": ""
                },
                {
                    "name": "<user.vimscript_functions>",
                    "command": "insert(\"{vimscript_functions} \")\n\n# XXX - possibly overlap with some programming.talon",
                    "os": ""
                },
                {
                    "name": "state command",
                    "command": "\"command! \"",
                    "os": ""
                },
                {
                    "name": "state end if",
                    "command": "\"endif\"",
                    "os": ""
                },
                {
                    "name": "state end for",
                    "command": "\"endfor\"",
                    "os": ""
                },
                {
                    "name": "state end while",
                    "command": "\"endwhile\"",
                    "os": ""
                },
                {
                    "name": "state end function",
                    "command": "\"endfunction\"",
                    "os": ""
                },
                {
                    "name": "state continue",
                    "command": "\"continue\"",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.misc.abbreviate.talon",
            "pretty_name": "abbreviate",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "(abbreviate|abreviate|brief) {user.abbreviation}",
                    "command": "\"{abbreviation}\"",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.misc.cancel.talon",
            "pretty_name": "cancel",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "cancel cancel",
                    "command": "skip()",
                    "os": ""
                },
                {
                    "name": "ignore [<phrase>]",
                    "command": "app.notify(\"Command ignored\")",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.misc.datetimeinsert.talon",
            "pretty_name": "datetimeinsert",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "date insert",
                    "command": "insert(user.time_format(\"%Y-%m-%d\"))",
                    "os": ""
                },
                {
                    "name": "date insert UTC",
                    "command": "insert(user.time_format_utc(\"%Y-%m-%d\"))",
                    "os": ""
                },
                {
                    "name": "timestamp insert",
                    "command": "insert(user.time_format(\"%Y-%m-%d %H:%M:%S\"))",
                    "os": ""
                },
                {
                    "name": "timestamp insert high resolution",
                    "command": "insert(user.time_format(\"%Y-%m-%d %H:%M:%S.%f\"))",
                    "os": ""
                },
                {
                    "name": "timestamp insert UTC",
                    "command": "insert(user.time_format_utc(\"%Y-%m-%d %H:%M:%S\"))",
                    "os": ""
                },
                {
                    "name": "timestamp insert UTC high resolution",
                    "command": "insert(user.time_format_utc(\"%Y-%m-%d %H:%M:%S.%f\"))",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.misc.desktops.talon",
            "pretty_name": "desktops",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "desk <number_small>",
                    "command": "user.desktop(number_small)",
                    "os": ""
                },
                {
                    "name": "desk next",
                    "command": "user.desktop_next()",
                    "os": ""
                },
                {
                    "name": "desk last",
                    "command": "user.desktop_last()",
                    "os": ""
                },
                {
                    "name": "desk show",
                    "command": "user.desktop_show()",
                    "os": ""
                },
                {
                    "name": "window move desk <number>",
                    "command": "user.window_move_desktop(number)",
                    "os": ""
                },
                {
                    "name": "window move desk left",
                    "command": "user.window_move_desktop_left()",
                    "os": ""
                },
                {
                    "name": "window move desk right",
                    "command": "user.window_move_desktop_right()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.misc.extensions.talon",
            "pretty_name": "extensions",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "{user.file_extension}",
                    "command": "\"{file_extension}\"",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.misc.formatters.talon",
            "pretty_name": "formatters",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "phrase <user.text>",
                    "command": "user.insert_formatted(text, \"NOOP\")",
                    "os": ""
                },
                {
                    "name": "phrase <user.text> over",
                    "command": "user.insert_formatted(text, \"NOOP\")",
                    "os": ""
                },
                {
                    "name": "{user.prose_formatter} <user.prose>",
                    "command": "user.insert_formatted(prose, prose_formatter)",
                    "os": ""
                },
                {
                    "name": "{user.prose_formatter} <user.prose> over",
                    "command": "user.insert_formatted(prose, prose_formatter)",
                    "os": ""
                },
                {
                    "name": "<user.format_text>+",
                    "command": "user.insert_many(format_text_list)",
                    "os": ""
                },
                {
                    "name": "<user.format_text>+ over",
                    "command": "user.insert_many(format_text_list)",
                    "os": ""
                },
                {
                    "name": "<user.formatters> that",
                    "command": "user.formatters_reformat_selection(user.formatters)",
                    "os": ""
                },
                {
                    "name": "word <user.word>",
                    "command": "user.insert_formatted(user.word, \"NOOP\")",
                    "os": ""
                },
                {
                    "name": "recent list",
                    "command": "user.toggle_phrase_history()",
                    "os": ""
                },
                {
                    "name": "recent repeat <number_small>",
                    "command": "insert(user.get_recent_phrase(number_small))",
                    "os": ""
                },
                {
                    "name": "recent copy <number_small>",
                    "command": "clip.set_text(user.get_recent_phrase(number_small))",
                    "os": ""
                },
                {
                    "name": "select that",
                    "command": "user.select_last_phrase()",
                    "os": ""
                },
                {
                    "name": "before that",
                    "command": "user.before_last_phrase()",
                    "os": ""
                },
                {
                    "name": "nope that | scratch that",
                    "command": "user.clear_last_phrase()",
                    "os": ""
                },
                {
                    "name": "nope that was <user.formatters>",
                    "command": "user.formatters_reformat_last(formatters)",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.misc.git.talon",
            "pretty_name": "git",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "git add patch",
                    "command": "\"git add . -p\\n\"",
                    "os": ""
                },
                {
                    "name": "git add",
                    "command": "\"git add \"",
                    "os": ""
                },
                {
                    "name": "git add everything",
                    "command": "\"git add -u\\n\"",
                    "os": ""
                },
                {
                    "name": "git bisect",
                    "command": "\"git bisect \"",
                    "os": ""
                },
                {
                    "name": "git blame",
                    "command": "\"git blame \"",
                    "os": ""
                },
                {
                    "name": "git branch",
                    "command": "\"git branch \"",
                    "os": ""
                },
                {
                    "name": "git remote branches",
                    "command": "\"git branch --remote\\n\"",
                    "os": ""
                },
                {
                    "name": "git branch <user.text>",
                    "command": "\"git branch {text}\"",
                    "os": ""
                },
                {
                    "name": "git checkout",
                    "command": "\"git checkout \"",
                    "os": ""
                },
                {
                    "name": "git checkout master",
                    "command": "\"git checkout master\\n\"",
                    "os": ""
                },
                {
                    "name": "git checkout main",
                    "command": "\"git checkout main\\n\"",
                    "os": ""
                },
                {
                    "name": "git checkout <user.text>",
                    "command": "\"git checkout {text}\"",
                    "os": ""
                },
                {
                    "name": "git cherry pick",
                    "command": "\"git cherry-pick \"",
                    "os": ""
                },
                {
                    "name": "git cherry pick continue",
                    "command": "\"git cherry-pick --continue \"",
                    "os": ""
                },
                {
                    "name": "git cherry pick abort",
                    "command": "\"git cherry-pick --abort \"",
                    "os": ""
                },
                {
                    "name": "git cherry pick skip",
                    "command": "\"git cherry-pick --skip \"",
                    "os": ""
                },
                {
                    "name": "git clone",
                    "command": "\"git clone \"",
                    "os": ""
                },
                {
                    "name": "git clean everything",
                    "command": "\"git clean -dfx\"",
                    "os": ""
                },
                {
                    "name": "git commit message <user.text>",
                    "command": "\"git commit -m '{text}'\"",
                    "os": ""
                },
                {
                    "name": "git commit",
                    "command": "\"git commit\\n\"",
                    "os": ""
                },
                {
                    "name": "git diff (colour|color) words",
                    "command": "\"git diff --color-words \"",
                    "os": ""
                },
                {
                    "name": "git diff",
                    "command": "\"git diff \"",
                    "os": ""
                },
                {
                    "name": "git diff cached",
                    "command": "\"git diff --cached\\n\"",
                    "os": ""
                },
                {
                    "name": "git fetch",
                    "command": "\"git fetch\\n\"",
                    "os": ""
                },
                {
                    "name": "git fetch all",
                    "command": "\"git fetch --all\\n\"",
                    "os": ""
                },
                {
                    "name": "git fetch <user.text>",
                    "command": "\"git fetch {text}\"",
                    "os": ""
                },
                {
                    "name": "git fetch prune",
                    "command": "\"git fetch --prune\\n\"",
                    "os": ""
                },
                {
                    "name": "git in it",
                    "command": "\"git init\\n\"",
                    "os": ""
                },
                {
                    "name": "git log all",
                    "command": "\"git log\\n\"",
                    "os": ""
                },
                {
                    "name": "git log all changes",
                    "command": "\"git log -c\\n\"",
                    "os": ""
                },
                {
                    "name": "git log",
                    "command": "\"git log \"",
                    "os": ""
                },
                {
                    "name": "git log changes",
                    "command": "\"git log -c \"",
                    "os": ""
                },
                {
                    "name": "git merge",
                    "command": "\"git merge \"",
                    "os": ""
                },
                {
                    "name": "git merge <user.text>",
                    "command": "\"git merge {text}\"",
                    "os": ""
                },
                {
                    "name": "git move",
                    "command": "\"git mv \"",
                    "os": ""
                },
                {
                    "name": "git pull",
                    "command": "\"git pull\\n\"",
                    "os": ""
                },
                {
                    "name": "git pull origin",
                    "command": "\"git pull origin \"",
                    "os": ""
                },
                {
                    "name": "git pull rebase",
                    "command": "\"git pull --rebase\\n\"",
                    "os": ""
                },
                {
                    "name": "git pull fast forward",
                    "command": "\"git pull --ff-only\\n\"",
                    "os": ""
                },
                {
                    "name": "git pull <user.text>",
                    "command": "\"git pull {text} \"",
                    "os": ""
                },
                {
                    "name": "git push",
                    "command": "\"git push\\n\"",
                    "os": ""
                },
                {
                    "name": "git push origin",
                    "command": "\"git push origin \"",
                    "os": ""
                },
                {
                    "name": "git push up stream origin",
                    "command": "\"git push -u origin\"",
                    "os": ""
                },
                {
                    "name": "git push <user.text>",
                    "command": "\"git push {text} \"",
                    "os": ""
                },
                {
                    "name": "git push tags",
                    "command": "\"git push --tags\\n\"",
                    "os": ""
                },
                {
                    "name": "git rebase",
                    "command": "\"git rebase\\n\"",
                    "os": ""
                },
                {
                    "name": "git rebase continue",
                    "command": "\"git rebase --continue\"",
                    "os": ""
                },
                {
                    "name": "git rebase skip",
                    "command": "\"git rebase --skip\"",
                    "os": ""
                },
                {
                    "name": "git remove",
                    "command": "\"git rm \"",
                    "os": ""
                },
                {
                    "name": "git (remove|delete) branch",
                    "command": "\"git branch -d \"",
                    "os": ""
                },
                {
                    "name": "git (remove|delete) remote branch",
                    "command": "\"git push --delete origin \"",
                    "os": ""
                },
                {
                    "name": "git reset",
                    "command": "\"git reset \"",
                    "os": ""
                },
                {
                    "name": "git reset soft",
                    "command": "\"git reset --soft \"",
                    "os": ""
                },
                {
                    "name": "git reset hard",
                    "command": "\"git reset --hard \"",
                    "os": ""
                },
                {
                    "name": "git restore",
                    "command": "\"git restore \"",
                    "os": ""
                },
                {
                    "name": "git restore staged",
                    "command": "\"git restore --staged \"",
                    "os": ""
                },
                {
                    "name": "git restore source",
                    "command": "\"git restore --source=\"",
                    "os": ""
                },
                {
                    "name": "git remote",
                    "command": "\"git remote \"",
                    "os": ""
                },
                {
                    "name": "git remote add",
                    "command": "\"git remote add \"",
                    "os": ""
                },
                {
                    "name": "git remote add upstream",
                    "command": "\"git remote add upstream \"",
                    "os": ""
                },
                {
                    "name": "git remote remove",
                    "command": "\"git remote remove \"",
                    "os": ""
                },
                {
                    "name": "git remote show origin",
                    "command": "\"git remote show origin\\n\"",
                    "os": ""
                },
                {
                    "name": "git show",
                    "command": "\"git show \"",
                    "os": ""
                },
                {
                    "name": "git stash pop",
                    "command": "\"git stash pop\\n\"",
                    "os": ""
                },
                {
                    "name": "git stash",
                    "command": "\"git stash\\n\"",
                    "os": ""
                },
                {
                    "name": "git stash apply",
                    "command": "\"git stash apply\\n\"",
                    "os": ""
                },
                {
                    "name": "git stash list",
                    "command": "\"git stash list\\n\"",
                    "os": ""
                },
                {
                    "name": "git stash show",
                    "command": "\"git stash show\"",
                    "os": ""
                },
                {
                    "name": "git status",
                    "command": "\"git status\\n\"",
                    "os": ""
                },
                {
                    "name": "git switch [<user.text>]",
                    "command": "\"git switch {user.formatted_text(text or '', 'DASH_SEPARATED')}\"",
                    "os": ""
                },
                {
                    "name": "git switch master",
                    "command": "\"git switch master \"",
                    "os": ""
                },
                {
                    "name": "git switch main",
                    "command": "\"git switch main \"",
                    "os": ""
                },
                {
                    "name": "git switch detached",
                    "command": "\"git switch --detach \"",
                    "os": ""
                },
                {
                    "name": "git (switch create | new branch) [<user.text>]",
                    "command": "\"git switch -c {user.formatted_text(text or '', 'DASH_SEPARATED')}\"",
                    "os": ""
                },
                {
                    "name": "git switch orphan",
                    "command": "\"git switch --orphan \"",
                    "os": ""
                },
                {
                    "name": "git submodule add",
                    "command": "\"git submodule add \"",
                    "os": ""
                },
                {
                    "name": "git tag",
                    "command": "\"git tag \"",
                    "os": ""
                },
                {
                    "name": "git edit config",
                    "command": "\"git config --local -e\\n\"",
                    "os": ""
                },
                {
                    "name": "git clone clipboard",
                    "command": "insert(\"git clone \")\nedit.paste()\nkey(enter)",
                    "os": ""
                },
                {
                    "name": "git diff highlighted",
                    "command": "edit.copy()\ninsert(\"git diff \")\nedit.paste()\nkey(enter)",
                    "os": ""
                },
                {
                    "name": "git diff clipboard",
                    "command": "insert(\"git diff \")\nedit.paste()\nkey(enter)",
                    "os": ""
                },
                {
                    "name": "git add highlighted",
                    "command": "edit.copy()\ninsert(\"git add \")\nedit.paste()\nkey(enter)",
                    "os": ""
                },
                {
                    "name": "git add clipboard",
                    "command": "insert(\"git add \")\nedit.paste()\nkey(enter)",
                    "os": ""
                },
                {
                    "name": "git commit highlighted",
                    "command": "edit.copy()\ninsert(\"git add \")\nedit.paste()\ninsert(\"\\ngit commit\\n\")",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.misc.git_add_patch.talon",
            "pretty_name": "git add patch",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "yank",
                    "command": "key(y)\nkey(enter)",
                    "os": ""
                },
                {
                    "name": "near",
                    "command": "key(n)\nkey(enter)",
                    "os": ""
                },
                {
                    "name": "quench",
                    "command": "key(q)\nkey(enter)",
                    "os": ""
                },
                {
                    "name": "drum",
                    "command": "key(d)\nkey(enter)",
                    "os": ""
                },
                {
                    "name": "air",
                    "command": "key(a)\nkey(enter)",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.misc.help.talon",
            "pretty_name": "help",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "help alphabet",
                    "command": "user.help_list(\"user.letter\")",
                    "os": ""
                },
                {
                    "name": "help symbols",
                    "command": "user.help_list(\"user.symbol_key\")",
                    "os": ""
                },
                {
                    "name": "help numbers",
                    "command": "user.help_list(\"user.number_key\")",
                    "os": ""
                },
                {
                    "name": "help punctuation",
                    "command": "user.help_list(\"user.punctuation\")",
                    "os": ""
                },
                {
                    "name": "help modifier",
                    "command": "user.help_list(\"user.modifier_key\")",
                    "os": ""
                },
                {
                    "name": "help special keys",
                    "command": "user.help_list(\"user.special_key\")",
                    "os": ""
                },
                {
                    "name": "help function keys",
                    "command": "user.help_list(\"user.function_key\")",
                    "os": ""
                },
                {
                    "name": "help arrows",
                    "command": "user.help_list(\"user.arrow_key\")",
                    "os": ""
                },
                {
                    "name": "(help formatters | help format | format help)",
                    "command": "user.help_formatters(user.get_formatters_words())",
                    "os": ""
                },
                {
                    "name": "help context",
                    "command": "user.help_context()",
                    "os": ""
                },
                {
                    "name": "help active",
                    "command": "user.help_context_enabled()",
                    "os": ""
                },
                {
                    "name": "help search <user.text>",
                    "command": "user.help_search(text)",
                    "os": ""
                },
                {
                    "name": "help context {user.help_contexts}",
                    "command": "user.help_selected_context(help_contexts)",
                    "os": ""
                },
                {
                    "name": "help help",
                    "command": "user.help_search(\"help\")",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.misc.help_open.talon",
            "pretty_name": "help open",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "help next",
                    "command": "user.help_next()",
                    "os": ""
                },
                {
                    "name": "help previous",
                    "command": "user.help_previous()",
                    "os": ""
                },
                {
                    "name": "help <number>",
                    "command": "user.help_select_index(number - 1)",
                    "os": ""
                },
                {
                    "name": "help return",
                    "command": "user.help_return()",
                    "os": ""
                },
                {
                    "name": "help close",
                    "command": "user.help_hide()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.misc.history.talon",
            "pretty_name": "history",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "command history",
                    "command": "user.history_toggle()",
                    "os": ""
                },
                {
                    "name": "command history clear",
                    "command": "user.history_clear()",
                    "os": ""
                },
                {
                    "name": "command history less",
                    "command": "user.history_less()",
                    "os": ""
                },
                {
                    "name": "command history more",
                    "command": "user.history_more()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.misc.keys.talon",
            "pretty_name": "keys",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "go <user.arrow_keys>",
                    "command": "key(arrow_keys)",
                    "os": ""
                },
                {
                    "name": "<user.letter>",
                    "command": "key(letter)",
                    "os": ""
                },
                {
                    "name": "(ship | uppercase) <user.letters> [(lowercase | sunk)]",
                    "command": "user.insert_formatted(letters, \"ALL_CAPS\")",
                    "os": ""
                },
                {
                    "name": "<user.symbol_key>",
                    "command": "key(symbol_key)",
                    "os": ""
                },
                {
                    "name": "<user.function_key>",
                    "command": "key(function_key)",
                    "os": ""
                },
                {
                    "name": "<user.special_key>",
                    "command": "key(special_key)",
                    "os": ""
                },
                {
                    "name": "<user.modifiers> <user.unmodified_key>",
                    "command": "key(\"{modifiers}-{unmodified_key}\")",
                    "os": ""
                },
                {
                    "name": "press <user.modifiers>",
                    "command": "key(modifiers)",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.misc.macro.talon",
            "pretty_name": "macro",
            "os": "mac",
            "raw_commands": [],
            "commands": [
                {
                    "name": "macro record",
                    "command": "user.macro_record()",
                    "os": "mac"
                },
                {
                    "name": "macro stop",
                    "command": "user.macro_stop()",
                    "os": "mac"
                },
                {
                    "name": "macro play",
                    "command": "user.macro_play()",
                    "os": "mac"
                }
            ]
        },
        {
            "name": "user.knausj_talon.misc.media.talon",
            "pretty_name": "media",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "volume up",
                    "command": "key(volup)",
                    "os": ""
                },
                {
                    "name": "volume down",
                    "command": "key(voldown)",
                    "os": ""
                },
                {
                    "name": "set volume <number>",
                    "command": "user.media_set_volume(number)",
                    "os": ""
                },
                {
                    "name": "(volume|media) mute",
                    "command": "key(mute)",
                    "os": ""
                },
                {
                    "name": "[media] play next",
                    "command": "key(next)",
                    "os": ""
                },
                {
                    "name": "[media] play previous",
                    "command": "key(prev)",
                    "os": ""
                },
                {
                    "name": "media (play | pause)",
                    "command": "user.play_pause()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.misc.messaging.talon",
            "pretty_name": "messaging",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "previous (workspace | server)",
                    "command": "user.messaging_workspace_previous()",
                    "os": ""
                },
                {
                    "name": "next (workspace | server)",
                    "command": "user.messaging_workspace_next()",
                    "os": ""
                },
                {
                    "name": "channel",
                    "command": "user.messaging_open_channel_picker()",
                    "os": ""
                },
                {
                    "name": "channel <user.text>",
                    "command": "user.messaging_open_channel_picker()\ninsert(user.formatted_text(user.text, \"ALL_LOWERCASE\"))",
                    "os": ""
                },
                {
                    "name": "channel up",
                    "command": "user.messaging_channel_previous()",
                    "os": ""
                },
                {
                    "name": "channel down",
                    "command": "user.messaging_channel_next()",
                    "os": ""
                },
                {
                    "name": "([channel] unread last | gopreev)",
                    "command": "user.messaging_unread_previous()",
                    "os": ""
                },
                {
                    "name": "([channel] unread next | goneck)",
                    "command": "user.messaging_unread_next()",
                    "os": ""
                },
                {
                    "name": "go (find | search)",
                    "command": "user.messaging_open_search()",
                    "os": ""
                },
                {
                    "name": "mark (all | workspace | server) read",
                    "command": "user.messaging_mark_workspace_read()",
                    "os": ""
                },
                {
                    "name": "mark channel read",
                    "command": "user.messaging_mark_channel_read()",
                    "os": ""
                },
                {
                    "name": "upload file",
                    "command": "user.messaging_upload_file()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.misc.microphone_selection.talon",
            "pretty_name": "microphone selection",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "microphone show",
                    "command": "user.microphone_selection_toggle()",
                    "os": ""
                },
                {
                    "name": "microphone pick <number_small>",
                    "command": "user.microphone_select(number_small)",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.misc.mouse.talon",
            "pretty_name": "mouse",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "control mouse",
                    "command": "user.mouse_toggle_control_mouse()",
                    "os": ""
                },
                {
                    "name": "zoom mouse",
                    "command": "user.mouse_toggle_zoom_mouse()",
                    "os": ""
                },
                {
                    "name": "camera overlay",
                    "command": "user.mouse_toggle_camera_overlay()",
                    "os": ""
                },
                {
                    "name": "run calibration",
                    "command": "user.mouse_calibrate()",
                    "os": ""
                },
                {
                    "name": "touch",
                    "command": "mouse_click(0)\n# close the mouse grid if open\nuser.grid_close()\n# End any open drags\n# Touch automatically ends left drags so this is for right drags specifically\nuser.mouse_drag_end()\n",
                    "os": ""
                },
                {
                    "name": "righty",
                    "command": "mouse_click(1)\n# close the mouse grid if open\nuser.grid_close()\n",
                    "os": ""
                },
                {
                    "name": "midclick",
                    "command": "mouse_click(2)\n# close the mouse grid\nuser.grid_close()\n\n#see keys.py for modifiers.\n#defaults\n#command\n#control\n#option = alt\n#shift\n#super = windows key",
                    "os": ""
                },
                {
                    "name": "<user.modifiers> touch",
                    "command": "key(\"{modifiers}:down\")\nmouse_click(0)\nkey(\"{modifiers}:up\")\n# close the mouse grid\nuser.grid_close()",
                    "os": ""
                },
                {
                    "name": "<user.modifiers> righty",
                    "command": "key(\"{modifiers}:down\")\nmouse_click(1)\nkey(\"{modifiers}:up\")\n# close the mouse grid\nuser.grid_close()",
                    "os": ""
                },
                {
                    "name": "(dubclick | duke)",
                    "command": "mouse_click()\nmouse_click()\n# close the mouse grid\nuser.grid_close()",
                    "os": ""
                },
                {
                    "name": "(tripclick | triplick)",
                    "command": "mouse_click()\nmouse_click()\nmouse_click()\n# close the mouse grid\nuser.grid_close()",
                    "os": ""
                },
                {
                    "name": "left drag | drag",
                    "command": "user.mouse_drag(0)\n# close the mouse grid\nuser.grid_close()",
                    "os": ""
                },
                {
                    "name": "right drag | righty drag",
                    "command": "user.mouse_drag(1)\n# close the mouse grid\nuser.grid_close()",
                    "os": ""
                },
                {
                    "name": "end drag | drag end",
                    "command": "user.mouse_drag_end()",
                    "os": ""
                },
                {
                    "name": "wheel down",
                    "command": "user.mouse_scroll_down()",
                    "os": ""
                },
                {
                    "name": "wheel down here",
                    "command": "user.mouse_move_center_active_window()\nuser.mouse_scroll_down()",
                    "os": ""
                },
                {
                    "name": "wheel tiny [down]",
                    "command": "user.mouse_scroll_down(0.2)",
                    "os": ""
                },
                {
                    "name": "wheel tiny [down] here",
                    "command": "user.mouse_move_center_active_window()\nuser.mouse_scroll_down(0.2)",
                    "os": ""
                },
                {
                    "name": "wheel downer",
                    "command": "user.mouse_scroll_down_continuous()",
                    "os": ""
                },
                {
                    "name": "wheel downer here",
                    "command": "user.mouse_move_center_active_window()\nuser.mouse_scroll_down_continuous()",
                    "os": ""
                },
                {
                    "name": "wheel up",
                    "command": "user.mouse_scroll_up()",
                    "os": ""
                },
                {
                    "name": "wheel up here",
                    "command": "user.mouse_move_center_active_window()\nuser.mouse_scroll_up()",
                    "os": ""
                },
                {
                    "name": "wheel tiny up",
                    "command": "user.mouse_scroll_up(0.2)",
                    "os": ""
                },
                {
                    "name": "wheel tiny up here",
                    "command": "user.mouse_move_center_active_window()\nuser.mouse_scroll_up(0.2)",
                    "os": ""
                },
                {
                    "name": "wheel upper",
                    "command": "user.mouse_scroll_up_continuous()",
                    "os": ""
                },
                {
                    "name": "wheel upper here",
                    "command": "user.mouse_move_center_active_window()\nuser.mouse_scroll_up_continuous()",
                    "os": ""
                },
                {
                    "name": "wheel gaze",
                    "command": "user.mouse_gaze_scroll()",
                    "os": ""
                },
                {
                    "name": "wheel gaze here",
                    "command": "user.mouse_move_center_active_window()\nuser.mouse_gaze_scroll()",
                    "os": ""
                },
                {
                    "name": "wheel stop",
                    "command": "user.mouse_scroll_stop()",
                    "os": ""
                },
                {
                    "name": "wheel stop here",
                    "command": "user.mouse_move_center_active_window()\nuser.mouse_scroll_stop()",
                    "os": ""
                },
                {
                    "name": "wheel left",
                    "command": "user.mouse_scroll_left()",
                    "os": ""
                },
                {
                    "name": "wheel left here",
                    "command": "user.mouse_move_center_active_window()\nuser.mouse_scroll_left()",
                    "os": ""
                },
                {
                    "name": "wheel tiny left",
                    "command": "user.mouse_scroll_left(0.5)",
                    "os": ""
                },
                {
                    "name": "wheel tiny left here",
                    "command": "user.mouse_move_center_active_window()\nuser.mouse_scroll_left(0.5)",
                    "os": ""
                },
                {
                    "name": "wheel right",
                    "command": "user.mouse_scroll_right()",
                    "os": ""
                },
                {
                    "name": "wheel right here",
                    "command": "user.mouse_move_center_active_window()\nuser.mouse_scroll_right()",
                    "os": ""
                },
                {
                    "name": "wheel tiny right",
                    "command": "user.mouse_scroll_right(0.5)",
                    "os": ""
                },
                {
                    "name": "wheel tiny right here",
                    "command": "user.mouse_move_center_active_window()\nuser.mouse_scroll_right(0.5)",
                    "os": ""
                },
                {
                    "name": "curse yes",
                    "command": "user.mouse_show_cursor()",
                    "os": ""
                },
                {
                    "name": "curse no",
                    "command": "user.mouse_hide_cursor()",
                    "os": ""
                },
                {
                    "name": "copy mouse position",
                    "command": "user.copy_mouse_position()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.misc.multiple_cursors.talon",
            "pretty_name": "multiple cursors",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "cursor multiple",
                    "command": "user.multi_cursor_enable()",
                    "os": ""
                },
                {
                    "name": "cursor stop",
                    "command": "user.multi_cursor_disable()",
                    "os": ""
                },
                {
                    "name": "cursor up",
                    "command": "user.multi_cursor_add_above()",
                    "os": ""
                },
                {
                    "name": "cursor down",
                    "command": "user.multi_cursor_add_below()",
                    "os": ""
                },
                {
                    "name": "cursor less",
                    "command": "user.multi_cursor_select_fewer_occurrences()",
                    "os": ""
                },
                {
                    "name": "cursor more",
                    "command": "user.multi_cursor_select_more_occurrences()",
                    "os": ""
                },
                {
                    "name": "cursor skip",
                    "command": "user.multi_cursor_skip_occurrence()",
                    "os": ""
                },
                {
                    "name": "cursor all",
                    "command": "user.multi_cursor_select_all_occurrences()",
                    "os": ""
                },
                {
                    "name": "cursor lines",
                    "command": "user.multi_cursor_add_to_line_ends()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.misc.repeater.talon",
            "pretty_name": "repeater",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "<user.ordinals>",
                    "command": "core.repeat_command(ordinals-1)",
                    "os": ""
                },
                {
                    "name": "<number_small> times",
                    "command": "core.repeat_command(number_small-1)",
                    "os": ""
                },
                {
                    "name": "(repeat that|twice)",
                    "command": "core.repeat_command(1)",
                    "os": ""
                },
                {
                    "name": "repeat that <number_small> [times]",
                    "command": "core.repeat_command(number_small)",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.misc.screens.talon",
            "pretty_name": "screens",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "screen numbers",
                    "command": "user.screens_show_numbering()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.misc.screenshot.talon",
            "pretty_name": "screenshot",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "grab screen",
                    "command": "user.screenshot()",
                    "os": ""
                },
                {
                    "name": "grab screen <number_small>",
                    "command": "user.screenshot(number_small)",
                    "os": ""
                },
                {
                    "name": "grab window",
                    "command": "user.screenshot_window()",
                    "os": ""
                },
                {
                    "name": "grab selection",
                    "command": "user.screenshot_selection()",
                    "os": ""
                },
                {
                    "name": "grab screen clip",
                    "command": "user.screenshot_clipboard()",
                    "os": ""
                },
                {
                    "name": "grab screen <number_small> clip",
                    "command": "user.screenshot_clipboard(number_small)",
                    "os": ""
                },
                {
                    "name": "grab window clip",
                    "command": "user.screenshot_window_clipboard()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.misc.splits.talon",
            "pretty_name": "splits",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "split right",
                    "command": "user.split_window_right()",
                    "os": ""
                },
                {
                    "name": "split left",
                    "command": "user.split_window_left()",
                    "os": ""
                },
                {
                    "name": "split down",
                    "command": "user.split_window_down()",
                    "os": ""
                },
                {
                    "name": "split up",
                    "command": "user.split_window_up()",
                    "os": ""
                },
                {
                    "name": "split (vertically | vertical)",
                    "command": "user.split_window_vertically()",
                    "os": ""
                },
                {
                    "name": "split (horizontally | horizontal)",
                    "command": "user.split_window_horizontally()",
                    "os": ""
                },
                {
                    "name": "split flip",
                    "command": "user.split_flip()",
                    "os": ""
                },
                {
                    "name": "split window",
                    "command": "user.split_window()",
                    "os": ""
                },
                {
                    "name": "split clear",
                    "command": "user.split_clear()",
                    "os": ""
                },
                {
                    "name": "split clear all",
                    "command": "user.split_clear_all()",
                    "os": ""
                },
                {
                    "name": "split next",
                    "command": "user.split_next()",
                    "os": ""
                },
                {
                    "name": "split last",
                    "command": "user.split_last()",
                    "os": ""
                },
                {
                    "name": "go split <number>",
                    "command": "user.split_number(number)",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.misc.standard.talon",
            "pretty_name": "standard",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "zoom in",
                    "command": "edit.zoom_in()",
                    "os": ""
                },
                {
                    "name": "zoom out",
                    "command": "edit.zoom_out()",
                    "os": ""
                },
                {
                    "name": "scroll up",
                    "command": "edit.page_up()",
                    "os": ""
                },
                {
                    "name": "scroll down",
                    "command": "edit.page_down()",
                    "os": ""
                },
                {
                    "name": "copy that",
                    "command": "edit.copy()",
                    "os": ""
                },
                {
                    "name": "cut that",
                    "command": "edit.cut()",
                    "os": ""
                },
                {
                    "name": "paste that",
                    "command": "edit.paste()",
                    "os": ""
                },
                {
                    "name": "undo that",
                    "command": "edit.undo()",
                    "os": ""
                },
                {
                    "name": "redo that",
                    "command": "edit.redo()",
                    "os": ""
                },
                {
                    "name": "paste match",
                    "command": "edit.paste_match_style()",
                    "os": ""
                },
                {
                    "name": "file save",
                    "command": "edit.save()",
                    "os": ""
                },
                {
                    "name": "wipe",
                    "command": "key(backspace)",
                    "os": ""
                },
                {
                    "name": "(pad | padding)",
                    "command": "insert(\"  \")\nkey(left)",
                    "os": ""
                },
                {
                    "name": "slap",
                    "command": "edit.line_insert_down()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.misc.tabs.talon",
            "pretty_name": "tabs",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "tab (open | new)",
                    "command": "app.tab_open()",
                    "os": ""
                },
                {
                    "name": "tab (last | previous)",
                    "command": "app.tab_previous()",
                    "os": ""
                },
                {
                    "name": "tab next",
                    "command": "app.tab_next()",
                    "os": ""
                },
                {
                    "name": "tab close",
                    "command": "user.tab_close_wrapper()",
                    "os": ""
                },
                {
                    "name": "tab (reopen|restore)",
                    "command": "app.tab_reopen()",
                    "os": ""
                },
                {
                    "name": "go tab <number>",
                    "command": "user.tab_jump(number)",
                    "os": ""
                },
                {
                    "name": "go tab final",
                    "command": "user.tab_final()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.misc.talon_helpers.talon",
            "pretty_name": "talon helpers",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "talon check updates",
                    "command": "menu.check_for_updates()",
                    "os": ""
                },
                {
                    "name": "talon open log",
                    "command": "menu.open_log()",
                    "os": ""
                },
                {
                    "name": "talon open rebel",
                    "command": "menu.open_repl()",
                    "os": ""
                },
                {
                    "name": "talon home",
                    "command": "menu.open_talon_home()",
                    "os": ""
                },
                {
                    "name": "talon copy context pie",
                    "command": "user.talon_add_context_clipboard_python()",
                    "os": ""
                },
                {
                    "name": "talon copy context",
                    "command": "user.talon_add_context_clipboard()",
                    "os": ""
                },
                {
                    "name": "talon copy name",
                    "command": "name = app.name()\nclip.set_text(name)",
                    "os": ""
                },
                {
                    "name": "talon copy executable",
                    "command": "executable = app.executable()\nclip.set_text(executable)",
                    "os": ""
                },
                {
                    "name": "talon copy bundle",
                    "command": "bundle = app.bundle()\nclip.set_text(bundle)",
                    "os": ""
                },
                {
                    "name": "talon copy title",
                    "command": "title = win.title()\nclip.set_text(title)",
                    "os": ""
                },
                {
                    "name": "talon dump version",
                    "command": "result = user.talon_version_info()\nprint(result)",
                    "os": ""
                },
                {
                    "name": "talon insert version",
                    "command": "result = user.talon_version_info()\nuser.paste(result)",
                    "os": ""
                },
                {
                    "name": "talon dump context",
                    "command": "result = user.talon_get_active_context()\nprint(result)",
                    "os": ""
                },
                {
                    "name": "talon test last",
                    "command": "phrase = user.history_get(1)\nuser.talon_sim_phrase(phrase)",
                    "os": ""
                },
                {
                    "name": "talon test numb <number_small>",
                    "command": "phrase = user.history_get(number_small)\nuser.talon_sim_phrase(phrase)",
                    "os": ""
                },
                {
                    "name": "talon test <phrase>",
                    "command": "user.talon_sim_phrase(phrase)",
                    "os": ""
                },
                {
                    "name": "talon debug action {user.talon_actions}",
                    "command": "user.talon_action_find(\"{user.talon_actions}\")",
                    "os": ""
                },
                {
                    "name": "talon debug list {user.talon_lists}",
                    "command": "user.talon_debug_list(talon_lists)",
                    "os": ""
                },
                {
                    "name": "talon copy list {user.talon_lists}",
                    "command": "user.talon_copy_list(talon_lists)",
                    "os": ""
                },
                {
                    "name": "talon debug tags",
                    "command": "user.talon_debug_tags()",
                    "os": ""
                },
                {
                    "name": "talon debug modes",
                    "command": "user.talon_debug_modes()",
                    "os": ""
                },
                {
                    "name": "talon debug scope {user.talon_scopes}",
                    "command": "user.talon_debug_scope(talon_scopes)",
                    "os": ""
                },
                {
                    "name": "talon debug setting {user.talon_settings}",
                    "command": "user.talon_debug_setting(talon_settings)",
                    "os": ""
                },
                {
                    "name": "talon debug all settings",
                    "command": "user.talon_debug_all_settings()",
                    "os": ""
                },
                {
                    "name": "talon debug active app",
                    "command": "result = user.talon_get_active_application_info()\nprint(\"**** Dumping active application **** \")\nprint(result)\nprint(\"***********************\")",
                    "os": ""
                },
                {
                    "name": "talon copy active app",
                    "command": "result = user.talon_get_active_application_info()\nclip.set_text(result)",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.misc.websites_and_search_engines.talon",
            "pretty_name": "websites and search engines",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "open {user.website}",
                    "command": "user.open_url(website)",
                    "os": ""
                },
                {
                    "name": "{user.search_engine} hunt <user.text>",
                    "command": "user.search_with_search_engine(search_engine, user.text)",
                    "os": ""
                },
                {
                    "name": "{user.search_engine} (that|this)",
                    "command": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.misc.window_management.talon",
            "pretty_name": "window management",
            "os": "win",
            "raw_commands": [],
            "commands": [
                {
                    "name": "window (new|open)",
                    "command": "app.window_open()",
                    "os": "win"
                },
                {
                    "name": "window next",
                    "command": "app.window_next()",
                    "os": "win"
                },
                {
                    "name": "window last",
                    "command": "app.window_previous()",
                    "os": "win"
                },
                {
                    "name": "window close",
                    "command": "app.window_close()",
                    "os": "win"
                },
                {
                    "name": "focus <user.running_applications>",
                    "command": "user.switcher_focus(running_applications)",
                    "os": "win"
                },
                {
                    "name": "focus",
                    "command": "user.switcher_menu()",
                    "os": "win"
                },
                {
                    "name": "running list",
                    "command": "user.switcher_toggle_running()",
                    "os": "win"
                },
                {
                    "name": "launch <user.launch_applications>",
                    "command": "user.switcher_launch(launch_applications)",
                    "os": "win"
                },
                {
                    "name": "snap <user.window_snap_position>",
                    "command": "user.snap_window(window_snap_position)",
                    "os": "win"
                },
                {
                    "name": "snap next [screen]",
                    "command": "user.move_window_next_screen()",
                    "os": "win"
                },
                {
                    "name": "snap last [screen]",
                    "command": "user.move_window_previous_screen()",
                    "os": "win"
                },
                {
                    "name": "snap screen <number>",
                    "command": "user.move_window_to_screen(number)",
                    "os": "win"
                },
                {
                    "name": "snap <user.running_applications> <user.window_snap_position>",
                    "command": "user.snap_app(running_applications, window_snap_position)",
                    "os": "win"
                },
                {
                    "name": "snap <user.running_applications> [screen] <number>",
                    "command": "user.move_app_to_screen(running_applications, number)",
                    "os": "win"
                }
            ]
        },
        {
            "name": "user.knausj_talon.modes.dictation_mode.talon",
            "pretty_name": "dictation mode",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "press <user.keys>",
                    "command": "key(\"{keys}\")",
                    "os": ""
                },
                {
                    "name": "<user.prose>",
                    "command": "auto_insert(prose)",
                    "os": ""
                },
                {
                    "name": "new line",
                    "command": "\"\\n\"",
                    "os": ""
                },
                {
                    "name": "new paragraph",
                    "command": "\"\\n\\n\"",
                    "os": ""
                },
                {
                    "name": "cap <user.word>",
                    "command": "result = user.formatted_text(word, \"CAPITALIZE_FIRST_WORD\")\nauto_insert(result)\n\n# Navigation",
                    "os": ""
                },
                {
                    "name": "go up <number_small> (line|lines)",
                    "command": "edit.up()\nrepeat(number_small - 1)",
                    "os": ""
                },
                {
                    "name": "go down <number_small> (line|lines)",
                    "command": "edit.down()\nrepeat(number_small - 1)",
                    "os": ""
                },
                {
                    "name": "go left <number_small> (word|words)",
                    "command": "edit.word_left()\nrepeat(number_small - 1)",
                    "os": ""
                },
                {
                    "name": "go right <number_small> (word|words)",
                    "command": "edit.word_right()\nrepeat(number_small - 1)",
                    "os": ""
                },
                {
                    "name": "go line start",
                    "command": "edit.line_start()",
                    "os": ""
                },
                {
                    "name": "go line end",
                    "command": "edit.line_end()",
                    "os": ""
                },
                {
                    "name": "select left <number_small> (word|words)",
                    "command": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "os": ""
                },
                {
                    "name": "select right <number_small> (word|words)",
                    "command": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "os": ""
                },
                {
                    "name": "select left <number_small> (character|characters)",
                    "command": "edit.extend_left()\nrepeat(number_small - 1)",
                    "os": ""
                },
                {
                    "name": "select right <number_small> (character|characters)",
                    "command": "edit.extend_right()\nrepeat(number_small - 1)",
                    "os": ""
                },
                {
                    "name": "clear left <number_small> (word|words)",
                    "command": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "os": ""
                },
                {
                    "name": "clear right <number_small> (word|words)",
                    "command": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "os": ""
                },
                {
                    "name": "clear left <number_small> (character|characters)",
                    "command": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "os": ""
                },
                {
                    "name": "clear right <number_small> (character|characters)",
                    "command": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()\n\n# Formatting",
                    "os": ""
                },
                {
                    "name": "formatted <user.format_text>",
                    "command": "user.dictation_insert_raw(format_text)",
                    "os": ""
                },
                {
                    "name": "format selection <user.formatters>",
                    "command": "user.formatters_reformat_selection(formatters)\n\n# Corrections",
                    "os": ""
                },
                {
                    "name": "scratch that",
                    "command": "user.clear_last_phrase()",
                    "os": ""
                },
                {
                    "name": "scratch selection",
                    "command": "edit.delete()",
                    "os": ""
                },
                {
                    "name": "select that",
                    "command": "user.select_last_phrase()",
                    "os": ""
                },
                {
                    "name": "spell that <user.letters>",
                    "command": "auto_insert(letters)",
                    "os": ""
                },
                {
                    "name": "spell that <user.formatters> <user.letters>",
                    "command": "result = user.formatted_text(letters, formatters)\nuser.dictation_insert_raw(result)\n\n# Escape, type things that would otherwise be commands",
                    "os": ""
                },
                {
                    "name": "escape <user.text>",
                    "command": "auto_insert(user.text)",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.modes.dragon_modes.talon",
            "pretty_name": "dragon modes",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "dragon mode",
                    "command": "user.dragon_mode()",
                    "os": ""
                },
                {
                    "name": "talon mode",
                    "command": "user.talon_mode()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.modes.language_modes.talon",
            "pretty_name": "language modes",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "force see sharp",
                    "command": "user.code_set_language_mode(\"csharp\")",
                    "os": ""
                },
                {
                    "name": "force see plus plus",
                    "command": "user.code_set_language_mode(\"cplusplus\")",
                    "os": ""
                },
                {
                    "name": "force go (lang|language)",
                    "command": "user.code_set_language_mode(\"go\")",
                    "os": ""
                },
                {
                    "name": "force java",
                    "command": "user.code_set_language_mode(\"java\")",
                    "os": ""
                },
                {
                    "name": "force java script",
                    "command": "user.code_set_language_mode(\"javascript\")",
                    "os": ""
                },
                {
                    "name": "force type script",
                    "command": "user.code_set_language_mode(\"typescript\")",
                    "os": ""
                },
                {
                    "name": "force markdown",
                    "command": "user.code_set_language_mode(\"markdown\")",
                    "os": ""
                },
                {
                    "name": "force python",
                    "command": "user.code_set_language_mode(\"python\")",
                    "os": ""
                },
                {
                    "name": "force are language",
                    "command": "user.code_set_language_mode(\"r\")",
                    "os": ""
                },
                {
                    "name": "force talon [language]",
                    "command": "user.code_set_language_mode(\"talon\")",
                    "os": ""
                },
                {
                    "name": "clear language modes",
                    "command": "user.code_clear_language_mode()",
                    "os": ""
                },
                {
                    "name": "[enable] debug mode",
                    "command": "mode.enable(\"user.gdb\")",
                    "os": ""
                },
                {
                    "name": "disable debug mode",
                    "command": "mode.disable(\"user.gdb\")",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.modes.modes.talon",
            "pretty_name": "modes",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "dictation mode",
                    "command": "mode.disable(\"sleep\")\nmode.disable(\"command\")\nmode.enable(\"dictation\")\nuser.code_clear_language_mode()\nmode.disable(\"user.gdb\")",
                    "os": ""
                },
                {
                    "name": "command mode",
                    "command": "mode.disable(\"sleep\")\nmode.disable(\"dictation\")\nmode.enable(\"command\")",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.modes.sleep_mode.talon",
            "pretty_name": "sleep mode",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.modes.sleep_mode_wav2letter.talon",
            "pretty_name": "sleep mode wav2letter",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "<phrase>",
                    "command": "skip()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.modes.wake_up.talon",
            "pretty_name": "wake up",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "welcome back",
                    "command": "user.mouse_wake()\nuser.history_enable()\nuser.talon_mode()",
                    "os": ""
                },
                {
                    "name": "sleep all [<phrase>]",
                    "command": "user.switcher_hide_running()\nuser.history_disable()\nuser.homophones_hide()\nuser.help_hide()\nuser.mouse_sleep()\nspeech.disable()\nuser.engine_sleep()",
                    "os": ""
                },
                {
                    "name": "talon sleep [<phrase>]",
                    "command": "speech.disable()",
                    "os": ""
                },
                {
                    "name": "talon wake",
                    "command": "speech.enable()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.mouse_grid.mouse_grid",
            "pretty_name": "mouse grid",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.mouse_grid.mouse_grid.talon",
            "pretty_name": "mouse grid",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "M grid",
                    "command": "app.notify(\"please use the voice command 'mouse grid' instead of 'm grid'\")\nuser.grid_select_screen(1)\nuser.grid_activate()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.mouse_grid.mouse_grid_always.talon",
            "pretty_name": "mouse grid always",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "mouse grid",
                    "command": "user.grid_select_screen(1)\nuser.grid_activate()\n",
                    "os": ""
                },
                {
                    "name": "grid win",
                    "command": "user.grid_place_window()\nuser.grid_activate()\n",
                    "os": ""
                },
                {
                    "name": "grid <user.number_key>+",
                    "command": "user.grid_activate()\nuser.grid_narrow_list(number_key_list)\n",
                    "os": ""
                },
                {
                    "name": "grid screen [<number>]",
                    "command": "user.grid_select_screen(number or 1)\nuser.grid_activate()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.mouse_grid.mouse_grid_open.talon",
            "pretty_name": "mouse grid open",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "<user.number_key>",
                    "command": "user.grid_narrow(number_key)",
                    "os": ""
                },
                {
                    "name": "grid off",
                    "command": "user.grid_close()\n",
                    "os": ""
                },
                {
                    "name": "grid reset",
                    "command": "user.grid_reset()\n",
                    "os": ""
                },
                {
                    "name": "grid back",
                    "command": "user.grid_go_back()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.settings.talon",
            "pretty_name": "settings",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.talon_draft_window.draft_global.talon",
            "pretty_name": "draft global",
            "os": "win",
            "raw_commands": [],
            "commands": [
                {
                    "name": "draft show",
                    "command": "# Do this toggle so we can have focus when saying 'draft show'\nuser.draft_hide()\nuser.draft_show()\n",
                    "os": "win"
                },
                {
                    "name": "draft show <user.draft_window_position>",
                    "command": "# Do this toggle so we can have focus when saying 'draft show'\nuser.draft_hide()\nuser.draft_show()\nuser.draft_named_move(draft_window_position)\n",
                    "os": "win"
                },
                {
                    "name": "draft show small",
                    "command": "# Do this toggle so we can have focus when saying 'draft show'\nuser.draft_hide()\nuser.draft_show()\nuser.draft_resize(600, 200)\n",
                    "os": "win"
                },
                {
                    "name": "draft show large",
                    "command": "# Do this toggle so we can have focus when saying 'draft show'\nuser.draft_hide()\nuser.draft_show()\nuser.draft_resize(800, 500)\n",
                    "os": "win"
                },
                {
                    "name": "draft empty",
                    "command": "user.draft_show(\"\")",
                    "os": "win"
                },
                {
                    "name": "draft edit",
                    "command": "text = edit.selected_text()\nkey(backspace)\nuser.draft_show(text)\n",
                    "os": "win"
                },
                {
                    "name": "draft edit all",
                    "command": "edit.select_all()\ntext = edit.selected_text()\nkey(backspace)\nuser.draft_show(text)",
                    "os": "win"
                }
            ]
        },
        {
            "name": "user.knausj_talon.talon_draft_window.draft_talon_helpers",
            "pretty_name": "talon draft window",
            "os": "win",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.talon_draft_window.draft_talon_helpers.1",
            "pretty_name": "1",
            "os": "win",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.talon_draft_window.draft_window.talon",
            "pretty_name": "draft window",
            "os": "win",
            "raw_commands": [],
            "commands": [
                {
                    "name": "replace <user.draft_anchor> with <user.text>",
                    "command": "user.draft_select(\"{draft_anchor}\")\nresult = user.formatted_text(text, \"NOOP\")\ninsert(result)\n\n# Position cursor before word",
                    "os": "win"
                },
                {
                    "name": "cursor <user.draft_anchor>",
                    "command": "user.draft_position_caret(\"{draft_anchor}\")\n",
                    "os": "win"
                },
                {
                    "name": "cursor before <user.draft_anchor>",
                    "command": "user.draft_position_caret(\"{draft_anchor}\")\n\n# Position cursor after word",
                    "os": "win"
                },
                {
                    "name": "cursor after <user.draft_anchor>",
                    "command": "user.draft_position_caret(\"{draft_anchor}\", 1)\n\n# Select a whole word",
                    "os": "win"
                },
                {
                    "name": "select <user.draft_anchor>",
                    "command": "user.draft_select(\"{draft_anchor}\")\n\n# Select a range of words",
                    "os": "win"
                },
                {
                    "name": "select <user.draft_anchor> through <user.draft_anchor>",
                    "command": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")\n\n# Delete a word",
                    "os": "win"
                },
                {
                    "name": "clear <user.draft_anchor>",
                    "command": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)\n\n# Delete a range of words",
                    "os": "win"
                },
                {
                    "name": "clear <user.draft_anchor> through <user.draft_anchor>",
                    "command": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)\n\n# reformat word",
                    "os": "win"
                },
                {
                    "name": "<user.formatters> word <user.draft_anchor>",
                    "command": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nuser.formatters_reformat_selection(user.formatters)\n\n# reformat range",
                    "os": "win"
                },
                {
                    "name": "<user.formatters> <user.draft_anchor> through <user.draft_anchor>",
                    "command": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)",
                    "os": "win"
                }
            ]
        },
        {
            "name": "user.knausj_talon.talon_draft_window.draft_window_open.talon",
            "pretty_name": "draft window open",
            "os": "win",
            "raw_commands": [],
            "commands": [
                {
                    "name": "draft hide",
                    "command": "user.draft_hide()",
                    "os": "win"
                },
                {
                    "name": "draft submit",
                    "command": "content = user.draft_get_text()\nuser.draft_hide()\ninsert(content)\n# user.paste may be somewhat faster, but seems to be unreliable on MacOSX, see\n# https://github.com/talonvoice/talon/issues/254#issuecomment-789355238\n# user.paste(content)",
                    "os": "win"
                }
            ]
        },
        {
            "name": "user.knausj_talon.text.find_and_replace.talon",
            "pretty_name": "find and replace",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "hunt this",
                    "command": "user.find(\"\")",
                    "os": ""
                },
                {
                    "name": "hunt this <user.text>",
                    "command": "user.find(text)",
                    "os": ""
                },
                {
                    "name": "hunt all",
                    "command": "user.find_everywhere(\"\")",
                    "os": ""
                },
                {
                    "name": "hunt all <user.text>",
                    "command": "user.find_everywhere(text)",
                    "os": ""
                },
                {
                    "name": "hunt case",
                    "command": "user.find_toggle_match_by_case()",
                    "os": ""
                },
                {
                    "name": "hunt word",
                    "command": "user.find_toggle_match_by_word()",
                    "os": ""
                },
                {
                    "name": "hunt expression",
                    "command": "user.find_toggle_match_by_regex()",
                    "os": ""
                },
                {
                    "name": "hunt next",
                    "command": "user.find_next()",
                    "os": ""
                },
                {
                    "name": "hunt previous",
                    "command": "user.find_previous()",
                    "os": ""
                },
                {
                    "name": "replace this [<user.text>]",
                    "command": "user.replace(text or \"\")",
                    "os": ""
                },
                {
                    "name": "replace all",
                    "command": "user.replace_everywhere(\"\")",
                    "os": ""
                },
                {
                    "name": "replace <user.text> all",
                    "command": "user.replace_everywhere(text)",
                    "os": ""
                },
                {
                    "name": "replace confirm that",
                    "command": "user.replace_confirm()",
                    "os": ""
                },
                {
                    "name": "replace confirm all",
                    "command": "user.replace_confirm_all()",
                    "os": ""
                },
                {
                    "name": "clear last <user.text> [over]",
                    "command": "user.select_previous_occurrence(text)\nsleep(100ms)\nedit.delete()",
                    "os": ""
                },
                {
                    "name": "clear next <user.text> [over]",
                    "command": "user.select_next_occurrence(text)\nsleep(100ms)\nedit.delete()",
                    "os": ""
                },
                {
                    "name": "clear last clip",
                    "command": "user.select_previous_occurrence(clip.text())\nedit.delete()",
                    "os": ""
                },
                {
                    "name": "clear next clip",
                    "command": "user.select_next_occurrence(clip.text())\nsleep(100ms)\nedit.delete()",
                    "os": ""
                },
                {
                    "name": "comment last <user.text> [over]",
                    "command": "user.select_previous_occurrence(text)\nsleep(100ms)\ncode.toggle_comment()",
                    "os": ""
                },
                {
                    "name": "comment last clip",
                    "command": "user.select_previous_occurrence(clip.text())\nsleep(100ms)\ncode.toggle_comment()",
                    "os": ""
                },
                {
                    "name": "comment next <user.text> [over]",
                    "command": "user.select_next_occurrence(text)\nsleep(100ms)\ncode.toggle_comment()",
                    "os": ""
                },
                {
                    "name": "comment next clip",
                    "command": "user.select_next_occurrence(clip.text())\nsleep(100ms)\ncode.toggle_comment()",
                    "os": ""
                },
                {
                    "name": "go last <user.text> [over]",
                    "command": "user.select_previous_occurrence(text)\nsleep(100ms)\nedit.right()",
                    "os": ""
                },
                {
                    "name": "go last clip",
                    "command": "user.select_previous_occurrence(clip.text())\nsleep(100ms)\nedit.right()",
                    "os": ""
                },
                {
                    "name": "go next <user.text> [over]",
                    "command": "user.select_next_occurrence(text)\nedit.right()",
                    "os": ""
                },
                {
                    "name": "go next clip",
                    "command": "user.select_next_occurrence(clip.text())\nedit.right()",
                    "os": ""
                },
                {
                    "name": "paste last <user.text> [over]",
                    "command": "user.select_previous_occurrence(text)\nsleep(100ms)\nedit.right()\nedit.paste()",
                    "os": ""
                },
                {
                    "name": "paste next <user.text> [over]",
                    "command": "user.select_next_occurrence(text)\nsleep(100ms)\nedit.right()\nedit.paste()",
                    "os": ""
                },
                {
                    "name": "replace last <user.text> [over]",
                    "command": "user.select_previous_occurrence(text)\nsleep(100ms)\nedit.paste()",
                    "os": ""
                },
                {
                    "name": "replace next <user.text> [over]",
                    "command": "user.select_next_occurrence(text)\nsleep(100ms)\nedit.paste()",
                    "os": ""
                },
                {
                    "name": "select last <user.text> [over]",
                    "command": "user.select_previous_occurrence(text)",
                    "os": ""
                },
                {
                    "name": "select next <user.text> [over]",
                    "command": "user.select_next_occurrence(text)",
                    "os": ""
                },
                {
                    "name": "select last clip",
                    "command": "user.select_previous_occurrence(clip.text())",
                    "os": ""
                },
                {
                    "name": "select next clip",
                    "command": "user.select_next_occurrence(clip.text())",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.text.generic_editor.talon",
            "pretty_name": "generic editor",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "find it",
                    "command": "edit.find()\n",
                    "os": ""
                },
                {
                    "name": "next one",
                    "command": "edit.find_next()\n",
                    "os": ""
                },
                {
                    "name": "go word left",
                    "command": "edit.word_left()\n",
                    "os": ""
                },
                {
                    "name": "go word right",
                    "command": "edit.word_right()\n",
                    "os": ""
                },
                {
                    "name": "go left",
                    "command": "edit.left()\n",
                    "os": ""
                },
                {
                    "name": "go right",
                    "command": "edit.right()\n",
                    "os": ""
                },
                {
                    "name": "go up",
                    "command": "edit.up()\n",
                    "os": ""
                },
                {
                    "name": "go down",
                    "command": "edit.down()\n",
                    "os": ""
                },
                {
                    "name": "go line start",
                    "command": "edit.line_start()\n",
                    "os": ""
                },
                {
                    "name": "go line end",
                    "command": "edit.line_end()\n",
                    "os": ""
                },
                {
                    "name": "go way left",
                    "command": "edit.line_start()\nedit.line_start()\n",
                    "os": ""
                },
                {
                    "name": "go way right",
                    "command": "edit.line_end()\n",
                    "os": ""
                },
                {
                    "name": "go way down",
                    "command": "edit.file_end()\n",
                    "os": ""
                },
                {
                    "name": "go way up",
                    "command": "edit.file_start()\n",
                    "os": ""
                },
                {
                    "name": "go bottom",
                    "command": "edit.file_end()\n",
                    "os": ""
                },
                {
                    "name": "go top",
                    "command": "edit.file_start()\n",
                    "os": ""
                },
                {
                    "name": "go page down",
                    "command": "edit.page_down()\n",
                    "os": ""
                },
                {
                    "name": "go page up",
                    "command": "edit.page_up()\n\n# selecting",
                    "os": ""
                },
                {
                    "name": "select line",
                    "command": "edit.select_line()\n",
                    "os": ""
                },
                {
                    "name": "select all",
                    "command": "edit.select_all()\n",
                    "os": ""
                },
                {
                    "name": "select left",
                    "command": "edit.extend_left()\n",
                    "os": ""
                },
                {
                    "name": "select right",
                    "command": "edit.extend_right()\n",
                    "os": ""
                },
                {
                    "name": "select up",
                    "command": "edit.extend_line_up()\n",
                    "os": ""
                },
                {
                    "name": "select down",
                    "command": "edit.extend_line_down()\n",
                    "os": ""
                },
                {
                    "name": "select word",
                    "command": "edit.select_word()\n",
                    "os": ""
                },
                {
                    "name": "select word left",
                    "command": "edit.extend_word_left()\n",
                    "os": ""
                },
                {
                    "name": "select word right",
                    "command": "edit.extend_word_right()\n",
                    "os": ""
                },
                {
                    "name": "select way left",
                    "command": "edit.extend_line_start()\n",
                    "os": ""
                },
                {
                    "name": "select way right",
                    "command": "edit.extend_line_end()\n",
                    "os": ""
                },
                {
                    "name": "select way up",
                    "command": "edit.extend_file_start()\n",
                    "os": ""
                },
                {
                    "name": "select way down",
                    "command": "edit.extend_file_end()\n\n# editing",
                    "os": ""
                },
                {
                    "name": "indent [more]",
                    "command": "edit.indent_more()\n",
                    "os": ""
                },
                {
                    "name": "(indent less | out dent)",
                    "command": "edit.indent_less()\n\n# deleting",
                    "os": ""
                },
                {
                    "name": "clear line",
                    "command": "edit.delete_line()\n",
                    "os": ""
                },
                {
                    "name": "clear left",
                    "command": "key(backspace)\n",
                    "os": ""
                },
                {
                    "name": "clear right",
                    "command": "key(delete)\n",
                    "os": ""
                },
                {
                    "name": "clear up",
                    "command": "edit.extend_line_up()\nedit.delete()\n",
                    "os": ""
                },
                {
                    "name": "clear down",
                    "command": "edit.extend_line_down()\nedit.delete()\n",
                    "os": ""
                },
                {
                    "name": "clear word",
                    "command": "edit.delete_word()\n",
                    "os": ""
                },
                {
                    "name": "clear word left",
                    "command": "edit.extend_word_left()\nedit.delete()\n",
                    "os": ""
                },
                {
                    "name": "clear word right",
                    "command": "edit.extend_word_right()\nedit.delete()\n",
                    "os": ""
                },
                {
                    "name": "clear way left",
                    "command": "edit.extend_line_start()\nedit.delete()\n",
                    "os": ""
                },
                {
                    "name": "clear way right",
                    "command": "edit.extend_line_end()\nedit.delete()\n",
                    "os": ""
                },
                {
                    "name": "clear way up",
                    "command": "edit.extend_file_start()\nedit.delete()\n",
                    "os": ""
                },
                {
                    "name": "clear way down",
                    "command": "edit.extend_file_end()\nedit.delete()\n",
                    "os": ""
                },
                {
                    "name": "clear all",
                    "command": "edit.select_all()\nedit.delete()\n\n#copy commands",
                    "os": ""
                },
                {
                    "name": "copy all",
                    "command": "edit.select_all()\nedit.copy()\n#to do: do we want these variants, seem to conflict\n# copy left:\n#      edit.extend_left()\n#      edit.copy()\n# copy right:\n#     edit.extend_right()\n#     edit.copy()\n# copy up:\n#     edit.extend_up()\n#     edit.copy()\n# copy down:\n#     edit.extend_down()\n#     edit.copy()\n",
                    "os": ""
                },
                {
                    "name": "copy word",
                    "command": "edit.select_word()\nedit.copy()\n",
                    "os": ""
                },
                {
                    "name": "copy word left",
                    "command": "edit.extend_word_left()\nedit.copy()\n",
                    "os": ""
                },
                {
                    "name": "copy word right",
                    "command": "edit.extend_word_right()\nedit.copy()\n",
                    "os": ""
                },
                {
                    "name": "copy line",
                    "command": "edit.select_line()\nedit.copy()\n\n#cut commands",
                    "os": ""
                },
                {
                    "name": "cut all",
                    "command": "edit.select_all()\nedit.cut()\n#to do: do we want these variants\n# cut left:\n#      edit.select_all()\n#      edit.cut()\n# cut right:\n#      edit.select_all()\n#      edit.cut()\n# cut up:\n#      edit.select_all()\n#     edit.cut()\n# cut down:\n#     edit.select_all()\n#     edit.cut()\n",
                    "os": ""
                },
                {
                    "name": "cut word",
                    "command": "edit.select_word()\nedit.cut()\n",
                    "os": ""
                },
                {
                    "name": "cut word left",
                    "command": "edit.extend_word_left()\nedit.cut()\n",
                    "os": ""
                },
                {
                    "name": "cut word right",
                    "command": "edit.extend_word_right()\nedit.cut()\n",
                    "os": ""
                },
                {
                    "name": "cut line",
                    "command": "edit.select_line()\nedit.cut()\n",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.text.homophones.talon",
            "pretty_name": "homophones",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "phones <user.homophones_canonical>",
                    "command": "user.homophones_show(homophones_canonical)",
                    "os": ""
                },
                {
                    "name": "phones that",
                    "command": "user.homophones_show_selection()",
                    "os": ""
                },
                {
                    "name": "phones force <user.homophones_canonical>",
                    "command": "user.homophones_force_show(homophones_canonical)",
                    "os": ""
                },
                {
                    "name": "phones force",
                    "command": "user.homophones_force_show_selection()",
                    "os": ""
                },
                {
                    "name": "phones hide",
                    "command": "user.homophones_hide()",
                    "os": ""
                },
                {
                    "name": "phones word",
                    "command": "edit.select_word()\nuser.homophones_show_selection()",
                    "os": ""
                },
                {
                    "name": "phones [<user.ordinals>] word left",
                    "command": "n = ordinals or 1\nuser.words_left(n - 1)\nedit.extend_word_left()\nuser.homophones_show_selection()",
                    "os": ""
                },
                {
                    "name": "phones [<user.ordinals>] word right",
                    "command": "n = ordinals or 1\nuser.words_right(n - 1)\nedit.extend_word_right()\nuser.homophones_show_selection()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.text.homophones_open.talon",
            "pretty_name": "homophones open",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "choose <number_small>",
                    "command": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "os": ""
                },
                {
                    "name": "choose <user.formatters> <number_small>",
                    "command": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.text.line_commands.talon",
            "pretty_name": "line commands",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "lend",
                    "command": "edit.line_end()",
                    "os": ""
                },
                {
                    "name": "bend",
                    "command": "edit.line_start()",
                    "os": ""
                },
                {
                    "name": "go <number>",
                    "command": "edit.jump_line(number)",
                    "os": ""
                },
                {
                    "name": "go <number> end",
                    "command": "edit.jump_line(number)\nedit.line_end()",
                    "os": ""
                },
                {
                    "name": "comment [line] <number>",
                    "command": "user.select_range(number, number)\ncode.toggle_comment()",
                    "os": ""
                },
                {
                    "name": "comment <number> until <number>",
                    "command": "user.select_range(number_1, number_2)\ncode.toggle_comment()",
                    "os": ""
                },
                {
                    "name": "clear [line] <number>",
                    "command": "edit.jump_line(number)\nuser.select_range(number, number)\nedit.delete()",
                    "os": ""
                },
                {
                    "name": "clear <number> until <number>",
                    "command": "user.select_range(number_1, number_2)\nedit.delete()",
                    "os": ""
                },
                {
                    "name": "copy [line] <number>",
                    "command": "user.select_range(number, number)\nedit.copy()",
                    "os": ""
                },
                {
                    "name": "copy <number> until <number>",
                    "command": "user.select_range(number_1, number_2)\nedit.copy()",
                    "os": ""
                },
                {
                    "name": "cut [line] <number>",
                    "command": "user.select_range(number, number)\nedit.cut()",
                    "os": ""
                },
                {
                    "name": "cut [line] <number> until <number>",
                    "command": "user.select_range(number_1, number_2)\nedit.cut()",
                    "os": ""
                },
                {
                    "name": "(paste | replace) <number> until <number>",
                    "command": "user.select_range(number_1, number_2)\nedit.paste()",
                    "os": ""
                },
                {
                    "name": "(select | cell | sell) [line] <number>",
                    "command": "user.select_range(number, number)",
                    "os": ""
                },
                {
                    "name": "(select | cell | sell) <number> until <number>",
                    "command": "user.select_range(number_1, number_2)",
                    "os": ""
                },
                {
                    "name": "tab that",
                    "command": "edit.indent_more()",
                    "os": ""
                },
                {
                    "name": "tab [line] <number>",
                    "command": "edit.jump_line(number)\nedit.indent_more()",
                    "os": ""
                },
                {
                    "name": "tab <number> until <number>",
                    "command": "user.select_range(number_1, number_2)\nedit.indent_more()",
                    "os": ""
                },
                {
                    "name": "retab that",
                    "command": "edit.indent_less()",
                    "os": ""
                },
                {
                    "name": "retab [line] <number>",
                    "command": "user.select_range(number, number)\nedit.indent_less()",
                    "os": ""
                },
                {
                    "name": "retab <number> until <number>",
                    "command": "user.select_range(number_1, number_2)\nedit.indent_less()",
                    "os": ""
                },
                {
                    "name": "drag [line] down",
                    "command": "edit.line_swap_down()",
                    "os": ""
                },
                {
                    "name": "drag [line] up",
                    "command": "edit.line_swap_up()",
                    "os": ""
                },
                {
                    "name": "drag up [line] <number>",
                    "command": "user.select_range(number, number)\nedit.line_swap_up()",
                    "os": ""
                },
                {
                    "name": "drag up <number> until <number>",
                    "command": "user.select_range(number_1, number_2)\nedit.line_swap_up()",
                    "os": ""
                },
                {
                    "name": "drag down [line] <number>",
                    "command": "user.select_range(number, number)\nedit.line_swap_down()",
                    "os": ""
                },
                {
                    "name": "drag down <number> until <number>",
                    "command": "user.select_range(number_1, number_2)\nedit.line_swap_down()",
                    "os": ""
                },
                {
                    "name": "clone (line|that)",
                    "command": "edit.line_clone()",
                    "os": ""
                },
                {
                    "name": "select camel left",
                    "command": "user.extend_camel_left()",
                    "os": ""
                },
                {
                    "name": "select camel right",
                    "command": "user.extend_camel_right()",
                    "os": ""
                },
                {
                    "name": "go camel left",
                    "command": "user.camel_left()",
                    "os": ""
                },
                {
                    "name": "go camel right",
                    "command": "user.camel_right()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.text.numbers.talon",
            "pretty_name": "numbers",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "<user.number_string>",
                    "command": "\"{number_string}\"",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.text.symbols.talon",
            "pretty_name": "symbols",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "question [mark]",
                    "command": "\"?\"",
                    "os": ""
                },
                {
                    "name": "(downscore | underscore)",
                    "command": "\"_\"",
                    "os": ""
                },
                {
                    "name": "double dash",
                    "command": "\"--\"",
                    "os": ""
                },
                {
                    "name": "(bracket | brack | left bracket)",
                    "command": "\"{\"",
                    "os": ""
                },
                {
                    "name": "(rbrack | are bracket | right bracket)",
                    "command": "\"}\"",
                    "os": ""
                },
                {
                    "name": "triple quote",
                    "command": "\"'''\"",
                    "os": ""
                },
                {
                    "name": "(triple grave | triple back tick | gravy)",
                    "command": "insert(\"```\")",
                    "os": ""
                },
                {
                    "name": "(dot dot | dotdot)",
                    "command": "\"..\"",
                    "os": ""
                },
                {
                    "name": "ellipses",
                    "command": "\"...\"",
                    "os": ""
                },
                {
                    "name": "(comma and | spamma)",
                    "command": "\", \"",
                    "os": ""
                },
                {
                    "name": "plus",
                    "command": "\"+\"",
                    "os": ""
                },
                {
                    "name": "arrow",
                    "command": "\"->\"",
                    "os": ""
                },
                {
                    "name": "dub arrow",
                    "command": "\"=>\"",
                    "os": ""
                },
                {
                    "name": "new line",
                    "command": "\"\\\\n\"",
                    "os": ""
                },
                {
                    "name": "carriage return",
                    "command": "\"\\\\r\"",
                    "os": ""
                },
                {
                    "name": "line feed",
                    "command": "\"\\\\r\\\\n\"",
                    "os": ""
                },
                {
                    "name": "empty dubstring",
                    "command": "'\"\"'\nkey(left)",
                    "os": ""
                },
                {
                    "name": "empty escaped (dubstring|dub quotes)",
                    "command": "'\\\\\"\\\\\"'\nkey(left)\nkey(left)",
                    "os": ""
                },
                {
                    "name": "empty string",
                    "command": "\"''\"\nkey(left)",
                    "os": ""
                },
                {
                    "name": "empty escaped string",
                    "command": "\"\\\\'\\\\'\"\nkey(left)\nkey(left)",
                    "os": ""
                },
                {
                    "name": "(inside parens | args)",
                    "command": "insert(\"()\")\nkey(left)",
                    "os": ""
                },
                {
                    "name": "inside (squares | square brackets | list)",
                    "command": "insert(\"[]\")\nkey(left)",
                    "os": ""
                },
                {
                    "name": "inside (bracket | braces)",
                    "command": "insert(\"{}\")\nkey(left)",
                    "os": ""
                },
                {
                    "name": "inside percent",
                    "command": "insert(\"%%\")\nkey(left)",
                    "os": ""
                },
                {
                    "name": "inside (quotes | string)",
                    "command": "insert(\"''\")\nkey(left)",
                    "os": ""
                },
                {
                    "name": "inside (double quotes | dubquotes)",
                    "command": "insert('\"\"')\nkey(left)",
                    "os": ""
                },
                {
                    "name": "inside (graves | back ticks)",
                    "command": "insert(\"``\")\nkey(left)",
                    "os": ""
                },
                {
                    "name": "angle that",
                    "command": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "os": ""
                },
                {
                    "name": "(square | square bracket) that",
                    "command": "text = edit.selected_text()\nuser.paste(\"[{text}]\")",
                    "os": ""
                },
                {
                    "name": "(bracket | brace) that",
                    "command": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "os": ""
                },
                {
                    "name": "(parens | args) that",
                    "command": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "os": ""
                },
                {
                    "name": "percent that",
                    "command": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "os": ""
                },
                {
                    "name": "quote that",
                    "command": "text = edit.selected_text()\nuser.paste(\"'{text}'\")",
                    "os": ""
                },
                {
                    "name": "(double quote | dubquote) that",
                    "command": "text = edit.selected_text()\nuser.paste('\"{text}\"')",
                    "os": ""
                },
                {
                    "name": "(grave | back tick) that",
                    "command": "text = edit.selected_text()\nuser.paste('`{text}`')",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.knausj_talon.text.text_navigation",
            "pretty_name": "text navigation",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.knausj_talon.text.text_navigation.talon",
            "pretty_name": "text navigation",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "navigate [{user.arrow_key}] [{user.navigation_action}] [{user.navigation_target_name}] [{user.before_or_after}] [<user.ordinals>] <user.navigation_target>",
                    "command": "## If you use this command a lot, you may wish to have a shorter syntax that omits the navigate keyword. Note that you then at least have to say either a navigation_action or before_or_after:\n#({user.navigation_action} [{user.arrow_key}] [{user.navigation_target_name}] [{user.before_or_after}] | [{user.arrow_key}] {user.before_or_after}) [<user.ordinals>] <user.navigation_target>:\nuser.navigation(navigation_action or \"GO\", arrow_key or \"RIGHT\", navigation_target_name or \"DEFAULT\", before_or_after or \"DEFAULT\", navigation_target, ordinals or 1)\n\n# ===== Examples of use =====\n#\n#   navigate comma: moves after the next \",\" on the line.\n#   navigate before five: moves before the next \"5\" on the line.\n#   navigate left underscore: moves before the previous \"_\" on the line.\n#   navigate left after second plex: moves after the second-previous \"x\" on the line.\n#\n# Besides characters, we can find phrases or move in predetermined units:\n#\n#   navigate phrase hello world: moves after the next \"hello world\" on the line.\n#   navigate left third word: moves left over three words.\n#   navigate before second big: moves before the second-next 'big' word (a chunk of anything except white space).\n#   navigate left second small: moves left over two 'small' words (chunks of a camelCase name).\n#\n# We can search several lines (default 10) above or below the cursor:\n#\n#   navigate up phrase john: moves before the previous \"john\" (case-insensitive) on the preceding lines.\n#   navigate down third period: moves after the third period on the following lines.\n#\n# Besides movement, we can cut, copy, select, clear (delete), or extend the current selection:\n#\n#   navigate cut after comma: cut the word following the next comma on the line.\n#   navigate left copy third word: copy the third word to the left.\n#   navigate extend third big: extend the selection three big words right.\n#   navigate down clear phrase I think: delete the next occurrence of \"I think\" on the following lines.\n#   navigate up select colon: select the closest colon on the preceeding lines.\n#\n# We can specify what gets selected before or after the given input:\n#\n#\tnavigate select parens after equals: Select the first \"(\" and everything until the first \")\" after the \"=\"\n#\tnavigate left copy all before equals: Copy everything from the start of the line until the first \"=\" you encounter while moving left\n#\tnavigate clear constant before semicolon: Delete the last word consisting of only uppercase characters or underscores before a \";\"\n#\n# ===== Explanation of the grammar =====\n#\n# [{user.arrow_key}]: left, right, up, down (default: right)\n#   Which direction to navigate in.\n#   left/right work on the current line.\n#   up/down work on the closest lines (default: 10) above or below.\n#\n# [{user.navigation_action}]: move, extend, select, clear, cut, copy (default: move)\n#   What action to perform.\n#\n# [{user.navigation_target_name}]: word, small, big, parens, squares, braces, quotes, angles, all, method, constant (default: word)\n#\tThe predetermined unit to select if before_or_after was specified.\n#\tDefaults to \"word\"\n#\n# [{user.before_or_after}]: before, after (default: special behavior)\n#   For move/extend: where to leave the cursor, before or after the target.\n#   Defaults to \"after\" for right/down and \"before\" for left/up.\n#\n#   For select/copy/cut: if absent, select/copy/cut the target iself. If\n#   present, the navigation_target_name before/after the target.\n#\n# [<user.ordinals>]: an english ordinal, like \"second\" (default: first)\n#   Which occurrence of the target to navigate to.\n#\n# <user.navigation_target>: one of the following:\n#   - a character name, like \"comma\" or \"five\".\n#   - \"word\" or \"big\" or \"small\"\n#   - \"phrase <some text to search for>\"\n#   Specifies the target to search for/navigate to.\n\n# The functionality for all these commands is covered in the lines above, but these commands are kept here for convenience. Originally from word_selection.talon.",
                    "os": ""
                },
                {
                    "name": "word neck [<number_small>]",
                    "command": "user.navigation_by_name(\"SELECT\", \"RIGHT\", \"DEFAULT\", \"word\", number_small or 1)",
                    "os": ""
                },
                {
                    "name": "word pre [<number_small>]",
                    "command": "user.navigation_by_name(\"SELECT\", \"LEFT\", \"DEFAULT\", \"word\", number_small or 1)",
                    "os": ""
                },
                {
                    "name": "small word neck [<number_small>]",
                    "command": "user.navigation_by_name(\"SELECT\", \"RIGHT\", \"DEFAULT\", \"small\", number_small or 1)",
                    "os": ""
                },
                {
                    "name": "small word pre [<number_small>]",
                    "command": "user.navigation_by_name(\"SELECT\", \"LEFT\", \"DEFAULT\", \"small\", number_small or 1)",
                    "os": ""
                },
                {
                    "name": "big word neck [<number_small>]",
                    "command": "user.navigation_by_name(\"SELECT\", \"RIGHT\", \"DEFAULT\", \"big\", number_small or 1)",
                    "os": ""
                },
                {
                    "name": "big word pre [<number_small>]",
                    "command": "user.navigation_by_name(\"SELECT\", \"LEFT\", \"DEFAULT\", \"big\", number_small or 1)",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.personal.cheatsheet.talon",
            "pretty_name": "cheatsheet",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "print cheatsheet",
                    "command": "user.cheatsheet()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.personal.hotkeys.talon",
            "pretty_name": "hotkeys",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.personal.powertoys.talon",
            "pretty_name": "powertoys",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "(search tool)",
                    "command": "key(win-space)",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.personal.talon_control.talon",
            "pretty_name": "talon control",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "welcome back",
                    "command": "user.mouse_wake()\nuser.history_enable()\nuser.talon_mode()\n",
                    "os": ""
                },
                {
                    "name": "drowsy [<phrase>]",
                    "command": "speech.disable()",
                    "os": ""
                },
                {
                    "name": "talon wake",
                    "command": "speech.enable()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.personal.voicespeach.talon",
            "pretty_name": "voicespeach",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.talon_cheatsheet.cheatsheet.talon",
            "pretty_name": "cheatsheet",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "print json cheatsheet",
                    "command": "user.json_cheatsheet()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.talon_hud.choice_commands.talon",
            "pretty_name": "choice commands",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "[option] {user.talon_hud_choices}",
                    "command": "user.hud_activate_choice(talon_hud_choices)",
                    "os": ""
                },
                {
                    "name": "option {user.talon_hud_numerical_choices}+",
                    "command": "user.hud_activate_choices(talon_hud_numerical_choices_list)",
                    "os": ""
                },
                {
                    "name": "option {user.talon_hud_numerical_choices}+ {user.talon_hud_choices}",
                    "command": "user.hud_activate_choices(talon_hud_numerical_choices_list)\nuser.hud_activate_choice(talon_hud_choices)",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.talon_hud.commands.talon",
            "pretty_name": "commands",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "head up (show|open)",
                    "command": "user.enable_hud()",
                    "os": ""
                },
                {
                    "name": "head up theme {user.talon_hud_themes}",
                    "command": "user.switch_hud_theme(talon_hud_themes)",
                    "os": ""
                },
                {
                    "name": "head up (drop|stop|confirm)",
                    "command": "user.set_hud_setup_mode(\"*\", \"\")",
                    "os": ""
                },
                {
                    "name": "head up cancel",
                    "command": "user.set_hud_setup_mode(\"*\", \"cancel\")",
                    "os": ""
                },
                {
                    "name": "head up (hide|close)",
                    "command": "user.disable_hud()",
                    "os": ""
                },
                {
                    "name": "head up (show|open) {user.talon_hud_widget_names}",
                    "command": "user.enable_hud_id(talon_hud_widget_names)",
                    "os": ""
                },
                {
                    "name": "head up (hide|close) {user.talon_hud_widget_names}",
                    "command": "user.disable_hud_id(talon_hud_widget_names)",
                    "os": ""
                },
                {
                    "name": "head up resize {user.talon_hud_widget_names}",
                    "command": "user.set_hud_setup_mode(talon_hud_widget_names, \"dimension\")",
                    "os": ""
                },
                {
                    "name": "head up expand {user.talon_hud_widget_names}",
                    "command": "user.set_hud_setup_mode(talon_hud_widget_names, \"limit\")",
                    "os": ""
                },
                {
                    "name": "head up text scale {user.talon_hud_widget_names}",
                    "command": "user.set_hud_setup_mode(talon_hud_widget_names, \"font_size\")",
                    "os": ""
                },
                {
                    "name": "head up drag {user.talon_hud_widget_names}+",
                    "command": "user.set_hud_setup_mode_multi(talon_hud_widget_names_list, \"position\")",
                    "os": ""
                },
                {
                    "name": "head up basic {user.talon_hud_widget_names}",
                    "command": "user.set_widget_preference(talon_hud_widget_names, \"show_animations\", 0)",
                    "os": ""
                },
                {
                    "name": "head up fancy {user.talon_hud_widget_names}",
                    "command": "user.set_widget_preference(talon_hud_widget_names, \"show_animations\", 1)",
                    "os": ""
                },
                {
                    "name": "head up hide {user.talon_hud_widget_names} on sleep",
                    "command": "user.set_widget_preference(talon_hud_widget_names, \"sleep_enabled\", 0)",
                    "os": ""
                },
                {
                    "name": "head up show {user.talon_hud_widget_names} on sleep",
                    "command": "user.set_widget_preference(talon_hud_widget_names, \"sleep_enabled\", 1)",
                    "os": ""
                },
                {
                    "name": "head up align {user.talon_hud_widget_names} right",
                    "command": "user.set_widget_preference(talon_hud_widget_names, \"alignment\", \"right\")",
                    "os": ""
                },
                {
                    "name": "head up align {user.talon_hud_widget_names} left",
                    "command": "user.set_widget_preference(talon_hud_widget_names, \"alignment\", \"left\")",
                    "os": ""
                },
                {
                    "name": "head up align {user.talon_hud_widget_names} center",
                    "command": "user.set_widget_preference(talon_hud_widget_names, \"alignment\", \"center\")",
                    "os": ""
                },
                {
                    "name": "head up align {user.talon_hud_widget_names} top",
                    "command": "user.set_widget_preference(talon_hud_widget_names, \"expand_direction\", \"down\")",
                    "os": ""
                },
                {
                    "name": "head up align {user.talon_hud_widget_names} bottom",
                    "command": "user.set_widget_preference(talon_hud_widget_names, \"expand_direction\", \"up\")",
                    "os": ""
                },
                {
                    "name": "{user.talon_hud_widget_names} (show|open)",
                    "command": "user.enable_hud_id(talon_hud_widget_names)",
                    "os": ""
                },
                {
                    "name": "{user.talon_hud_widget_names} (hide|close)",
                    "command": "user.disable_hud_id(talon_hud_widget_names)",
                    "os": ""
                },
                {
                    "name": "{user.talon_hud_widget_names} minimize",
                    "command": "user.set_widget_preference(talon_hud_widget_names, \"minimized\", 1)",
                    "os": ""
                },
                {
                    "name": "{user.talon_hud_widget_names} maximize",
                    "command": "user.set_widget_preference(talon_hud_widget_names, \"minimized\", 0)",
                    "os": ""
                },
                {
                    "name": "{user.talon_hud_widget_names} next",
                    "command": "user.increase_widget_page(talon_hud_widget_names)",
                    "os": ""
                },
                {
                    "name": "{user.talon_hud_widget_names} (back|previous)",
                    "command": "user.decrease_widget_page(talon_hud_widget_names)",
                    "os": ""
                },
                {
                    "name": "{user.talon_hud_widget_names} options",
                    "command": "user.hud_widget_options(talon_hud_widget_names)",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.talon_hud.content.documentation",
            "pretty_name": "documentation",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.talon_hud.content.documentation.talon",
            "pretty_name": "documentation",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "{user.talon_hud_documentation_title}",
                    "command": "user.hud_show_documentation(talon_hud_documentation_title)",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.talon_hud.content.toolkit.talon",
            "pretty_name": "toolkit",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "toolkit options",
                    "command": "user.hud_toolkit_options()",
                    "os": ""
                },
                {
                    "name": "toolkit scope",
                    "command": "user.hud_toolkit_scope()",
                    "os": ""
                },
                {
                    "name": "toolkit microphones",
                    "command": "user.show_microphone_options()",
                    "os": ""
                },
                {
                    "name": "toolkit documentation",
                    "command": "user.hud_show_documentation()",
                    "os": ""
                },
                {
                    "name": "toolkit walk throughs",
                    "command": "user.hud_show_walkthroughs()",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.talon_hud.content.walkthrough",
            "pretty_name": "walkthrough",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.talon_hud.content.walkthrough.talon",
            "pretty_name": "walkthrough",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "read more",
                    "command": "user.increase_widget_page(\"walk_through\")",
                    "os": ""
                },
                {
                    "name": "skip step",
                    "command": "sleep(1.5)\nuser.hud_skip_walkthrough_step()",
                    "os": ""
                },
                {
                    "name": "skip everything",
                    "command": "user.hud_skip_walkthrough_all()",
                    "os": ""
                },
                {
                    "name": "previous step",
                    "command": "user.hud_previous_walkthrough_step()",
                    "os": ""
                },
                {
                    "name": "head up theme dark",
                    "command": "sleep(0.5)\nuser.switch_hud_theme('dark')",
                    "os": ""
                },
                {
                    "name": "head up theme light",
                    "command": "sleep(1.5)\nuser.switch_hud_theme('light')",
                    "os": ""
                },
                {
                    "name": "music and video playlist",
                    "command": "user.open_url(\"https://www.youtube.com/watch?v=lyVICt4vdB0&list=PLEelxuGt2Io5jGNnA44S9lRhclhz7po1U&index=1\")",
                    "os": ""
                }
            ]
        },
        {
            "name": "user.talon_hud.display",
            "pretty_name": "display",
            "os": "",
            "raw_commands": [],
            "commands": []
        },
        {
            "name": "user.talon_hud.widget_quick_choices.talon",
            "pretty_name": "widget quick choices",
            "os": "",
            "raw_commands": [],
            "commands": [
                {
                    "name": "{user.talon_hud_quick_choices}",
                    "command": "user.hud_activate_choice(talon_hud_quick_choices)",
                    "os": ""
                }
            ]
        }
    ]
}